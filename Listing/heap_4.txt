; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\heap_4.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\heap_4.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\heap_4.crf ..\..\Freee-RTOS\portable\MemMang\heap_4.c]
                          THUMB

                          AREA ||i.prvHeapInit||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;370    
;;;371    static void prvHeapInit( void )
000000  b530              PUSH     {r4,r5,lr}
;;;372    {
;;;373    BlockLink_t *pxFirstFreeBlock;
;;;374    uint8_t *pucAlignedHeap;
;;;375    size_t uxAddress;
;;;376    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
000002  f44f5340          MOV      r3,#0x3000
;;;377    
;;;378    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;379    	uxAddress = ( size_t ) ucHeap;
000006  4817              LDR      r0,|L1.100|
;;;380    
;;;381    	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
000008  f0000407          AND      r4,r0,#7
00000c  b12c              CBZ      r4,|L1.26|
;;;382    	{
;;;383    		uxAddress += ( portBYTE_ALIGNMENT - 1 );
00000e  1dc0              ADDS     r0,r0,#7
;;;384    		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
000010  f0200007          BIC      r0,r0,#7
;;;385    		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
000014  4c13              LDR      r4,|L1.100|
000016  1b04              SUBS     r4,r0,r4
000018  1b1b              SUBS     r3,r3,r4
                  |L1.26|
;;;386    	}
;;;387    
;;;388    	pucAlignedHeap = ( uint8_t * ) uxAddress;
00001a  4602              MOV      r2,r0
;;;389    
;;;390    	/* xStart is used to hold a pointer to the first item in the list of free
;;;391    	blocks.  The void cast is used to prevent compiler warnings. */
;;;392    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
00001c  4c12              LDR      r4,|L1.104|
00001e  6022              STR      r2,[r4,#0]  ; xStart
;;;393    	xStart.xBlockSize = ( size_t ) 0;
000020  2400              MOVS     r4,#0
000022  4d11              LDR      r5,|L1.104|
000024  606c              STR      r4,[r5,#4]  ; xStart
;;;394    
;;;395    	/* pxEnd is used to mark the end of the list of free blocks and is inserted
;;;396    	at the end of the heap space. */
;;;397    	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
000026  18d0              ADDS     r0,r2,r3
;;;398    	uxAddress -= xHeapStructSize;
000028  3808              SUBS     r0,r0,#8
;;;399    	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
00002a  f0200007          BIC      r0,r0,#7
;;;400    	pxEnd = ( void * ) uxAddress;
00002e  4c0f              LDR      r4,|L1.108|
000030  6020              STR      r0,[r4,#0]  ; pxEnd
;;;401    	pxEnd->xBlockSize = 0;
000032  2400              MOVS     r4,#0
000034  4d0d              LDR      r5,|L1.108|
000036  682d              LDR      r5,[r5,#0]  ; pxEnd
000038  606c              STR      r4,[r5,#4]
;;;402    	pxEnd->pxNextFreeBlock = NULL;
00003a  4d0c              LDR      r5,|L1.108|
00003c  682d              LDR      r5,[r5,#0]  ; pxEnd
00003e  602c              STR      r4,[r5,#0]
;;;403    
;;;404    	/* To start with there is a single free block that is sized to take up the
;;;405    	entire heap space, minus the space taken by pxEnd. */
;;;406    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
000040  4611              MOV      r1,r2
;;;407    	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
000042  1a44              SUBS     r4,r0,r1
000044  604c              STR      r4,[r1,#4]
;;;408    	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
000046  4c09              LDR      r4,|L1.108|
000048  6824              LDR      r4,[r4,#0]  ; pxEnd
00004a  600c              STR      r4,[r1,#0]
;;;409    
;;;410    	/* Only one block exists - and it covers the entire usable heap space. */
;;;411    	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
00004c  4d08              LDR      r5,|L1.112|
00004e  684c              LDR      r4,[r1,#4]
000050  602c              STR      r4,[r5,#0]  ; xMinimumEverFreeBytesRemaining
;;;412    	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
000052  4d08              LDR      r5,|L1.116|
000054  684c              LDR      r4,[r1,#4]
000056  602c              STR      r4,[r5,#0]  ; xFreeBytesRemaining
;;;413    
;;;414    	/* Work out the position of the top bit in a size_t variable. */
;;;415    	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
000058  f04f4400          MOV      r4,#0x80000000
00005c  4d06              LDR      r5,|L1.120|
00005e  602c              STR      r4,[r5,#0]  ; xBlockAllocatedBit
;;;416    }
000060  bd30              POP      {r4,r5,pc}
;;;417    /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      ucHeap
                  |L1.104|
                          DCD      xStart
                  |L1.108|
                          DCD      pxEnd
                  |L1.112|
                          DCD      xMinimumEverFreeBytesRemaining
                  |L1.116|
                          DCD      xFreeBytesRemaining
                  |L1.120|
                          DCD      xBlockAllocatedBit

                          AREA ||i.prvInsertBlockIntoFreeList||, CODE, READONLY, ALIGN=2

                  prvInsertBlockIntoFreeList PROC
;;;418    
;;;419    static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
000000  b510              PUSH     {r4,lr}
;;;420    {
000002  4601              MOV      r1,r0
;;;421    BlockLink_t *pxIterator;
;;;422    uint8_t *puc;
;;;423    
;;;424    	/* Iterate through the list until a block is found that has a higher address
;;;425    	than the block being inserted. */
;;;426    	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
000004  4816              LDR      r0,|L2.96|
000006  e000              B        |L2.10|
                  |L2.8|
000008  6800              LDR      r0,[r0,#0]
                  |L2.10|
00000a  6803              LDR      r3,[r0,#0]
00000c  428b              CMP      r3,r1
00000e  d3fb              BCC      |L2.8|
;;;427    	{
;;;428    		/* Nothing to do here, just iterate to the right position. */
;;;429    	}
;;;430    
;;;431    	/* Do the block being inserted, and the block it is being inserted after
;;;432    	make a contiguous block of memory? */
;;;433    	puc = ( uint8_t * ) pxIterator;
000010  4602              MOV      r2,r0
;;;434    	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
000012  6843              LDR      r3,[r0,#4]
000014  4413              ADD      r3,r3,r2
000016  428b              CMP      r3,r1
000018  d104              BNE      |L2.36|
;;;435    	{
;;;436    		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
00001a  6843              LDR      r3,[r0,#4]
00001c  684c              LDR      r4,[r1,#4]
00001e  4423              ADD      r3,r3,r4
000020  6043              STR      r3,[r0,#4]
;;;437    		pxBlockToInsert = pxIterator;
000022  4601              MOV      r1,r0
                  |L2.36|
;;;438    	}
;;;439    	else
;;;440    	{
;;;441    		mtCOVERAGE_TEST_MARKER();
;;;442    	}
;;;443    
;;;444    	/* Do the block being inserted, and the block it is being inserted before
;;;445    	make a contiguous block of memory? */
;;;446    	puc = ( uint8_t * ) pxBlockToInsert;
000024  460a              MOV      r2,r1
;;;447    	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
000026  684b              LDR      r3,[r1,#4]
000028  4413              ADD      r3,r3,r2
00002a  6804              LDR      r4,[r0,#0]
00002c  42a3              CMP      r3,r4
00002e  d111              BNE      |L2.84|
;;;448    	{
;;;449    		if( pxIterator->pxNextFreeBlock != pxEnd )
000030  4c0c              LDR      r4,|L2.100|
000032  6803              LDR      r3,[r0,#0]
000034  6824              LDR      r4,[r4,#0]  ; pxEnd
000036  42a3              CMP      r3,r4
000038  d008              BEQ      |L2.76|
;;;450    		{
;;;451    			/* Form one big block from the two blocks. */
;;;452    			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
00003a  684b              LDR      r3,[r1,#4]
00003c  6804              LDR      r4,[r0,#0]
00003e  6864              LDR      r4,[r4,#4]
000040  4423              ADD      r3,r3,r4
000042  604b              STR      r3,[r1,#4]
;;;453    			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
000044  6803              LDR      r3,[r0,#0]
000046  681b              LDR      r3,[r3,#0]
000048  600b              STR      r3,[r1,#0]
00004a  e005              B        |L2.88|
                  |L2.76|
;;;454    		}
;;;455    		else
;;;456    		{
;;;457    			pxBlockToInsert->pxNextFreeBlock = pxEnd;
00004c  4b05              LDR      r3,|L2.100|
00004e  681b              LDR      r3,[r3,#0]  ; pxEnd
000050  600b              STR      r3,[r1,#0]
000052  e001              B        |L2.88|
                  |L2.84|
;;;458    		}
;;;459    	}
;;;460    	else
;;;461    	{
;;;462    		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
000054  6803              LDR      r3,[r0,#0]
000056  600b              STR      r3,[r1,#0]
                  |L2.88|
;;;463    	}
;;;464    
;;;465    	/* If the block being inserted plugged a gab, so was merged with the block
;;;466    	before and the block after, then it's pxNextFreeBlock pointer will have
;;;467    	already been set, and should not be set here as that would make it point
;;;468    	to itself. */
;;;469    	if( pxIterator != pxBlockToInsert )
000058  4288              CMP      r0,r1
00005a  d000              BEQ      |L2.94|
;;;470    	{
;;;471    		pxIterator->pxNextFreeBlock = pxBlockToInsert;
00005c  6001              STR      r1,[r0,#0]
                  |L2.94|
;;;472    	}
;;;473    	else
;;;474    	{
;;;475    		mtCOVERAGE_TEST_MARKER();
;;;476    	}
;;;477    }
00005e  bd10              POP      {r4,pc}
;;;478    
                          ENDP

                  |L2.96|
                          DCD      xStart
                  |L2.100|
                          DCD      pxEnd

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;154    
;;;155    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
000004  4605              MOV      r5,r0
;;;157    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;158    void *pvReturn = NULL;
000006  f04f0800          MOV      r8,#0
;;;159    
;;;160    	vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;161    	{
;;;162    		/* If this is the first call to malloc then the heap will require
;;;163    		initialisation to setup the list of free blocks. */
;;;164    		if( pxEnd == NULL )
00000e  482b              LDR      r0,|L3.188|
000010  6800              LDR      r0,[r0,#0]  ; pxEnd
000012  b908              CBNZ     r0,|L3.24|
;;;165    		{
;;;166    			prvHeapInit();
000014  f7fffffe          BL       prvHeapInit
                  |L3.24|
;;;167    		}
;;;168    		else
;;;169    		{
;;;170    			mtCOVERAGE_TEST_MARKER();
;;;171    		}
;;;172    
;;;173    		/* Check the requested block size is not so large that the top bit is
;;;174    		set.  The top bit of the block size member of the BlockLink_t structure
;;;175    		is used to determine who owns the block - the application or the
;;;176    		kernel, so it must be free. */
;;;177    		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
000018  4829              LDR      r0,|L3.192|
00001a  6800              LDR      r0,[r0,#0]  ; xBlockAllocatedBit
00001c  4028              ANDS     r0,r0,r5
00001e  2800              CMP      r0,#0
000020  d147              BNE      |L3.178|
;;;178    		{
;;;179    			/* The wanted size is increased so it can contain a BlockLink_t
;;;180    			structure in addition to the requested amount of bytes. */
;;;181    			if( xWantedSize > 0 )
000022  b145              CBZ      r5,|L3.54|
;;;182    			{
;;;183    				xWantedSize += xHeapStructSize;
000024  3508              ADDS     r5,r5,#8
;;;184    
;;;185    				/* Ensure that blocks are always aligned to the required number
;;;186    				of bytes. */
;;;187    				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
000026  f0050007          AND      r0,r5,#7
00002a  b120              CBZ      r0,|L3.54|
;;;188    				{
;;;189    					/* Byte alignment required. */
;;;190    					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
00002c  f0050007          AND      r0,r5,#7
000030  f1c00008          RSB      r0,r0,#8
000034  4405              ADD      r5,r5,r0
                  |L3.54|
;;;191    					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
;;;192    				}
;;;193    				else
;;;194    				{
;;;195    					mtCOVERAGE_TEST_MARKER();
;;;196    				}
;;;197    			}
;;;198    			else
;;;199    			{
;;;200    				mtCOVERAGE_TEST_MARKER();
;;;201    			}
;;;202    
;;;203    			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
000036  2d00              CMP      r5,#0
000038  d03b              BEQ      |L3.178|
00003a  4822              LDR      r0,|L3.196|
00003c  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
00003e  4285              CMP      r5,r0
000040  d837              BHI      |L3.178|
;;;204    			{
;;;205    				/* Traverse the list from the start	(lowest address) block until
;;;206    				one	of adequate size is found. */
;;;207    				pxPreviousBlock = &xStart;
000042  4e21              LDR      r6,|L3.200|
;;;208    				pxBlock = xStart.pxNextFreeBlock;
000044  4630              MOV      r0,r6
000046  6804              LDR      r4,[r0,#0]  ; xStart
;;;209    				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
000048  e001              B        |L3.78|
                  |L3.74|
;;;210    				{
;;;211    					pxPreviousBlock = pxBlock;
00004a  4626              MOV      r6,r4
;;;212    					pxBlock = pxBlock->pxNextFreeBlock;
00004c  6824              LDR      r4,[r4,#0]
                  |L3.78|
00004e  6860              LDR      r0,[r4,#4]            ;209
000050  42a8              CMP      r0,r5                 ;209
000052  d202              BCS      |L3.90|
000054  6820              LDR      r0,[r4,#0]            ;209
000056  2800              CMP      r0,#0                 ;209
000058  d1f7              BNE      |L3.74|
                  |L3.90|
;;;213    				}
;;;214    
;;;215    				/* If the end marker was reached then a block of adequate size
;;;216    				was	not found. */
;;;217    				if( pxBlock != pxEnd )
00005a  4818              LDR      r0,|L3.188|
00005c  6800              LDR      r0,[r0,#0]  ; pxEnd
00005e  4284              CMP      r4,r0
000060  d027              BEQ      |L3.178|
;;;218    				{
;;;219    					/* Return the memory space pointed to - jumping over the
;;;220    					BlockLink_t structure at its start. */
;;;221    					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
000062  6830              LDR      r0,[r6,#0]
000064  f1000808          ADD      r8,r0,#8
;;;222    
;;;223    					/* This block is being returned for use so must be taken out
;;;224    					of the list of free blocks. */
;;;225    					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
000068  6820              LDR      r0,[r4,#0]
00006a  6030              STR      r0,[r6,#0]
;;;226    
;;;227    					/* If the block is larger than required it can be split into
;;;228    					two. */
;;;229    					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
00006c  6860              LDR      r0,[r4,#4]
00006e  1b40              SUBS     r0,r0,r5
000070  2810              CMP      r0,#0x10
000072  d907              BLS      |L3.132|
;;;230    					{
;;;231    						/* This block is to be split into two.  Create a new
;;;232    						block following the number of bytes requested. The void
;;;233    						cast is used to prevent byte alignment warnings from the
;;;234    						compiler. */
;;;235    						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
000074  1967              ADDS     r7,r4,r5
;;;236    						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
;;;237    
;;;238    						/* Calculate the sizes of two blocks split from the
;;;239    						single block. */
;;;240    						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
000076  6860              LDR      r0,[r4,#4]
000078  1b40              SUBS     r0,r0,r5
00007a  6078              STR      r0,[r7,#4]
;;;241    						pxBlock->xBlockSize = xWantedSize;
00007c  6065              STR      r5,[r4,#4]
;;;242    
;;;243    						/* Insert the new block into the list of free blocks. */
;;;244    						prvInsertBlockIntoFreeList( pxNewBlockLink );
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       prvInsertBlockIntoFreeList
                  |L3.132|
;;;245    					}
;;;246    					else
;;;247    					{
;;;248    						mtCOVERAGE_TEST_MARKER();
;;;249    					}
;;;250    
;;;251    					xFreeBytesRemaining -= pxBlock->xBlockSize;
000084  490f              LDR      r1,|L3.196|
000086  6860              LDR      r0,[r4,#4]
000088  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
00008a  1a08              SUBS     r0,r1,r0
00008c  490d              LDR      r1,|L3.196|
00008e  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;252    
;;;253    					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
000090  4608              MOV      r0,r1
000092  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
000094  490d              LDR      r1,|L3.204|
000096  6809              LDR      r1,[r1,#0]  ; xMinimumEverFreeBytesRemaining
000098  4288              CMP      r0,r1
00009a  d203              BCS      |L3.164|
;;;254    					{
;;;255    						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
00009c  4809              LDR      r0,|L3.196|
00009e  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
0000a0  490a              LDR      r1,|L3.204|
0000a2  6008              STR      r0,[r1,#0]  ; xMinimumEverFreeBytesRemaining
                  |L3.164|
;;;256    					}
;;;257    					else
;;;258    					{
;;;259    						mtCOVERAGE_TEST_MARKER();
;;;260    					}
;;;261    
;;;262    					/* The block is being returned - it is allocated and owned
;;;263    					by the application and has no "next" block. */
;;;264    					pxBlock->xBlockSize |= xBlockAllocatedBit;
0000a4  4906              LDR      r1,|L3.192|
0000a6  6860              LDR      r0,[r4,#4]
0000a8  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
0000aa  4308              ORRS     r0,r0,r1
0000ac  6060              STR      r0,[r4,#4]
;;;265    					pxBlock->pxNextFreeBlock = NULL;
0000ae  2000              MOVS     r0,#0
0000b0  6020              STR      r0,[r4,#0]
                  |L3.178|
;;;266    				}
;;;267    				else
;;;268    				{
;;;269    					mtCOVERAGE_TEST_MARKER();
;;;270    				}
;;;271    			}
;;;272    			else
;;;273    			{
;;;274    				mtCOVERAGE_TEST_MARKER();
;;;275    			}
;;;276    		}
;;;277    		else
;;;278    		{
;;;279    			mtCOVERAGE_TEST_MARKER();
;;;280    		}
;;;281    
;;;282    		traceMALLOC( pvReturn, xWantedSize );
;;;283    	}
;;;284    	( void ) xTaskResumeAll();
0000b2  f7fffffe          BL       xTaskResumeAll
;;;285    
;;;286    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;287    	{
;;;288    		if( pvReturn == NULL )
;;;289    		{
;;;290    			extern void vApplicationMallocFailedHook( void );
;;;291    			vApplicationMallocFailedHook();
;;;292    		}
;;;293    		else
;;;294    		{
;;;295    			mtCOVERAGE_TEST_MARKER();
;;;296    		}
;;;297    	}
;;;298    	#endif
;;;299    
;;;300    	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
;;;301    	return pvReturn;
0000b6  4640              MOV      r0,r8
;;;302    }
0000b8  e8bd81f0          POP      {r4-r8,pc}
;;;303    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.188|
                          DCD      pxEnd
                  |L3.192|
                          DCD      xBlockAllocatedBit
                  |L3.196|
                          DCD      xFreeBytesRemaining
                  |L3.200|
                          DCD      xStart
                  |L3.204|
                          DCD      xMinimumEverFreeBytesRemaining

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;304    
;;;305    void vPortFree( void *pv )
000000  b570              PUSH     {r4-r6,lr}
;;;306    {
000002  4606              MOV      r6,r0
;;;307    uint8_t *puc = ( uint8_t * ) pv;
000004  4635              MOV      r5,r6
;;;308    BlockLink_t *pxLink;
;;;309    
;;;310    	if( pv != NULL )
000006  b1d6              CBZ      r6,|L4.62|
;;;311    	{
;;;312    		/* The memory being freed will have an BlockLink_t structure immediately
;;;313    		before it. */
;;;314    		puc -= xHeapStructSize;
000008  3d08              SUBS     r5,r5,#8
;;;315    
;;;316    		/* This casting is to keep the compiler from issuing warnings. */
;;;317    		pxLink = ( void * ) puc;
00000a  462c              MOV      r4,r5
;;;318    
;;;319    		/* Check the block is actually allocated. */
;;;320    		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
;;;321    		configASSERT( pxLink->pxNextFreeBlock == NULL );
;;;322    
;;;323    		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
00000c  490c              LDR      r1,|L4.64|
00000e  6860              LDR      r0,[r4,#4]
000010  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
000012  4008              ANDS     r0,r0,r1
000014  b198              CBZ      r0,|L4.62|
;;;324    		{
;;;325    			if( pxLink->pxNextFreeBlock == NULL )
000016  6820              LDR      r0,[r4,#0]
000018  b988              CBNZ     r0,|L4.62|
;;;326    			{
;;;327    				/* The block is being returned to the heap - it is no longer
;;;328    				allocated. */
;;;329    				pxLink->xBlockSize &= ~xBlockAllocatedBit;
00001a  4909              LDR      r1,|L4.64|
00001c  6860              LDR      r0,[r4,#4]
00001e  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
000020  4388              BICS     r0,r0,r1
000022  6060              STR      r0,[r4,#4]
;;;330    
;;;331    				vTaskSuspendAll();
000024  f7fffffe          BL       vTaskSuspendAll
;;;332    				{
;;;333    					/* Add this block to the list of free blocks. */
;;;334    					xFreeBytesRemaining += pxLink->xBlockSize;
000028  4906              LDR      r1,|L4.68|
00002a  6860              LDR      r0,[r4,#4]
00002c  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
00002e  4408              ADD      r0,r0,r1
000030  4904              LDR      r1,|L4.68|
000032  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;335    					traceFREE( pv, pxLink->xBlockSize );
;;;336    					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       prvInsertBlockIntoFreeList
;;;337    				}
;;;338    				( void ) xTaskResumeAll();
00003a  f7fffffe          BL       xTaskResumeAll
                  |L4.62|
;;;339    			}
;;;340    			else
;;;341    			{
;;;342    				mtCOVERAGE_TEST_MARKER();
;;;343    			}
;;;344    		}
;;;345    		else
;;;346    		{
;;;347    			mtCOVERAGE_TEST_MARKER();
;;;348    		}
;;;349    	}
;;;350    }
00003e  bd70              POP      {r4-r6,pc}
;;;351    /*-----------------------------------------------------------*/
                          ENDP

                  |L4.64|
                          DCD      xBlockAllocatedBit
                  |L4.68|
                          DCD      xFreeBytesRemaining

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;364    
;;;365    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;366    {
;;;367    	/* This just exists to keep the linker quiet. */
;;;368    }
;;;369    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;352    
;;;353    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L6.8|
;;;354    {
;;;355    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;356    }
000004  4770              BX       lr
;;;357    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      xFreeBytesRemaining

                          AREA ||i.xPortGetMinimumEverFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetMinimumEverFreeHeapSize PROC
;;;358    
;;;359    size_t xPortGetMinimumEverFreeHeapSize( void )
000000  4801              LDR      r0,|L7.8|
;;;360    {
;;;361    	return xMinimumEverFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xMinimumEverFreeBytesRemaining
;;;362    }
000004  4770              BX       lr
;;;363    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      xMinimumEverFreeBytesRemaining

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        12288

                          AREA ||.data||, DATA, ALIGN=2

                  xStart
                          %        8
                  pxEnd
                          DCD      0x00000000
                  xFreeBytesRemaining
                          DCD      0x00000000
                  xMinimumEverFreeBytesRemaining
                          DCD      0x00000000
                  xBlockAllocatedBit
                          DCD      0x00000000
