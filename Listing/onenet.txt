; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\onenet.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\onenet.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\onenet.crf ..\..\User\onenet\src\onenet.c]
                          THUMB

                          AREA ||i.OneNET_CmdHandle||, CODE, READONLY, ALIGN=1

                  OneNET_CmdHandle PROC
;;;444    //==========================================================
;;;445    unsigned char  OneNET_CmdHandle(void)
000000  b510              PUSH     {r4,lr}
;;;446    {
;;;447    	
;;;448    	unsigned char *dataPtr = NULL;		//数据指针
000002  2400              MOVS     r4,#0
;;;449    	
;;;450    	dataPtr = M8266_GetIPD(5);		//检查是否是平台数据
000004  2005              MOVS     r0,#5
000006  f7fffffe          BL       M8266_GetIPD
00000a  4604              MOV      r4,r0
;;;451    		if(dataPtr != NULL)
00000c  b124              CBZ      r4,|L1.24|
;;;452    		{	
;;;453    				OneNet_RevPro(dataPtr);					//集中处理
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       OneNet_RevPro
;;;454    			  return 1;
000014  2001              MOVS     r0,#1
                  |L1.22|
;;;455    			
;;;456    		}
;;;457    		return 0;
;;;458    
;;;459    }
000016  bd10              POP      {r4,pc}
                  |L1.24|
000018  2000              MOVS     r0,#0                 ;457
00001a  e7fc              B        |L1.22|
;;;460    
                          ENDP


                          AREA ||i.OneNet_DevLink||, CODE, READONLY, ALIGN=2

                  OneNet_DevLink PROC
;;;70     //==========================================================
;;;71     _Bool OneNet_DevLink(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;72     {
;;;73     	
;;;74     	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};				//协议包
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
000008  9002              STR      r0,[sp,#8]
00000a  9003              STR      r0,[sp,#0xc]
;;;75     
;;;76     	unsigned char *dataPtr;
;;;77     	
;;;78     	unsigned char status = 1;
00000c  2501              MOVS     r5,#1
;;;79     	
;;;80     	UsartPrintf(USART_DEBUG, "OneNet_DevLink\r\n"
00000e  a33a              ADR      r3,|L2.248|
000010  a241              ADR      r2,|L2.280|
000012  a144              ADR      r1,|L2.292|
000014  484e              LDR      r0,|L2.336|
000016  f7fffffe          BL       UsartPrintf
;;;81                             "DEVID: %s,     APIKEY: %s\r\n"
;;;82                             , DEVID, APIKEY);
;;;83     
;;;84     	if(EDP_PacketConnect1(DEVID, APIKEY, 256, &edpPacket) == 0)		//根据devid 和 apikey封装协议包
00001a  466b              MOV      r3,sp
00001c  022a              LSLS     r2,r5,#8
00001e  a136              ADR      r1,|L2.248|
000020  a03d              ADR      r0,|L2.280|
000022  f7fffffe          BL       EDP_PacketConnect1
000026  2800              CMP      r0,#0
000028  d15b              BNE      |L2.226|
;;;85     	{
;;;86     		//ESP8266_SendData(edpPacket._data, edpPacket._len);			//上传平台
;;;87     		M8266WIFI_SPI_Send_Data(edpPacket._data, edpPacket._len,link_no,&link_status);
00002a  9a01              LDR      r2,[sp,#4]
00002c  b291              UXTH     r1,r2
00002e  4b49              LDR      r3,|L2.340|
000030  4a49              LDR      r2,|L2.344|
000032  7812              LDRB     r2,[r2,#0]  ; link_no
000034  9800              LDR      r0,[sp,#0]
000036  f7fffffe          BL       M8266WIFI_SPI_Send_Data
;;;88     	
;;;89     		dataPtr = M8266_GetIPD(250);								//等待平台响应
00003a  20fa              MOVS     r0,#0xfa
00003c  f7fffffe          BL       M8266_GetIPD
000040  4604              MOV      r4,r0
;;;90     		if(dataPtr != NULL)
000042  2c00              CMP      r4,#0
000044  d049              BEQ      |L2.218|
;;;91     		{
;;;92     			if(EDP_UnPacketRecv(dataPtr) == CONNRESP)
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       EDP_UnPacketRecv
00004c  2820              CMP      r0,#0x20
00004e  d144              BNE      |L2.218|
;;;93     			{
;;;94     				switch(EDP_UnPacketConnectRsp(dataPtr))
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       EDP_UnPacketConnectRsp
000056  280a              CMP      r0,#0xa
000058  d239              BCS      |L2.206|
00005a  e8dff000          TBB      [pc,r0]
00005e  050b              DCB      0x05,0x0b
000060  10151a1f          DCB      0x10,0x15,0x1a,0x1f
000064  24292e33          DCB      0x24,0x29,0x2e,0x33
;;;95     				{
;;;96     					case 0:UsartPrintf(USART_DEBUG, "Tips:	连接成功\r\n");status = 0;break;
000068  a13c              ADR      r1,|L2.348|
00006a  4839              LDR      r0,|L2.336|
00006c  f7fffffe          BL       UsartPrintf
000070  2500              MOVS     r5,#0
000072  e031              B        |L2.216|
;;;97     					
;;;98     					case 1:UsartPrintf(USART_DEBUG, "WARN:	连接失败：协议错误\r\n");break;
000074  a13e              ADR      r1,|L2.368|
000076  4836              LDR      r0,|L2.336|
000078  f7fffffe          BL       UsartPrintf
00007c  e02c              B        |L2.216|
;;;99     					case 2:UsartPrintf(USART_DEBUG, "WARN:	连接失败：设备ID鉴权失败\r\n");break;
00007e  a143              ADR      r1,|L2.396|
000080  4833              LDR      r0,|L2.336|
000082  f7fffffe          BL       UsartPrintf
000086  e027              B        |L2.216|
;;;100    					case 3:UsartPrintf(USART_DEBUG, "WARN:	连接失败：服务器失败\r\n");break;
000088  a149              ADR      r1,|L2.432|
00008a  4831              LDR      r0,|L2.336|
00008c  f7fffffe          BL       UsartPrintf
000090  e022              B        |L2.216|
;;;101    					case 4:UsartPrintf(USART_DEBUG, "WARN:	连接失败：用户ID鉴权失败\r\n");break;
000092  a14f              ADR      r1,|L2.464|
000094  482e              LDR      r0,|L2.336|
000096  f7fffffe          BL       UsartPrintf
00009a  e01d              B        |L2.216|
;;;102    					case 5:UsartPrintf(USART_DEBUG, "WARN:	连接失败：未授权\r\n");break;
00009c  a155              ADR      r1,|L2.500|
00009e  482c              LDR      r0,|L2.336|
0000a0  f7fffffe          BL       UsartPrintf
0000a4  e018              B        |L2.216|
;;;103    					case 6:UsartPrintf(USART_DEBUG, "WARN:	连接失败：授权码无效\r\n");break;
0000a6  a15a              ADR      r1,|L2.528|
0000a8  4829              LDR      r0,|L2.336|
0000aa  f7fffffe          BL       UsartPrintf
0000ae  e013              B        |L2.216|
;;;104    					case 7:UsartPrintf(USART_DEBUG, "WARN:	连接失败：激活码未分配\r\n");break;
0000b0  a15f              ADR      r1,|L2.560|
0000b2  4827              LDR      r0,|L2.336|
0000b4  f7fffffe          BL       UsartPrintf
0000b8  e00e              B        |L2.216|
;;;105    					case 8:UsartPrintf(USART_DEBUG, "WARN:	连接失败：该设备已被激活\r\n");break;
0000ba  a165              ADR      r1,|L2.592|
0000bc  4824              LDR      r0,|L2.336|
0000be  f7fffffe          BL       UsartPrintf
0000c2  e009              B        |L2.216|
;;;106    					case 9:UsartPrintf(USART_DEBUG, "WARN:	连接失败：重复发送连接请求包\r\n");break;
0000c4  a16b              ADR      r1,|L2.628|
0000c6  4822              LDR      r0,|L2.336|
0000c8  f7fffffe          BL       UsartPrintf
0000cc  e004              B        |L2.216|
                  |L2.206|
;;;107    					
;;;108    					default:UsartPrintf(USART_DEBUG, "ERR:	连接失败：未知错误\r\n");break;
0000ce  a173              ADR      r1,|L2.668|
0000d0  481f              LDR      r0,|L2.336|
0000d2  f7fffffe          BL       UsartPrintf
0000d6  bf00              NOP      
                  |L2.216|
0000d8  bf00              NOP                            ;96
                  |L2.218|
;;;109    				}
;;;110    			}
;;;111    		}
;;;112    		
;;;113    		EDP_DeleteBuffer(&edpPacket);								//删包
0000da  4668              MOV      r0,sp
0000dc  f7fffffe          BL       EDP_DeleteBuffer
0000e0  e003              B        |L2.234|
                  |L2.226|
;;;114    	}
;;;115    	else
;;;116    		UsartPrintf(USART_DEBUG, "WARN:	EDP_PacketConnect Failed\r\n");
0000e2  a175              ADR      r1,|L2.696|
0000e4  481a              LDR      r0,|L2.336|
0000e6  f7fffffe          BL       UsartPrintf
                  |L2.234|
;;;117    	
;;;118    	return status;
0000ea  b115              CBZ      r5,|L2.242|
0000ec  2001              MOVS     r0,#1
                  |L2.238|
;;;119    	
;;;120    }
0000ee  b004              ADD      sp,sp,#0x10
0000f0  bd70              POP      {r4-r6,pc}
                  |L2.242|
0000f2  2000              MOVS     r0,#0                 ;118
0000f4  e7fb              B        |L2.238|
;;;121    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L2.248|
0000f8  55763d65          DCB      "Uv=e=yMBymo8In9FVA4Ub16Oleo=",0
0000fc  3d794d42
000100  796d6f38
000104  496e3946
000108  56413455
00010c  6231364f
000110  6c656f3d
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L2.280|
000118  33303936          DCB      "30964714",0
00011c  34373134
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
                  |L2.292|
000124  4f6e654e          DCB      "OneNet_DevLink\r\nDEVID: %s,     APIKEY: %s\r\n",0
000128  65745f44
00012c  65764c69
000130  6e6b0d0a
000134  44455649
000138  443a2025
00013c  732c2020
000140  20202041
000144  50494b45
000148  593a2025
00014c  730d0a00
                  |L2.336|
                          DCD      0x40013800
                  |L2.340|
                          DCD      link_status
                  |L2.344|
                          DCD      link_no
                  |L2.348|
00015c  54697073          DCB      "Tips:\t",193,172,189,211,179,201,185,166,"\r\n",0
000160  3a09c1ac
000164  bdd3b3c9
000168  b9a60d0a
00016c  00      
00016d  00                DCB      0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L2.368|
000170  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,208,173
000174  3a09c1ac
000178  bdd3caa7
00017c  b0dca3ba
000180  d0ad    
000182  d2e9b4ed          DCB      210,233,180,237,206,243,"\r\n",0
000186  cef30d0a
00018a  00      
00018b  00                DCB      0
                  |L2.396|
00018c  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,201,232
000190  3a09c1ac
000194  bdd3caa7
000198  b0dca3ba
00019c  c9e8    
00019e  b1b84944          DCB      177,184,"ID",188,248,200,168,202,167,176,220,"\r\n",0
0001a2  bcf8c8a8
0001a6  caa7b0dc
0001aa  0d0a00  
0001ad  00                DCB      0
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L2.432|
0001b0  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,183,254
0001b4  3a09c1ac
0001b8  bdd3caa7
0001bc  b0dca3ba
0001c0  b7fe    
0001c2  cef1c6f7          DCB      206,241,198,247,202,167,176,220,"\r\n",0
0001c6  caa7b0dc
0001ca  0d0a00  
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L2.464|
0001d0  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,211,195
0001d4  3a09c1ac
0001d8  bdd3caa7
0001dc  b0dca3ba
0001e0  d3c3    
0001e2  bba74944          DCB      187,167,"ID",188,248,200,168,202,167,176,220,"\r\n",0
0001e6  bcf8c8a8
0001ea  caa7b0dc
0001ee  0d0a00  
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L2.500|
0001f4  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,206,180
0001f8  3a09c1ac
0001fc  bdd3caa7
000200  b0dca3ba
000204  ceb4    
000206  cadac8a8          DCB      202,218,200,168,"\r\n",0
00020a  0d0a00  
00020d  00                DCB      0
00020e  00                DCB      0
00020f  00                DCB      0
                  |L2.528|
000210  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,202,218
000214  3a09c1ac
000218  bdd3caa7
00021c  b0dca3ba
000220  cada    
000222  c8a8c2eb          DCB      200,168,194,235,206,222,208,167,"\r\n",0
000226  ceded0a7
00022a  0d0a00  
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
                  |L2.560|
000230  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,188,164
000234  3a09c1ac
000238  bdd3caa7
00023c  b0dca3ba
000240  bca4    
000242  bbeec2eb          DCB      187,238,194,235,206,180,183,214,197,228,"\r\n",0
000246  ceb4b7d6
00024a  c5e40d0a
00024e  00      
00024f  00                DCB      0
                  |L2.592|
000250  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,184,195
000254  3a09c1ac
000258  bdd3caa7
00025c  b0dca3ba
000260  b8c3    
000262  c9e8b1b8          DCB      201,232,177,184,210,209,177,187,188,164,187,238,"\r\n",0
000266  d2d1b1bb
00026a  bca4bbee
00026e  0d0a00  
000271  00                DCB      0
000272  00                DCB      0
000273  00                DCB      0
                  |L2.628|
000274  5741524e          DCB      "WARN:\t",193,172,189,211,202,167,176,220,163,186,214,216
000278  3a09c1ac
00027c  bdd3caa7
000280  b0dca3ba
000284  d6d8    
000286  b8b4b7a2          DCB      184,180,183,162,203,205,193,172,189,211,199,235,199,243,176
00028a  cbcdc1ac
00028e  bdd3c7eb
000292  c7f3b0  
000295  fc0d0a00          DCB      252,"\r\n",0
000299  00                DCB      0
00029a  00                DCB      0
00029b  00                DCB      0
                  |L2.668|
00029c  4552523a          DCB      "ERR:\t",193,172,189,211,202,167,176,220,163,186,206,180
0002a0  09c1acbd
0002a4  d3caa7b0
0002a8  dca3bace
0002ac  b4      
0002ad  d6aab4ed          DCB      214,170,180,237,206,243,"\r\n",0
0002b1  cef30d0a
0002b5  00      
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L2.696|
0002b8  5741524e          DCB      "WARN:\tEDP_PacketConnect Failed\r\n",0
0002bc  3a094544
0002c0  505f5061
0002c4  636b6574
0002c8  436f6e6e
0002cc  65637420
0002d0  4661696c
0002d4  65640d0a
0002d8  00      
0002d9  00                DCB      0
0002da  00                DCB      0
0002db  00                DCB      0

                          AREA ||i.OneNet_FillBuf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  OneNet_FillBuf PROC
;;;121    
;;;122    unsigned char OneNet_FillBuf(char *buf,data_Stream *data_stream)
000000  b57f              PUSH     {r0-r6,lr}
;;;123    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;124    	char text[16];
;;;125    	memset(text, 0, sizeof(text));
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
00000c  9002              STR      r0,[sp,#8]
00000e  9003              STR      r0,[sp,#0xc]
;;;126    	strcpy(buf, "{");
000010  a037              ADR      r0,|L3.240|
000012  8800              LDRH     r0,[r0,#0]
000014  8028              STRH     r0,[r5,#0]
;;;127    	memset(text, 0, sizeof(text));
000016  2000              MOVS     r0,#0
000018  9000              STR      r0,[sp,#0]
00001a  9001              STR      r0,[sp,#4]
00001c  9002              STR      r0,[sp,#8]
00001e  9003              STR      r0,[sp,#0xc]
;;;128    	sprintf(text,  "\"Fire\":%d,",data_stream->fire);
000020  7922              LDRB     r2,[r4,#4]
000022  a134              ADR      r1,|L3.244|
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       __2sprintf
;;;129    	strcat(buf, text);
00002a  4669              MOV      r1,sp
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       strcat
;;;130    	memset(text, 0, sizeof(text));
000032  2000              MOVS     r0,#0
000034  9000              STR      r0,[sp,#0]
000036  9001              STR      r0,[sp,#4]
000038  9002              STR      r0,[sp,#8]
00003a  9003              STR      r0,[sp,#0xc]
;;;131    	sprintf(text,  "\"Temperature\":%d,",data_stream->temp);
00003c  78a2              LDRB     r2,[r4,#2]
00003e  a130              ADR      r1,|L3.256|
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       __2sprintf
;;;132    	strcat(buf, text);
000046  4669              MOV      r1,sp
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       strcat
;;;133    	memset(text, 0, sizeof(text));
00004e  2000              MOVS     r0,#0
000050  9000              STR      r0,[sp,#0]
000052  9001              STR      r0,[sp,#4]
000054  9002              STR      r0,[sp,#8]
000056  9003              STR      r0,[sp,#0xc]
;;;134    	sprintf(text,  "\"Humidity\":%d,",data_stream->humidit);
000058  78e2              LDRB     r2,[r4,#3]
00005a  a12e              ADR      r1,|L3.276|
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       __2sprintf
;;;135    	strcat(buf, text);
000062  4669              MOV      r1,sp
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       strcat
;;;136    	memset(text, 0, sizeof(text));
00006a  2000              MOVS     r0,#0
00006c  9000              STR      r0,[sp,#0]
00006e  9001              STR      r0,[sp,#4]
000070  9002              STR      r0,[sp,#8]
000072  9003              STR      r0,[sp,#0xc]
;;;137    	sprintf(text,  "\"Temp_Max\":%d,",data_stream->tem_max);
000074  7962              LDRB     r2,[r4,#5]
000076  a12b              ADR      r1,|L3.292|
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       __2sprintf
;;;138    	strcat(buf, text);
00007e  4669              MOV      r1,sp
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       strcat
;;;139    	memset(text, 0, sizeof(text));
000086  2000              MOVS     r0,#0
000088  9000              STR      r0,[sp,#0]
00008a  9001              STR      r0,[sp,#4]
00008c  9002              STR      r0,[sp,#8]
00008e  9003              STR      r0,[sp,#0xc]
;;;140    	sprintf(text,  "\"Temp_Min\":%d,",data_stream->tem_min);
000090  79a2              LDRB     r2,[r4,#6]
000092  a128              ADR      r1,|L3.308|
000094  4668              MOV      r0,sp
000096  f7fffffe          BL       __2sprintf
;;;141    	strcat(buf, text);
00009a  4669              MOV      r1,sp
00009c  4628              MOV      r0,r5
00009e  f7fffffe          BL       strcat
;;;142    	memset(text, 0, sizeof(text));
0000a2  2000              MOVS     r0,#0
0000a4  9000              STR      r0,[sp,#0]
0000a6  9001              STR      r0,[sp,#4]
0000a8  9002              STR      r0,[sp,#8]
0000aa  9003              STR      r0,[sp,#0xc]
;;;143    	sprintf(text,  "\"Hum_Max\":%d,",data_stream->hum_max);///////注意逗号
0000ac  79e2              LDRB     r2,[r4,#7]
0000ae  a125              ADR      r1,|L3.324|
0000b0  4668              MOV      r0,sp
0000b2  f7fffffe          BL       __2sprintf
;;;144    	strcat(buf, text);
0000b6  4669              MOV      r1,sp
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       strcat
;;;145    	memset(text, 0, sizeof(text));
0000be  2000              MOVS     r0,#0
0000c0  9000              STR      r0,[sp,#0]
0000c2  9001              STR      r0,[sp,#4]
0000c4  9002              STR      r0,[sp,#8]
0000c6  9003              STR      r0,[sp,#0xc]
;;;146    	sprintf(text,  "\"Hum_Min\":%d",data_stream->hum_min);
0000c8  7a22              LDRB     r2,[r4,#8]
0000ca  a122              ADR      r1,|L3.340|
0000cc  4668              MOV      r0,sp
0000ce  f7fffffe          BL       __2sprintf
;;;147    	strcat(buf, text);
0000d2  4669              MOV      r1,sp
0000d4  4628              MOV      r0,r5
0000d6  f7fffffe          BL       strcat
;;;148    	strcat(buf, "}");	
0000da  a122              ADR      r1,|L3.356|
0000dc  4628              MOV      r0,r5
0000de  f7fffffe          BL       strcat
;;;149    	return strlen(buf);
0000e2  4628              MOV      r0,r5
0000e4  f7fffffe          BL       strlen
0000e8  b2c0              UXTB     r0,r0
;;;150    }
0000ea  b004              ADD      sp,sp,#0x10
0000ec  bd70              POP      {r4-r6,pc}
;;;151    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
0000f0  7b00              DCB      "{",0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L3.244|
0000f4  22466972          DCB      """Fire"":%d,",0
0000f8  65223a25
0000fc  642c00  
0000ff  00                DCB      0
                  |L3.256|
000100  2254656d          DCB      """Temperature"":%d,",0
000104  70657261
000108  74757265
00010c  223a2564
000110  2c00    
000112  00                DCB      0
000113  00                DCB      0
                  |L3.276|
000114  2248756d          DCB      """Humidity"":%d,",0
000118  69646974
00011c  79223a25
000120  642c00  
000123  00                DCB      0
                  |L3.292|
000124  2254656d          DCB      """Temp_Max"":%d,",0
000128  705f4d61
00012c  78223a25
000130  642c00  
000133  00                DCB      0
                  |L3.308|
000134  2254656d          DCB      """Temp_Min"":%d,",0
000138  705f4d69
00013c  6e223a25
000140  642c00  
000143  00                DCB      0
                  |L3.324|
000144  2248756d          DCB      """Hum_Max"":%d,",0
000148  5f4d6178
00014c  223a2564
000150  2c00    
000152  00                DCB      0
000153  00                DCB      0
                  |L3.340|
000154  2248756d          DCB      """Hum_Min"":%d",0
000158  5f4d696e
00015c  223a2564
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L3.356|
000164  7d00              DCB      "}",0
000166  00                DCB      0
000167  00                DCB      0

                          AREA ||i.OneNet_RevPro||, CODE, READONLY, ALIGN=2

                  OneNet_RevPro PROC
;;;207    
;;;208    void OneNet_RevPro(unsigned char *cmd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000004  b08c              SUB      sp,sp,#0x30
000006  4607              MOV      r7,r0
;;;210    	
;;;211    	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};	//协议包
000008  2000              MOVS     r0,#0
00000a  9008              STR      r0,[sp,#0x20]
00000c  9009              STR      r0,[sp,#0x24]
00000e  900a              STR      r0,[sp,#0x28]
000010  900b              STR      r0,[sp,#0x2c]
;;;212    	
;;;213    	char *cmdid_devid = NULL;
000012  9007              STR      r0,[sp,#0x1c]
;;;214    	unsigned short cmdid_len = 0;
000014  9006              STR      r0,[sp,#0x18]
;;;215    	char *req = NULL;
000016  9005              STR      r0,[sp,#0x14]
;;;216    	unsigned int req_len = 0;
000018  9004              STR      r0,[sp,#0x10]
;;;217    	unsigned char type = 0;
00001a  4680              MOV      r8,r0
;;;218    	
;;;219    	short result = 0;
00001c  2600              MOVS     r6,#0
;;;220    
;;;221    	char *dataPtr = NULL;
00001e  2500              MOVS     r5,#0
;;;222    	char numBuf[10];
;;;223    	int num = 0;
000020  2400              MOVS     r4,#0
;;;224    	heart_flag=Heart_err;//先初始化未丢失
000022  4978              LDR      r1,|L4.516|
000024  7008              STRB     r0,[r1,#0]
;;;225    	hexdump(edpPacket._data,edpPacket._len);//打印收到的信息
000026  e9dd0108          LDRD     r0,r1,[sp,#0x20]
00002a  f7fffffe          BL       hexdump
;;;226    	type = EDP_UnPacketRecv(cmd);
00002e  4638              MOV      r0,r7
000030  f7fffffe          BL       EDP_UnPacketRecv
000034  4680              MOV      r8,r0
;;;227    	switch(type)										//判断是pushdata还是命令下发
000036  f1b80f30          CMP      r8,#0x30
00003a  d009              BEQ      |L4.80|
00003c  f1b80f90          CMP      r8,#0x90
000040  d033              BEQ      |L4.170|
000042  f1b80fa0          CMP      r8,#0xa0
000046  d014              BEQ      |L4.114|
000048  f1b80fd0          CMP      r8,#0xd0
00004c  d13f              BNE      |L4.206|
00004e  e037              B        |L4.192|
                  |L4.80|
;;;228    	{
;;;229    			case PUSHDATA:									//解pushdata包
;;;230    			
;;;231    			result = EDP_UnPacketPushData(cmd, &cmdid_devid, &req, &req_len);
000050  ab04              ADD      r3,sp,#0x10
000052  aa05              ADD      r2,sp,#0x14
000054  a907              ADD      r1,sp,#0x1c
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       EDP_UnPacketPushData
00005c  4606              MOV      r6,r0
;;;232    		
;;;233    			if(result == 0)
00005e  b93e              CBNZ     r6,|L4.112|
;;;234    				UsartPrintf(USART_DEBUG, "src_devid: %s, req: %s, req_len: %d\r\n", cmdid_devid, req, req_len);
000060  9804              LDR      r0,[sp,#0x10]
000062  9000              STR      r0,[sp,#0]
000064  a168              ADR      r1,|L4.520|
000066  4872              LDR      r0,|L4.560|
000068  9b05              LDR      r3,[sp,#0x14]
00006a  9a07              LDR      r2,[sp,#0x1c]
00006c  f7fffffe          BL       UsartPrintf
                  |L4.112|
;;;235    			
;;;236    		break;
000070  e030              B        |L4.212|
                  |L4.114|
;;;237    		case CMDREQ:									//解命令包
;;;238    			
;;;239    			result = EDP_UnPacketCmd(cmd, &cmdid_devid, &cmdid_len, &req, &req_len);
000072  a804              ADD      r0,sp,#0x10
000074  ab05              ADD      r3,sp,#0x14
000076  aa06              ADD      r2,sp,#0x18
000078  a907              ADD      r1,sp,#0x1c
00007a  9000              STR      r0,[sp,#0]
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       EDP_UnPacketCmd
000082  4606              MOV      r6,r0
;;;240    			
;;;241    			if(result == 0)								//解包成功，则进行命令回复的组包
000084  b986              CBNZ     r6,|L4.168|
;;;242    			{
;;;243    				EDP_PacketCmdResp(cmdid_devid, cmdid_len, req, req_len, &edpPacket);
000086  a808              ADD      r0,sp,#0x20
000088  9000              STR      r0,[sp,#0]
00008a  f8bd1018          LDRH     r1,[sp,#0x18]
00008e  e9dd3204          LDRD     r3,r2,[sp,#0x10]
000092  9807              LDR      r0,[sp,#0x1c]
000094  f7fffffe          BL       EDP_PacketCmdResp
;;;244    				UsartPrintf(USART_DEBUG, "cmdid: %s, req: %s, req_len: %d\r\n", cmdid_devid, req, req_len);
000098  9804              LDR      r0,[sp,#0x10]
00009a  9000              STR      r0,[sp,#0]
00009c  a165              ADR      r1,|L4.564|
00009e  4864              LDR      r0,|L4.560|
0000a0  9b05              LDR      r3,[sp,#0x14]
0000a2  9a07              LDR      r2,[sp,#0x1c]
0000a4  f7fffffe          BL       UsartPrintf
                  |L4.168|
;;;245    			}
;;;246    			
;;;247    		break;
0000a8  e014              B        |L4.212|
                  |L4.170|
;;;248    			
;;;249    		case SAVEACK:
;;;250    			
;;;251    			if(cmd[3] == MSG_ID_HIGH && cmd[4] == MSG_ID_LOW)
0000aa  78f8              LDRB     r0,[r7,#3]
0000ac  2855              CMP      r0,#0x55
0000ae  d102              BNE      |L4.182|
0000b0  7938              LDRB     r0,[r7,#4]
0000b2  28aa              CMP      r0,#0xaa
0000b4  d003              BEQ      |L4.190|
                  |L4.182|
;;;252    			{
;;;253    				//UsartPrintf(USART_DEBUG, "Tips:	Send %s\r\n", cmd[5] ? "Err" : "Ok");
;;;254    			}
;;;255    			else
;;;256    				UsartPrintf(USART_DEBUG, "Tips:	Message ID Err\r\n");
0000b6  a168              ADR      r1,|L4.600|
0000b8  485d              LDR      r0,|L4.560|
0000ba  f7fffffe          BL       UsartPrintf
                  |L4.190|
;;;257    			
;;;258    		break;
0000be  e009              B        |L4.212|
                  |L4.192|
;;;259    		case PINGRESP:
;;;260    			printf("心跳回应");
0000c0  a06b              ADR      r0,|L4.624|
0000c2  f7fffffe          BL       __2printf
;;;261    			heart_flag=Heart_OK;
0000c6  2001              MOVS     r0,#1
0000c8  494e              LDR      r1,|L4.516|
0000ca  7008              STRB     r0,[r1,#0]
;;;262    		break;
0000cc  e002              B        |L4.212|
                  |L4.206|
;;;263    				
;;;264    			
;;;265    		default:
;;;266    			result = -1;
0000ce  f04f36ff          MOV      r6,#0xffffffff
;;;267    		break;
0000d2  bf00              NOP      
                  |L4.212|
0000d4  bf00              NOP                            ;236
;;;268    	}
;;;269    	
;;;270    		//M8266_Clear();
;;;271    			
;;;272    	
;;;273    	if(result == -1)
0000d6  1c70              ADDS     r0,r6,#1
0000d8  b910              CBNZ     r0,|L4.224|
                  |L4.218|
;;;274    		return;
;;;275    	
;;;276    	dataPtr = strchr(req, ':');							//搜索':'
;;;277    	
;;;278    	if(dataPtr != NULL)									//如果找到了
;;;279    	{
;;;280    		dataPtr++;
;;;281    		
;;;282    		while(*dataPtr >= '0' && *dataPtr <= '9')		//判断是否是下发的命令控制数据
;;;283    		{
;;;284    			numBuf[num++] = *dataPtr++;
;;;285    		}
;;;286    		
;;;287    		num = atoi((const char *)numBuf);				//转为数值形式
;;;288    		if(strstr((char *)req, "photo"))				//搜索"Fire"
;;;289    		{
;;;290    			
;;;291    			if(num == 1)       photo=1;
;;;292    			else             	 photo=0;	
;;;293    	
;;;294    		}
;;;295    				else if(strstr((char *)req, "time"))				//搜索"Fire"
;;;296    				{
;;;297    					time_count=num;   //赋值
;;;298    
;;;299    				}
;;;300    					else if(strstr((char *)req, "Hum_Max"))				//搜索"Fire"
;;;301    				{
;;;302    					humi_max=num;   //赋值
;;;303    
;;;304    				}
;;;305    					else if(strstr((char *)req, "Hum_Min"))				//搜索"Fire"
;;;306    				{
;;;307    					humi_min=num;   //赋值
;;;308    
;;;309    				}
;;;310    						else if(strstr((char *)req, "Temp_Max"))				//搜索"Fire"
;;;311    				{
;;;312    					temp_max=num;   //赋值
;;;313    
;;;314    				}
;;;315    						else if(strstr((char *)req, "Temp_Min"))				//搜索"Fire"
;;;316    				{
;;;317    					temp_min=num;   //赋值
;;;318    
;;;319    				}
;;;320    				else if(strstr((char *)req, "door"))
;;;321    				{
;;;322    					if(num == 1)       
;;;323    					{Door_OPEN;
;;;324    					 mDelay(3000);
;;;325    					Door_ClOSE;
;;;326    					}
;;;327    			    else             	 Door_ClOSE;	
;;;328    					
;;;329    				}
;;;330    				else if(strstr((char *)req, "Door"))
;;;331    				{
;;;332    					if(num == 1)       
;;;333    					{
;;;334    					photo=1;
;;;335    					printf("有人开门\r\n");
;;;336    
;;;337    					}
;;;338    				}
;;;339    	}
;;;340    	
;;;341    	if(type == CMDREQ && result == 0)						//如果是命令包 且 解包成功
;;;342    	{
;;;343    		EDP_FreeBuffer(cmdid_devid);						//释放内存
;;;344    		EDP_FreeBuffer(req);												//回复命令
;;;345    		M8266WIFI_SPI_Send_Data(edpPacket._data, edpPacket._len,link_no,&link_status);	//上传平台
;;;346    		EDP_DeleteBuffer(&edpPacket);						//删包
;;;347    	}
;;;348    
;;;349    }
0000da  b00c              ADD      sp,sp,#0x30
0000dc  e8bd81f0          POP      {r4-r8,pc}
                  |L4.224|
0000e0  213a              MOVS     r1,#0x3a              ;276
0000e2  9805              LDR      r0,[sp,#0x14]         ;276
0000e4  f7fffffe          BL       strchr
0000e8  4605              MOV      r5,r0                 ;276
0000ea  2d00              CMP      r5,#0                 ;278
0000ec  d073              BEQ      |L4.470|
0000ee  1c6d              ADDS     r5,r5,#1              ;280
0000f0  e005              B        |L4.254|
                  |L4.242|
0000f2  f8152b01          LDRB     r2,[r5],#1            ;284
0000f6  4620              MOV      r0,r4                 ;284
0000f8  1c64              ADDS     r4,r4,#1              ;284
0000fa  a901              ADD      r1,sp,#4              ;284
0000fc  540a              STRB     r2,[r1,r0]            ;284
                  |L4.254|
0000fe  7828              LDRB     r0,[r5,#0]            ;282
000100  2830              CMP      r0,#0x30              ;282
000102  db02              BLT      |L4.266|
000104  7828              LDRB     r0,[r5,#0]            ;282
000106  2839              CMP      r0,#0x39              ;282
000108  ddf3              BLE      |L4.242|
                  |L4.266|
00010a  a801              ADD      r0,sp,#4              ;287
00010c  f7fffffe          BL       atoi
000110  4604              MOV      r4,r0                 ;287
000112  a15a              ADR      r1,|L4.636|
000114  9805              LDR      r0,[sp,#0x14]         ;288
000116  f7fffffe          BL       strstr
00011a  b148              CBZ      r0,|L4.304|
00011c  2c01              CMP      r4,#1                 ;291
00011e  d103              BNE      |L4.296|
000120  2001              MOVS     r0,#1                 ;291
000122  4958              LDR      r1,|L4.644|
000124  7008              STRB     r0,[r1,#0]            ;291
000126  e056              B        |L4.470|
                  |L4.296|
000128  2000              MOVS     r0,#0                 ;292
00012a  4956              LDR      r1,|L4.644|
00012c  7008              STRB     r0,[r1,#0]            ;292
00012e  e052              B        |L4.470|
                  |L4.304|
000130  a155              ADR      r1,|L4.648|
000132  9805              LDR      r0,[sp,#0x14]         ;295
000134  f7fffffe          BL       strstr
000138  b110              CBZ      r0,|L4.320|
00013a  4955              LDR      r1,|L4.656|
00013c  800c              STRH     r4,[r1,#0]            ;297
00013e  e04a              B        |L4.470|
                  |L4.320|
000140  a154              ADR      r1,|L4.660|
000142  9805              LDR      r0,[sp,#0x14]         ;300
000144  f7fffffe          BL       strstr
000148  b110              CBZ      r0,|L4.336|
00014a  4954              LDR      r1,|L4.668|
00014c  700c              STRB     r4,[r1,#0]            ;302
00014e  e042              B        |L4.470|
                  |L4.336|
000150  a153              ADR      r1,|L4.672|
000152  9805              LDR      r0,[sp,#0x14]         ;305
000154  f7fffffe          BL       strstr
000158  b110              CBZ      r0,|L4.352|
00015a  4953              LDR      r1,|L4.680|
00015c  700c              STRB     r4,[r1,#0]            ;307
00015e  e03a              B        |L4.470|
                  |L4.352|
000160  a152              ADR      r1,|L4.684|
000162  9805              LDR      r0,[sp,#0x14]         ;310
000164  f7fffffe          BL       strstr
000168  b118              CBZ      r0,|L4.370|
00016a  b220              SXTH     r0,r4                 ;312
00016c  4952              LDR      r1,|L4.696|
00016e  8008              STRH     r0,[r1,#0]            ;312
000170  e031              B        |L4.470|
                  |L4.370|
000172  a152              ADR      r1,|L4.700|
000174  9805              LDR      r0,[sp,#0x14]         ;315
000176  f7fffffe          BL       strstr
00017a  b118              CBZ      r0,|L4.388|
00017c  b220              SXTH     r0,r4                 ;317
00017e  4952              LDR      r1,|L4.712|
000180  8008              STRH     r0,[r1,#0]            ;317
000182  e028              B        |L4.470|
                  |L4.388|
000184  a151              ADR      r1,|L4.716|
000186  9805              LDR      r0,[sp,#0x14]         ;320
000188  f7fffffe          BL       strstr
00018c  b1b0              CBZ      r0,|L4.444|
00018e  2c01              CMP      r4,#1                 ;322
000190  d10e              BNE      |L4.432|
000192  2200              MOVS     r2,#0                 ;323
000194  0321              LSLS     r1,r4,#12             ;323
000196  484f              LDR      r0,|L4.724|
000198  f7fffffe          BL       GPIO_WriteBit
00019c  f64030b8          MOV      r0,#0xbb8             ;324
0001a0  f7fffffe          BL       mDelay
0001a4  2201              MOVS     r2,#1                 ;325
0001a6  0311              LSLS     r1,r2,#12             ;325
0001a8  484a              LDR      r0,|L4.724|
0001aa  f7fffffe          BL       GPIO_WriteBit
0001ae  e012              B        |L4.470|
                  |L4.432|
0001b0  2201              MOVS     r2,#1                 ;327
0001b2  0311              LSLS     r1,r2,#12             ;327
0001b4  4847              LDR      r0,|L4.724|
0001b6  f7fffffe          BL       GPIO_WriteBit
0001ba  e00c              B        |L4.470|
                  |L4.444|
0001bc  a146              ADR      r1,|L4.728|
0001be  9805              LDR      r0,[sp,#0x14]         ;330
0001c0  f7fffffe          BL       strstr
0001c4  b138              CBZ      r0,|L4.470|
0001c6  2c01              CMP      r4,#1                 ;332
0001c8  d105              BNE      |L4.470|
0001ca  2001              MOVS     r0,#1                 ;334
0001cc  492d              LDR      r1,|L4.644|
0001ce  7008              STRB     r0,[r1,#0]            ;334
0001d0  a043              ADR      r0,|L4.736|
0001d2  f7fffffe          BL       __2printf
                  |L4.470|
0001d6  f1b80fa0          CMP      r8,#0xa0              ;341
0001da  d111              BNE      |L4.512|
0001dc  b986              CBNZ     r6,|L4.512|
0001de  9807              LDR      r0,[sp,#0x1c]         ;343
0001e0  f7fffffe          BL       free
0001e4  9805              LDR      r0,[sp,#0x14]         ;344
0001e6  f7fffffe          BL       free
0001ea  9a09              LDR      r2,[sp,#0x24]         ;345
0001ec  b291              UXTH     r1,r2                 ;345
0001ee  4b3f              LDR      r3,|L4.748|
0001f0  4a3f              LDR      r2,|L4.752|
0001f2  7812              LDRB     r2,[r2,#0]            ;345  ; link_no
0001f4  9808              LDR      r0,[sp,#0x20]         ;345
0001f6  f7fffffe          BL       M8266WIFI_SPI_Send_Data
0001fa  a808              ADD      r0,sp,#0x20           ;346
0001fc  f7fffffe          BL       EDP_DeleteBuffer
                  |L4.512|
000200  bf00              NOP      
000202  e76a              B        |L4.218|
;;;350    
                          ENDP

                  |L4.516|
                          DCD      heart_flag
                  |L4.520|
000208  7372635f          DCB      "src_devid: %s, req: %s, req_len: %d\r\n",0
00020c  64657669
000210  643a2025
000214  732c2072
000218  65713a20
00021c  25732c20
000220  7265715f
000224  6c656e3a
000228  2025640d
00022c  0a00    
00022e  00                DCB      0
00022f  00                DCB      0
                  |L4.560|
                          DCD      0x40013800
                  |L4.564|
000234  636d6469          DCB      "cmdid: %s, req: %s, req_len: %d\r\n",0
000238  643a2025
00023c  732c2072
000240  65713a20
000244  25732c20
000248  7265715f
00024c  6c656e3a
000250  2025640d
000254  0a00    
000256  00                DCB      0
000257  00                DCB      0
                  |L4.600|
000258  54697073          DCB      "Tips:\tMessage ID Err\r\n",0
00025c  3a094d65
000260  73736167
000264  65204944
000268  20457272
00026c  0d0a00  
00026f  00                DCB      0
                  |L4.624|
000270  d0c4ccf8          DCB      208,196,204,248,187,216,211,166,0
000274  bbd8d3a6
000278  00      
000279  00                DCB      0
00027a  00                DCB      0
00027b  00                DCB      0
                  |L4.636|
00027c  70686f74          DCB      "photo",0
000280  6f00    
000282  00                DCB      0
000283  00                DCB      0
                  |L4.644|
                          DCD      photo
                  |L4.648|
000288  74696d65          DCB      "time",0
00028c  00      
00028d  00                DCB      0
00028e  00                DCB      0
00028f  00                DCB      0
                  |L4.656|
                          DCD      time_count
                  |L4.660|
000294  48756d5f          DCB      "Hum_Max",0
000298  4d617800
                  |L4.668|
                          DCD      humi_max
                  |L4.672|
0002a0  48756d5f          DCB      "Hum_Min",0
0002a4  4d696e00
                  |L4.680|
                          DCD      humi_min
                  |L4.684|
0002ac  54656d70          DCB      "Temp_Max",0
0002b0  5f4d6178
0002b4  00      
0002b5  00                DCB      0
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L4.696|
                          DCD      temp_max
                  |L4.700|
0002bc  54656d70          DCB      "Temp_Min",0
0002c0  5f4d696e
0002c4  00      
0002c5  00                DCB      0
0002c6  00                DCB      0
0002c7  00                DCB      0
                  |L4.712|
                          DCD      temp_min
                  |L4.716|
0002cc  646f6f72          DCB      "door",0
0002d0  00      
0002d1  00                DCB      0
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L4.724|
                          DCD      0x40010800
                  |L4.728|
0002d8  446f6f72          DCB      "Door",0
0002dc  00      
0002dd  00                DCB      0
0002de  00                DCB      0
0002df  00                DCB      0
                  |L4.736|
0002e0  d3d0c8cb          DCB      211,208,200,203,191,170,195,197,"\r\n",0
0002e4  bfaac3c5
0002e8  0d0a00  
0002eb  00                DCB      0
                  |L4.748|
                          DCD      link_status
                  |L4.752|
                          DCD      link_no

                          AREA ||i.OneNet_SendData||, CODE, READONLY, ALIGN=2

                  OneNet_SendData PROC
;;;162    //==========================================================
;;;163    void OneNet_SendData(volatile data_Stream *data_stream)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  b0a6              SUB      sp,sp,#0x98
000004  4606              MOV      r6,r0
;;;165    	
;;;166    	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};												//协议包
000006  2000              MOVS     r0,#0
000008  9022              STR      r0,[sp,#0x88]
00000a  9023              STR      r0,[sp,#0x8c]
00000c  9024              STR      r0,[sp,#0x90]
00000e  9025              STR      r0,[sp,#0x94]
;;;167    	
;;;168    	char buf[128];
;;;169    	
;;;170    	short int body_len = 0, i = 0;
000010  2400              MOVS     r4,#0
000012  2500              MOVS     r5,#0
;;;171    		
;;;172    	memset(buf, 0, sizeof(buf));
000014  2180              MOVS     r1,#0x80
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       __aeabi_memclr4
;;;173    	
;;;174    	body_len = OneNet_FillBuf(buf,data_stream);		//获取当前需要发送的数据流的总长度
00001c  4631              MOV      r1,r6
00001e  a802              ADD      r0,sp,#8
000020  f7fffffe          BL       OneNet_FillBuf
000024  4604              MOV      r4,r0
;;;175    	
;;;176    	if(body_len)
000026  2c00              CMP      r4,#0
000028  d024              BEQ      |L5.116|
;;;177    	{
;;;178    		if(EDP_PacketSaveData(DEVID, body_len, NULL, kTypeSimpleJsonWithoutTime, &edpPacket) == 0)	//封包
00002a  a822              ADD      r0,sp,#0x88
00002c  2303              MOVS     r3,#3
00002e  2200              MOVS     r2,#0
000030  4621              MOV      r1,r4
000032  9000              STR      r0,[sp,#0]
000034  a010              ADR      r0,|L5.120|
000036  f7fffffe          BL       EDP_PacketSaveData
00003a  b9b8              CBNZ     r0,|L5.108|
;;;179    		{
;;;180    			for(; i < body_len; i++)
00003c  e008              B        |L5.80|
                  |L5.62|
;;;181    				edpPacket._data[edpPacket._len++] = buf[i];
00003e  a802              ADD      r0,sp,#8
000040  5d41              LDRB     r1,[r0,r5]
000042  9a23              LDR      r2,[sp,#0x8c]
000044  1c50              ADDS     r0,r2,#1
000046  9023              STR      r0,[sp,#0x8c]
000048  9822              LDR      r0,[sp,#0x88]
00004a  5481              STRB     r1,[r0,r2]
00004c  1c68              ADDS     r0,r5,#1              ;180
00004e  b205              SXTH     r5,r0                 ;180
                  |L5.80|
000050  42a5              CMP      r5,r4                 ;180
000052  dbf4              BLT      |L5.62|
;;;182    			
;;;183    		M8266WIFI_SPI_Send_Data(edpPacket._data, edpPacket._len,link_no,&link_status);
000054  9a23              LDR      r2,[sp,#0x8c]
000056  b291              UXTH     r1,r2
000058  4b0a              LDR      r3,|L5.132|
00005a  4a0b              LDR      r2,|L5.136|
00005c  7812              LDRB     r2,[r2,#0]  ; link_no
00005e  9822              LDR      r0,[sp,#0x88]
000060  f7fffffe          BL       M8266WIFI_SPI_Send_Data
;;;184    										//上传数据到平台
;;;185    			EDP_DeleteBuffer(&edpPacket);
000064  a822              ADD      r0,sp,#0x88
000066  f7fffffe          BL       EDP_DeleteBuffer
00006a  e003              B        |L5.116|
                  |L5.108|
;;;186    		}
;;;187    		else
;;;188    			UsartPrintf(USART_DEBUG, "WARN:	EDP_NewBuffer Failed\r\n");
00006c  a107              ADR      r1,|L5.140|
00006e  480f              LDR      r0,|L5.172|
000070  f7fffffe          BL       UsartPrintf
                  |L5.116|
;;;189    	}
;;;190    	//ESP8266_Clear();
;;;191    	
;;;192    }
000074  b026              ADD      sp,sp,#0x98
000076  bd70              POP      {r4-r6,pc}
;;;193    
                          ENDP

                  |L5.120|
000078  33303936          DCB      "30964714",0
00007c  34373134
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L5.132|
                          DCD      link_status
                  |L5.136|
                          DCD      link_no
                  |L5.140|
00008c  5741524e          DCB      "WARN:\tEDP_NewBuffer Failed\r\n",0
000090  3a094544
000094  505f4e65
000098  77427566
00009c  66657220
0000a0  4661696c
0000a4  65640d0a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L5.172|
                          DCD      0x40013800

                          AREA ||i.OneNet_SendData_Picture||, CODE, READONLY, ALIGN=2

                  OneNet_SendData_Picture PROC
;;;371    #define PKT_SIZE 1000
;;;372    void OneNet_SendData_Picture(char *devid,  char * pic_name)
000000  b5f0              PUSH     {r4-r7,lr}
;;;373    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;374    	
;;;375    	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};					//协议包
000008  2000              MOVS     r0,#0
00000a  9007              STR      r0,[sp,#0x1c]
00000c  9008              STR      r0,[sp,#0x20]
00000e  9009              STR      r0,[sp,#0x24]
000010  900a              STR      r0,[sp,#0x28]
;;;376    	
;;;377    	char type_bin_head[] = "{\"ds_id\":\"ppp\"}";						//图片数据头
000012  a339              ADR      r3,|L6.248|
000014  cb0f              LDM      r3,{r0-r3}
000016  ac03              ADD      r4,sp,#0xc
000018  c40f              STM      r4!,{r0-r3}
;;;378    	unsigned int read_num;	u16 pic_len;
;;;379    	u16 ucAlign;
;;;380    
;;;381    	bmpres = f_open( &bmpfsrc , (char *)pic_name, FA_OPEN_EXISTING | FA_READ);	
00001a  2201              MOVS     r2,#1
00001c  4639              MOV      r1,r7
00001e  483a              LDR      r0,|L6.264|
000020  f7fffffe          BL       f_open
000024  4939              LDR      r1,|L6.268|
000026  7008              STRB     r0,[r1,#0]
;;;382    /*-------------------------------------------------------------------------------------------------------*/
;;;383    	if(bmpres == FR_OK)
000028  4608              MOV      r0,r1
00002a  7800              LDRB     r0,[r0,#0]  ; bmpres
00002c  2800              CMP      r0,#0
00002e  d160              BNE      |L6.242|
;;;384    	{
;;;385    		printf("打开文件成功\r\n");
000030  a037              ADR      r0,|L6.272|
000032  f7fffffe          BL       __2printf
;;;386    
;;;387    		/* 读取文件头信息  两个字节*/  
;;;388    		pic_len=bmpfsrc.fsize;
000036  4834              LDR      r0,|L6.264|
000038  8980              LDRH     r0,[r0,#0xc]  ; bmpfsrc
00003a  b284              UXTH     r4,r0
;;;389    		ucAlign=pic_len%PKT_SIZE;
00003c  f44f707a          MOV      r0,#0x3e8
000040  fb94f1f0          SDIV     r1,r4,r0
000044  fb004011          MLS      r0,r0,r1,r4
000048  b285              UXTH     r5,r0
;;;390    	
;;;391    	if(EDP_PacketSaveData(devid, pic_len, type_bin_head, kTypeBin, &edpPacket) == 0)
00004a  a807              ADD      r0,sp,#0x1c
00004c  2302              MOVS     r3,#2
00004e  aa03              ADD      r2,sp,#0xc
000050  4621              MOV      r1,r4
000052  9000              STR      r0,[sp,#0]
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       EDP_PacketSaveData
00005a  2800              CMP      r0,#0
00005c  d145              BNE      |L6.234|
;;;392    	{	
;;;393    			M8266_Clear();
00005e  f7fffffe          BL       M8266_Clear
;;;394    			M8266WIFI_SPI_Send_Data(edpPacket._data, edpPacket._len,link_no,&link_status);
000062  9a08              LDR      r2,[sp,#0x20]
000064  b291              UXTH     r1,r2
000066  4b2e              LDR      r3,|L6.288|
000068  4a2e              LDR      r2,|L6.292|
00006a  7812              LDRB     r2,[r2,#0]  ; link_no
00006c  9807              LDR      r0,[sp,#0x1c]
00006e  f7fffffe          BL       M8266WIFI_SPI_Send_Data
;;;395    		//hexdump(edpPacket._data,edpPacket._len);
;;;396    		EDP_DeleteBuffer(&edpPacket);									//删包
000072  a807              ADD      r0,sp,#0x1c
000074  f7fffffe          BL       EDP_DeleteBuffer
;;;397    		UsartPrintf(USART_DEBUG, "image len = %d\r\n", pic_len);
000078  4622              MOV      r2,r4
00007a  a12b              ADR      r1,|L6.296|
00007c  482f              LDR      r0,|L6.316|
00007e  f7fffffe          BL       UsartPrintf
;;;398    		while(pic_len > 0)
000082  e02b              B        |L6.220|
                  |L6.132|
;;;399    		{
;;;400    			mDelay(500);												//传图时，时间间隔会大一点，这里额外增加一个延时	
000084  f44f70fa          MOV      r0,#0x1f4
000088  f7fffffe          BL       mDelay
;;;401    			if(pic_len >= PKT_SIZE)
00008c  f5b47f7a          CMP      r4,#0x3e8
000090  db14              BLT      |L6.188|
;;;402    			{
;;;403    			bmpres=f_read(&bmpfsrc,&camera_buf,PKT_SIZE*sizeof(unsigned char),&read_num);
000092  ab02              ADD      r3,sp,#8
000094  f44f727a          MOV      r2,#0x3e8
000098  4929              LDR      r1,|L6.320|
00009a  481b              LDR      r0,|L6.264|
00009c  f7fffffe          BL       f_read
0000a0  491a              LDR      r1,|L6.268|
0000a2  7008              STRB     r0,[r1,#0]
;;;404    			//if(read_num||res==0) break;
;;;405    			M8266WIFI_SPI_Send_Data(camera_buf,PKT_SIZE,link_no,&link_status);
0000a4  4b1e              LDR      r3,|L6.288|
0000a6  481f              LDR      r0,|L6.292|
0000a8  7802              LDRB     r2,[r0,#0]  ; link_no
0000aa  f44f717a          MOV      r1,#0x3e8
0000ae  4824              LDR      r0,|L6.320|
0000b0  f7fffffe          BL       M8266WIFI_SPI_Send_Data
;;;406    				//串口发送分片
;;;407    				
;;;408    		//		pImage += PKT_SIZE;
;;;409    				pic_len -= PKT_SIZE;
0000b4  f5a4707a          SUB      r0,r4,#0x3e8
0000b8  b284              UXTH     r4,r0
0000ba  e00f              B        |L6.220|
                  |L6.188|
;;;410    			}
;;;411    			
;;;412    			else
;;;413    			{
;;;414    			
;;;415    				bmpres=f_read(&bmpfsrc,&camera_buf,ucAlign*sizeof(unsigned char),&read_num);
0000bc  462a              MOV      r2,r5
0000be  ab02              ADD      r3,sp,#8
0000c0  491f              LDR      r1,|L6.320|
0000c2  4811              LDR      r0,|L6.264|
0000c4  f7fffffe          BL       f_read
0000c8  4910              LDR      r1,|L6.268|
0000ca  7008              STRB     r0,[r1,#0]
;;;416    				M8266WIFI_SPI_Send_Data(camera_buf,ucAlign,link_no,&link_status);
0000cc  4b14              LDR      r3,|L6.288|
0000ce  4815              LDR      r0,|L6.292|
0000d0  7802              LDRB     r2,[r0,#0]  ; link_no
0000d2  4629              MOV      r1,r5
0000d4  481a              LDR      r0,|L6.320|
0000d6  f7fffffe          BL       M8266WIFI_SPI_Send_Data
;;;417    				//ESP8266_SendData(camera_buf, ucAlign);					//串口发送最后一个分片
;;;418    				pic_len = 0;
0000da  2400              MOVS     r4,#0
                  |L6.220|
0000dc  2c00              CMP      r4,#0                 ;398
0000de  dcd1              BGT      |L6.132|
;;;419    			}
;;;420    		}
;;;421    		
;;;422    		UsartPrintf(USART_DEBUG, "image send ok\r\n");
0000e0  a118              ADR      r1,|L6.324|
0000e2  4816              LDR      r0,|L6.316|
0000e4  f7fffffe          BL       UsartPrintf
0000e8  e003              B        |L6.242|
                  |L6.234|
;;;423    	}
;;;424    	else
;;;425    		UsartPrintf(USART_DEBUG, "EDP_PacketSaveData Failed\r\n");
0000ea  a11a              ADR      r1,|L6.340|
0000ec  4813              LDR      r0,|L6.316|
0000ee  f7fffffe          BL       UsartPrintf
                  |L6.242|
;;;426    
;;;427    	
;;;428    
;;;429    }
;;;430    	
;;;431    	}
0000f2  b00b              ADD      sp,sp,#0x2c
0000f4  bdf0              POP      {r4-r7,pc}
;;;432    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L6.248|
0000f8  7b226473          DCB      "{""ds_id"":""ppp""}",0
0000fc  5f696422
000100  3a227070
000104  70227d00
                  |L6.264|
                          DCD      bmpfsrc
                  |L6.268|
                          DCD      bmpres
                  |L6.272|
000110  b4f2bfaa          DCB      180,242,191,170,206,196,188,254,179,201,185,166,"\r\n",0
000114  cec4bcfe
000118  b3c9b9a6
00011c  0d0a00  
00011f  00                DCB      0
                  |L6.288|
                          DCD      link_status
                  |L6.292|
                          DCD      link_no
                  |L6.296|
000128  696d6167          DCB      "image len = %d\r\n",0
00012c  65206c65
000130  6e203d20
000134  25640d0a
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L6.316|
                          DCD      0x40013800
                  |L6.320|
                          DCD      camera_buf
                  |L6.324|
000144  696d6167          DCB      "image send ok\r\n",0
000148  65207365
00014c  6e64206f
000150  6b0d0a00
                  |L6.340|
000154  4544505f          DCB      "EDP_PacketSaveData Failed\r\n",0
000158  5061636b
00015c  65745361
000160  76654461
000164  74612046
000168  61696c65
00016c  640d0a00

                          AREA ||i.OneNet_SendPhoto||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  OneNet_SendPhoto PROC
;;;463    
;;;464     u8 OneNet_SendPhoto(void)
000000  b500              PUSH     {lr}
;;;465    {
000002  b08b              SUB      sp,sp,#0x2c
;;;466    		static int name_count=0;
;;;467    	  char name[40];
;;;468    		name_count++;
000004  4810              LDR      r0,|L7.72|
000006  6800              LDR      r0,[r0,#0]  ; name_count
000008  1c40              ADDS     r0,r0,#1
00000a  490f              LDR      r1,|L7.72|
00000c  6008              STR      r0,[r1,#0]  ; name_count
;;;469    		sprintf(name,"0:photos_%d.jpg",name_count); //字符串格式化
00000e  4608              MOV      r0,r1
000010  a10e              ADR      r1,|L7.76|
000012  6802              LDR      r2,[r0,#0]  ; name_count
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       __2sprintf
;;;470    		printf("\r\n正在拍照...");	
00001a  a010              ADR      r0,|L7.92|
00001c  f7fffffe          BL       __2printf
;;;471    	  Ov7725_vsync=0;
000020  2000              MOVS     r0,#0
000022  4912              LDR      r1,|L7.108|
000024  7008              STRB     r0,[r1,#0]
;;;472    		if(JPEG_encode(name)== 0)
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       JPEG_encode
00002c  b930              CBNZ     r0,|L7.60|
;;;473    			{
;;;474    			  OneNet_SendData_Picture(NULL,name);
00002e  a901              ADD      r1,sp,#4
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       OneNet_SendData_Picture
;;;475    				return 1;	
000036  2001              MOVS     r0,#1
                  |L7.56|
;;;476    			}
;;;477    			else
;;;478    			{
;;;479    			  printf("\r\n拍照失败");
;;;480    				return 0;
;;;481    				
;;;482    				
;;;483    			}	
;;;484    }
000038  b00b              ADD      sp,sp,#0x2c
00003a  bd00              POP      {pc}
                  |L7.60|
00003c  a00c              ADR      r0,|L7.112|
00003e  f7fffffe          BL       __2printf
000042  2000              MOVS     r0,#0                 ;480
000044  e7f8              B        |L7.56|
;;;485    
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      name_count
                  |L7.76|
00004c  303a7068          DCB      "0:photos_%d.jpg",0
000050  6f746f73
000054  5f25642e
000058  6a706700
                  |L7.92|
00005c  0d0ad5fd          DCB      "\r\n",213,253,212,218,197,196,213,213,"...",0
000060  d4dac5c4
000064  d5d52e2e
000068  2e00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L7.108|
                          DCD      Ov7725_vsync
                  |L7.112|
000070  0d0ac5c4          DCB      "\r\n",197,196,213,213,202,167,176,220,0
000074  d5d5caa7
000078  b0dc00  
00007b  00                DCB      0

                          AREA ||i.OneNet_Send_heart||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  OneNet_Send_heart PROC
;;;352    
;;;353    void OneNet_Send_heart(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;354    {
;;;355    		EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};	
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
000008  9002              STR      r0,[sp,#8]
00000a  9003              STR      r0,[sp,#0xc]
;;;356    		if(!EDP_PacketPing(&edpPacket))
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       EDP_PacketPing
000012  b998              CBNZ     r0,|L8.60|
;;;357    		{
;;;358    		printf("send ping pkt to server, bytes: %d\r\n", edpPacket._len);
000014  a00b              ADR      r0,|L8.68|
000016  9901              LDR      r1,[sp,#4]
000018  f7fffffe          BL       __2printf
;;;359    		M8266WIFI_SPI_Send_Data(edpPacket._data, edpPacket._len,link_no,&link_status);
00001c  9a01              LDR      r2,[sp,#4]
00001e  b291              UXTH     r1,r2
000020  4b12              LDR      r3,|L8.108|
000022  4a13              LDR      r2,|L8.112|
000024  7812              LDRB     r2,[r2,#0]  ; link_no
000026  9800              LDR      r0,[sp,#0]
000028  f7fffffe          BL       M8266WIFI_SPI_Send_Data
;;;360    			hexdump(edpPacket._data,edpPacket._len);
00002c  e9dd0100          LDRD     r0,r1,[sp,#0]
000030  f7fffffe          BL       hexdump
;;;361    		EDP_DeleteBuffer(&edpPacket);									//删包
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       EDP_DeleteBuffer
00003a  e002              B        |L8.66|
                  |L8.60|
;;;362    		}
;;;363    		else 
;;;364    		printf("心跳失败");
00003c  a00d              ADR      r0,|L8.116|
00003e  f7fffffe          BL       __2printf
                  |L8.66|
;;;365    }
000042  bd1f              POP      {r0-r4,pc}
;;;366    
                          ENDP

                  |L8.68|
000044  73656e64          DCB      "send ping pkt to server, bytes: %d\r\n",0
000048  2070696e
00004c  6720706b
000050  7420746f
000054  20736572
000058  7665722c
00005c  20627974
000060  65733a20
000064  25640d0a
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
                  |L8.108|
                          DCD      link_status
                  |L8.112|
                          DCD      link_no
                  |L8.116|
000074  d0c4ccf8          DCB      208,196,204,248,202,167,176,220,0
000078  caa7b0dc
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  camera_buf
                          %        1000
                  bmpfsrc
                          %        4132

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  jfcode
000000  ffe00010          DCB      0xff,0xe0,0x00,0x10
000004  4a464946          DCB      0x4a,0x46,0x49,0x46
000008  00010100          DCB      0x00,0x01,0x01,0x00
00000c  00010001          DCB      0x00,0x01,0x00,0x01
000010  0000              DCB      0x00,0x00
                  std_luminance_quant_tbl
000012  0010              DCW      0x0010
000014  000b000a          DCW      0x000b,0x000a
000018  00100018          DCW      0x0010,0x0018
00001c  00280033          DCW      0x0028,0x0033
000020  003d000c          DCW      0x003d,0x000c
000024  000c000e          DCW      0x000c,0x000e
000028  0013001a          DCW      0x0013,0x001a
00002c  003a003c          DCW      0x003a,0x003c
000030  0037000e          DCW      0x0037,0x000e
000034  000d0010          DCW      0x000d,0x0010
000038  00180028          DCW      0x0018,0x0028
00003c  00390045          DCW      0x0039,0x0045
000040  0038000e          DCW      0x0038,0x000e
000044  00110016          DCW      0x0011,0x0016
000048  001d0033          DCW      0x001d,0x0033
00004c  00570050          DCW      0x0057,0x0050
000050  003e0012          DCW      0x003e,0x0012
000054  00160025          DCW      0x0016,0x0025
000058  00380044          DCW      0x0038,0x0044
00005c  006d0067          DCW      0x006d,0x0067
000060  004d0018          DCW      0x004d,0x0018
000064  00230037          DCW      0x0023,0x0037
000068  00400051          DCW      0x0040,0x0051
00006c  00680071          DCW      0x0068,0x0071
000070  005c0031          DCW      0x005c,0x0031
000074  0040004e          DCW      0x0040,0x004e
000078  00570067          DCW      0x0057,0x0067
00007c  00790078          DCW      0x0079,0x0078
000080  00650048          DCW      0x0065,0x0048
000084  005c005f          DCW      0x005c,0x005f
000088  00620070          DCW      0x0062,0x0070
00008c  00640067          DCW      0x0064,0x0067
000090  0063              DCW      0x0063
                  std_chrominance_quant_tbl
000092  0011              DCW      0x0011
000094  00120018          DCW      0x0012,0x0018
000098  002f0063          DCW      0x002f,0x0063
00009c  00630063          DCW      0x0063,0x0063
0000a0  00630012          DCW      0x0063,0x0012
0000a4  0015001a          DCW      0x0015,0x001a
0000a8  00420063          DCW      0x0042,0x0063
0000ac  00630063          DCW      0x0063,0x0063
0000b0  00630018          DCW      0x0063,0x0018
0000b4  001a0038          DCW      0x001a,0x0038
0000b8  00630063          DCW      0x0063,0x0063
0000bc  00630063          DCW      0x0063,0x0063
0000c0  0063002f          DCW      0x0063,0x002f
0000c4  00420063          DCW      0x0042,0x0063
0000c8  00630063          DCW      0x0063,0x0063
0000cc  00630063          DCW      0x0063,0x0063
0000d0  00630063          DCW      0x0063,0x0063
0000d4  00630063          DCW      0x0063,0x0063
0000d8  00630063          DCW      0x0063,0x0063
0000dc  00630063          DCW      0x0063,0x0063
0000e0  00630063          DCW      0x0063,0x0063
0000e4  00630063          DCW      0x0063,0x0063
0000e8  00630063          DCW      0x0063,0x0063
0000ec  00630063          DCW      0x0063,0x0063
0000f0  00630063          DCW      0x0063,0x0063
0000f4  00630063          DCW      0x0063,0x0063
0000f8  00630063          DCW      0x0063,0x0063
0000fc  00630063          DCW      0x0063,0x0063
000100  00630063          DCW      0x0063,0x0063
000104  00630063          DCW      0x0063,0x0063
000108  00630063          DCW      0x0063,0x0063
00010c  00630063          DCW      0x0063,0x0063
000110  0063              DCW      0x0063
                  zz_order
000112  0001              DCB      0x00,0x01
000114  05060e0f          DCB      0x05,0x06,0x0e,0x0f
000118  1b1c0204          DCB      0x1b,0x1c,0x02,0x04
00011c  070d101a          DCB      0x07,0x0d,0x10,0x1a
000120  1d2a0308          DCB      0x1d,0x2a,0x03,0x08
000124  0c11191e          DCB      0x0c,0x11,0x19,0x1e
000128  292b090b          DCB      0x29,0x2b,0x09,0x0b
00012c  12181f28          DCB      0x12,0x18,0x1f,0x28
000130  2c350a13          DCB      0x2c,0x35,0x0a,0x13
000134  1720272d          DCB      0x17,0x20,0x27,0x2d
000138  34361416          DCB      0x34,0x36,0x14,0x16
00013c  21262e33          DCB      0x21,0x26,0x2e,0x33
000140  373c1522          DCB      0x37,0x3c,0x15,0x22
000144  252f3238          DCB      0x25,0x2f,0x32,0x38
000148  3b3d2324          DCB      0x3b,0x3d,0x23,0x24
00014c  3031393a          DCB      0x30,0x31,0x39,0x3a
000150  3e3f              DCB      0x3e,0x3f
                  bits_dc_luminance
000152  0000              DCB      0x00,0x00
000154  01050101          DCB      0x01,0x05,0x01,0x01
000158  01010101          DCB      0x01,0x01,0x01,0x01
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  000000            DCB      0x00,0x00,0x00
                  val_dc_luminance
000163  00                DCB      0x00
000164  01020304          DCB      0x01,0x02,0x03,0x04
000168  05060708          DCB      0x05,0x06,0x07,0x08
00016c  090a0b            DCB      0x09,0x0a,0x0b
                  bits_dc_chrominance
00016f  00                DCB      0x00
000170  00030101          DCB      0x00,0x03,0x01,0x01
000174  01010101          DCB      0x01,0x01,0x01,0x01
000178  01010100          DCB      0x01,0x01,0x01,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
                  val_dc_chrominance
000180  00010203          DCB      0x00,0x01,0x02,0x03
000184  04050607          DCB      0x04,0x05,0x06,0x07
000188  08090a0b          DCB      0x08,0x09,0x0a,0x0b
                  bits_ac_luminance
00018c  00000201          DCB      0x00,0x00,0x02,0x01
000190  03030204          DCB      0x03,0x03,0x02,0x04
000194  03050504          DCB      0x03,0x05,0x05,0x04
000198  04000001          DCB      0x04,0x00,0x00,0x01
00019c  7d                DCB      0x7d
                  bits_ac_chrominance
00019d  000002            DCB      0x00,0x00,0x02
0001a0  01020404          DCB      0x01,0x02,0x04,0x04
0001a4  03040705          DCB      0x03,0x04,0x07,0x05
0001a8  04040001          DCB      0x04,0x04,0x00,0x01
0001ac  0277              DCB      0x02,0x77
                  val_ac_luminance
0001ae  0102              DCB      0x01,0x02
0001b0  03000411          DCB      0x03,0x00,0x04,0x11
0001b4  05122131          DCB      0x05,0x12,0x21,0x31
0001b8  41061351          DCB      0x41,0x06,0x13,0x51
0001bc  61072271          DCB      0x61,0x07,0x22,0x71
0001c0  14328191          DCB      0x14,0x32,0x81,0x91
0001c4  a1082342          DCB      0xa1,0x08,0x23,0x42
0001c8  b1c11552          DCB      0xb1,0xc1,0x15,0x52
0001cc  d1f02433          DCB      0xd1,0xf0,0x24,0x33
0001d0  62728209          DCB      0x62,0x72,0x82,0x09
0001d4  0a161718          DCB      0x0a,0x16,0x17,0x18
0001d8  191a2526          DCB      0x19,0x1a,0x25,0x26
0001dc  2728292a          DCB      0x27,0x28,0x29,0x2a
0001e0  34353637          DCB      0x34,0x35,0x36,0x37
0001e4  38393a43          DCB      0x38,0x39,0x3a,0x43
0001e8  44454647          DCB      0x44,0x45,0x46,0x47
0001ec  48494a53          DCB      0x48,0x49,0x4a,0x53
0001f0  54555657          DCB      0x54,0x55,0x56,0x57
0001f4  58595a63          DCB      0x58,0x59,0x5a,0x63
0001f8  64656667          DCB      0x64,0x65,0x66,0x67
0001fc  68696a73          DCB      0x68,0x69,0x6a,0x73
000200  74757677          DCB      0x74,0x75,0x76,0x77
000204  78797a83          DCB      0x78,0x79,0x7a,0x83
000208  84858687          DCB      0x84,0x85,0x86,0x87
00020c  88898a92          DCB      0x88,0x89,0x8a,0x92
000210  93949596          DCB      0x93,0x94,0x95,0x96
000214  9798999a          DCB      0x97,0x98,0x99,0x9a
000218  a2a3a4a5          DCB      0xa2,0xa3,0xa4,0xa5
00021c  a6a7a8a9          DCB      0xa6,0xa7,0xa8,0xa9
000220  aab2b3b4          DCB      0xaa,0xb2,0xb3,0xb4
000224  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
000228  b9bac2c3          DCB      0xb9,0xba,0xc2,0xc3
00022c  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000230  c8c9cad2          DCB      0xc8,0xc9,0xca,0xd2
000234  d3d4d5d6          DCB      0xd3,0xd4,0xd5,0xd6
000238  d7d8d9da          DCB      0xd7,0xd8,0xd9,0xda
00023c  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
000240  e5e6e7e8          DCB      0xe5,0xe6,0xe7,0xe8
000244  e9eaf1f2          DCB      0xe9,0xea,0xf1,0xf2
000248  f3f4f5f6          DCB      0xf3,0xf4,0xf5,0xf6
00024c  f7f8f9fa          DCB      0xf7,0xf8,0xf9,0xfa
                  val_ac_chrominance
000250  00010203          DCB      0x00,0x01,0x02,0x03
000254  11040521          DCB      0x11,0x04,0x05,0x21
000258  31061241          DCB      0x31,0x06,0x12,0x41
00025c  51076171          DCB      0x51,0x07,0x61,0x71
000260  13223281          DCB      0x13,0x22,0x32,0x81
000264  08144291          DCB      0x08,0x14,0x42,0x91
000268  a1b1c109          DCB      0xa1,0xb1,0xc1,0x09
00026c  233352f0          DCB      0x23,0x33,0x52,0xf0
000270  156272d1          DCB      0x15,0x62,0x72,0xd1
000274  0a162434          DCB      0x0a,0x16,0x24,0x34
000278  e125f117          DCB      0xe1,0x25,0xf1,0x17
00027c  18191a26          DCB      0x18,0x19,0x1a,0x26
000280  2728292a          DCB      0x27,0x28,0x29,0x2a
000284  35363738          DCB      0x35,0x36,0x37,0x38
000288  393a4344          DCB      0x39,0x3a,0x43,0x44
00028c  45464748          DCB      0x45,0x46,0x47,0x48
000290  494a5354          DCB      0x49,0x4a,0x53,0x54
000294  55565758          DCB      0x55,0x56,0x57,0x58
000298  595a6364          DCB      0x59,0x5a,0x63,0x64
00029c  65666768          DCB      0x65,0x66,0x67,0x68
0002a0  696a7374          DCB      0x69,0x6a,0x73,0x74
0002a4  75767778          DCB      0x75,0x76,0x77,0x78
0002a8  797a8283          DCB      0x79,0x7a,0x82,0x83
0002ac  84858687          DCB      0x84,0x85,0x86,0x87
0002b0  88898a92          DCB      0x88,0x89,0x8a,0x92
0002b4  93949596          DCB      0x93,0x94,0x95,0x96
0002b8  9798999a          DCB      0x97,0x98,0x99,0x9a
0002bc  a2a3a4a5          DCB      0xa2,0xa3,0xa4,0xa5
0002c0  a6a7a8a9          DCB      0xa6,0xa7,0xa8,0xa9
0002c4  aab2b3b4          DCB      0xaa,0xb2,0xb3,0xb4
0002c8  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
0002cc  b9bac2c3          DCB      0xb9,0xba,0xc2,0xc3
0002d0  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
0002d4  c8c9cad2          DCB      0xc8,0xc9,0xca,0xd2
0002d8  d3d4d5d6          DCB      0xd3,0xd4,0xd5,0xd6
0002dc  d7d8d9da          DCB      0xd7,0xd8,0xd9,0xda
0002e0  e2e3e4e5          DCB      0xe2,0xe3,0xe4,0xe5
0002e4  e6e7e8e9          DCB      0xe6,0xe7,0xe8,0xe9
0002e8  eaf2f3f4          DCB      0xea,0xf2,0xf3,0xf4
0002ec  f5f6f7f8          DCB      0xf5,0xf6,0xf7,0xf8
0002f0  f9fa              DCB      0xf9,0xfa

                          AREA ||.data||, DATA, ALIGN=2

                  heart_flag
000000  00                DCB      0x00
                  photo
000001  00                DCB      0x00
                  bmpres
000002  0000              DCB      0x00,0x00
                  temp_max
000004  0064              DCW      0x0064
                  temp_min
000006  000a              DCW      0x000a
                  humi_max
000008  64                DCB      0x64
                  humi_min
000009  00                DCB      0x00
                  fire
00000a  0000              DCB      0x00,0x00
                  name_count
                          DCD      0x00000000
