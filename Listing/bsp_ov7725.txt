; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\bsp_ov7725.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_ov7725.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\bsp_ov7725.crf ..\..\User\ov7725\bsp_ov7725.c]
                          THUMB

                          AREA ||i.CameraFous||, CODE, READONLY, ALIGN=2

                  CameraFous PROC
;;;839    */
;;;840    void CameraFous()
000000  b510              PUSH     {r4,lr}
;;;841    {
;;;842    	Ov7725_vsync = 0;
000002  2000              MOVS     r0,#0
000004  491e              LDR      r1,|L1.128|
000006  7008              STRB     r0,[r1,#0]
;;;843    	ILI9341_DispStringLine_EN(LINE(14),"Lens focus.Press KEY2 to enter system.");
000008  f7fffffe          BL       LCD_GetFont
00000c  88c0              LDRH     r0,[r0,#6]
00000e  ebc000c0          RSB      r0,r0,r0,LSL #3
000012  0440              LSLS     r0,r0,#17
000014  0c04              LSRS     r4,r0,#16
000016  a11b              ADR      r1,|L1.132|
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       ILI9341_DispStringLine_EN
;;;844    	Door_ClOSE;
00001e  2201              MOVS     r2,#1
000020  0311              LSLS     r1,r2,#12
000022  4822              LDR      r0,|L1.172|
000024  f7fffffe          BL       GPIO_WriteBit
;;;845    	while(1)
000028  e026              B        |L1.120|
                  |L1.42|
;;;846    	{
;;;847    	
;;;848    		if( Ov7725_vsync == 2 )
00002a  4815              LDR      r0,|L1.128|
00002c  7800              LDRB     r0,[r0,#0]  ; Ov7725_vsync
00002e  2802              CMP      r0,#2
000030  d11b              BNE      |L1.106|
;;;849    		{
;;;850    			FIFO_PREPARE;  		//	FIFO准备				
000032  bf00              NOP      
000034  2004              MOVS     r0,#4
000036  491d              LDR      r1,|L1.172|
000038  3114              ADDS     r1,r1,#0x14
00003a  6008              STR      r0,[r1,#0]
00003c  2020              MOVS     r0,#0x20
00003e  491c              LDR      r1,|L1.176|
000040  6148              STR      r0,[r1,#0x14]
000042  6108              STR      r0,[r1,#0x10]
000044  2004              MOVS     r0,#4
000046  4919              LDR      r1,|L1.172|
000048  3110              ADDS     r1,r1,#0x10
00004a  6008              STR      r0,[r1,#0]
00004c  2020              MOVS     r0,#0x20
00004e  4918              LDR      r1,|L1.176|
000050  6148              STR      r0,[r1,#0x14]
000052  6108              STR      r0,[r1,#0x10]
000054  bf00              NOP      
;;;851    			ImagDisp(cam_mode_test.lcd_sx,
000056  4c17              LDR      r4,|L1.180|
000058  8923              LDRH     r3,[r4,#8]  ; cam_mode_test
00005a  88e2              LDRH     r2,[r4,#6]  ; cam_mode_test
00005c  89a1              LDRH     r1,[r4,#0xc]  ; cam_mode_test
00005e  8960              LDRH     r0,[r4,#0xa]  ; cam_mode_test
000060  f7fffffe          BL       ImagDisp
;;;852    								cam_mode_test.lcd_sy,
;;;853    								cam_mode_test.cam_width,
;;;854    								cam_mode_test.cam_height);			//采集并显示
;;;855    			
;;;856    			Ov7725_vsync = 0;			
000064  2000              MOVS     r0,#0
000066  4906              LDR      r1,|L1.128|
000068  7008              STRB     r0,[r1,#0]
                  |L1.106|
;;;857    		}
;;;858    				if( Key_Scan(KEY1_GPIO_PORT,KEY1_GPIO_PIN) == KEY_ON  )
00006a  2101              MOVS     r1,#1
00006c  480f              LDR      r0,|L1.172|
00006e  f7fffffe          BL       Key_Scan
000072  2801              CMP      r0,#1
000074  d100              BNE      |L1.120|
;;;859    	{	
;;;860    			break;
000076  e000              B        |L1.122|
                  |L1.120|
000078  e7d7              B        |L1.42|
                  |L1.122|
00007a  bf00              NOP      
;;;861    		
;;;862    	}
;;;863    	}
;;;864    	
;;;865    	
;;;866    }
00007c  bd10              POP      {r4,pc}
;;;867    void Camera_Set_Test()
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      Ov7725_vsync
                  |L1.132|
000084  4c656e73          DCB      "Lens focus.Press KEY2 to enter system.",0
000088  20666f63
00008c  75732e50
000090  72657373
000094  204b4559
000098  3220746f
00009c  20656e74
0000a0  65722073
0000a4  79737465
0000a8  6d2e00  
0000ab  00                DCB      0
                  |L1.172|
                          DCD      0x40010800
                  |L1.176|
                          DCD      0x40011000
                  |L1.180|
                          DCD      cam_mode_test

                          AREA ||i.Camera_Init||, CODE, READONLY, ALIGN=2

                  Camera_Init PROC
;;;895    
;;;896    void Camera_Init()
000000  b510              PUSH     {r4,lr}
;;;897    {
;;;898    	u8  retry;
;;;899    	if(OV7725_Init() != SUCCESS)
000002  f7fffffe          BL       OV7725_Init
000006  2801              CMP      r0,#1
000008  d006              BEQ      |L2.24|
;;;900    	{
;;;901    		retry++;
00000a  1c60              ADDS     r0,r4,#1
00000c  b2c4              UXTB     r4,r0
;;;902    		if(retry>5)
00000e  2c05              CMP      r4,#5
000010  dd02              BLE      |L2.24|
;;;903    		{
;;;904    			printf("\r\n没有检测到OV7725摄像头\r\n");
000012  a003              ADR      r0,|L2.32|
000014  f7fffffe          BL       __2printf
                  |L2.24|
;;;905    		}
;;;906    	}
;;;907    	printf("\r\nOV7725摄像头初始化完成\r\n");
000018  a008              ADR      r0,|L2.60|
00001a  f7fffffe          BL       __2printf
;;;908    	
;;;909    }
00001e  bd10              POP      {r4,pc}
;;;910    
                          ENDP

                  |L2.32|
000020  0d0ac3bb          DCB      "\r\n",195,187,211,208,188,236,178,226,181,189,"OV7725",201
000024  d3d0bcec
000028  b2e2b5bd
00002c  4f563737
000030  3235c9  
000033  e3cff1cd          DCB      227,207,241,205,183,"\r\n",0
000037  b70d0a00
00003b  00                DCB      0
                  |L2.60|
00003c  0d0a4f56          DCB      "\r\nOV7725",201,227,207,241,205,183,179,245,202,188,187
000040  37373235
000044  c9e3cff1
000048  cdb7b3f5
00004c  cabcbb  
00004f  afcdeab3          DCB      175,205,234,179,201,"\r\n",0
000053  c90d0a00
000057  00                DCB      0

                          AREA ||i.Camera_Set||, CODE, READONLY, ALIGN=2

                  Camera_Set PROC
;;;910    
;;;911    void Camera_Set()
000000  b538              PUSH     {r3-r5,lr}
;;;912    {
;;;913    	OV7725_Window_Set(cam_mode.cam_sx,
000002  4809              LDR      r0,|L3.40|
000004  7800              LDRB     r0,[r0,#0]  ; cam_mode
000006  4c08              LDR      r4,|L3.40|
000008  9000              STR      r0,[sp,#0]
00000a  8923              LDRH     r3,[r4,#8]  ; cam_mode
00000c  88e2              LDRH     r2,[r4,#6]  ; cam_mode
00000e  88a1              LDRH     r1,[r4,#4]  ; cam_mode
000010  8860              LDRH     r0,[r4,#2]  ; cam_mode
000012  f7fffffe          BL       OV7725_Window_Set
;;;914    														cam_mode.cam_sy,
;;;915    														cam_mode.cam_width,
;;;916    														cam_mode.cam_height,
;;;917    														cam_mode.QVGA_VGA);
;;;918    
;;;919    	ILI9341_Clear(0,0,LCD_X_LENGTH,LCD_Y_LENGTH);	/* 清屏，显示全黑 */
000016  4805              LDR      r0,|L3.44|
000018  8803              LDRH     r3,[r0,#0]  ; LCD_Y_LENGTH
00001a  4805              LDR      r0,|L3.48|
00001c  8802              LDRH     r2,[r0,#0]  ; LCD_X_LENGTH
00001e  2100              MOVS     r1,#0
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       ILI9341_Clear
;;;920    }
000026  bd38              POP      {r3-r5,pc}
;;;921    
                          ENDP

                  |L3.40|
                          DCD      cam_mode
                  |L3.44|
                          DCD      LCD_Y_LENGTH
                  |L3.48|
                          DCD      LCD_X_LENGTH

                          AREA ||i.Camera_Set_Test||, CODE, READONLY, ALIGN=2

                  Camera_Set_Test PROC
;;;866    }
;;;867    void Camera_Set_Test()
000000  b538              PUSH     {r3-r5,lr}
;;;868    {
;;;869    	/*根据摄像头参数组配置模式*/
;;;870    	OV7725_Special_Effect(cam_mode_test.effect);
000002  4915              LDR      r1,|L4.88|
000004  7cc8              LDRB     r0,[r1,#0x13]  ; cam_mode_test
000006  f7fffffe          BL       OV7725_Special_Effect
;;;871    	/*光照模式*/
;;;872    	OV7725_Light_Mode(cam_mode_test.light_mode);
00000a  4913              LDR      r1,|L4.88|
00000c  7bc8              LDRB     r0,[r1,#0xf]  ; cam_mode_test
00000e  f7fffffe          BL       OV7725_Light_Mode
;;;873    	/*饱和度*/
;;;874    	OV7725_Color_Saturation(cam_mode_test.saturation);
000012  4911              LDR      r1,|L4.88|
000014  f9910010          LDRSB    r0,[r1,#0x10]  ; cam_mode_test
000018  f7fffffe          BL       OV7725_Color_Saturation
;;;875    	/*光照度*/
;;;876    	OV7725_Brightness(cam_mode_test.brightness);
00001c  490e              LDR      r1,|L4.88|
00001e  f9910011          LDRSB    r0,[r1,#0x11]  ; cam_mode_test
000022  f7fffffe          BL       OV7725_Brightness
;;;877    	/*对比度*/
;;;878    	OV7725_Contrast(cam_mode_test.contrast);
000026  490c              LDR      r1,|L4.88|
000028  f9910012          LDRSB    r0,[r1,#0x12]  ; cam_mode_test
00002c  f7fffffe          BL       OV7725_Contrast
;;;879    	/*特殊效果*/
;;;880    	OV7725_Special_Effect(cam_mode_test.effect);
000030  4909              LDR      r1,|L4.88|
000032  7cc8              LDRB     r0,[r1,#0x13]  ; cam_mode_test
000034  f7fffffe          BL       OV7725_Special_Effect
;;;881    	
;;;882    	/*设置图像采样及模式大小*/
;;;883    	
;;;884    	
;;;885    	OV7725_Window_Set(cam_mode_test.cam_sx,
000038  4807              LDR      r0,|L4.88|
00003a  7800              LDRB     r0,[r0,#0]  ; cam_mode_test
00003c  4c06              LDR      r4,|L4.88|
00003e  9000              STR      r0,[sp,#0]
000040  8923              LDRH     r3,[r4,#8]  ; cam_mode_test
000042  88e2              LDRH     r2,[r4,#6]  ; cam_mode_test
000044  88a1              LDRH     r1,[r4,#4]  ; cam_mode_test
000046  8860              LDRH     r0,[r4,#2]  ; cam_mode_test
000048  f7fffffe          BL       OV7725_Window_Set
;;;886    														cam_mode_test.cam_sy,
;;;887    														cam_mode_test.cam_width,
;;;888    														cam_mode_test.cam_height,
;;;889    														cam_mode_test.QVGA_VGA);
;;;890    ILI9341_GramScan( cam_mode_test.lcd_scan );
00004c  4621              MOV      r1,r4
00004e  7b88              LDRB     r0,[r1,#0xe]  ; cam_mode_test
000050  f7fffffe          BL       ILI9341_GramScan
;;;891    	
;;;892    
;;;893    	
;;;894    }
000054  bd38              POP      {r3-r5,pc}
;;;895    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      cam_mode_test

                          AREA ||i.FIFO_GPIO_Config||, CODE, READONLY, ALIGN=2

                  FIFO_GPIO_Config PROC
;;;247     ************************************************/
;;;248    static void FIFO_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;249    {
;;;250        GPIO_InitTypeDef GPIO_InitStructure;
;;;251    	
;;;252    		/*开启时钟*/
;;;253    	  RCC_APB2PeriphClockCmd (OV7725_OE_GPIO_CLK|OV7725_WRST_GPIO_CLK|
000002  2101              MOVS     r1,#1
000004  203c              MOVS     r0,#0x3c
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;254    															OV7725_RRST_GPIO_CLK|OV7725_RCLK_GPIO_CLK|
;;;255    															OV7725_WE_GPIO_CLK|OV7725_DATA_GPIO_CLK, ENABLE );
;;;256    	
;;;257    		/*(FIFO_OE--FIFO输出使能)*/
;;;258    		GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;259        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;260    		GPIO_InitStructure.GPIO_Pin = OV7725_OE_GPIO_PIN;
000016  2008              MOVS     r0,#8
000018  f8ad0000          STRH     r0,[sp,#0]
;;;261    		GPIO_Init(OV7725_OE_GPIO_PORT, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  481a              LDR      r0,|L5.136|
000020  f7fffffe          BL       GPIO_Init
;;;262    	
;;;263    			/*(FIFO_WRST--FIFO写复位)*/
;;;264    		GPIO_InitStructure.GPIO_Pin = OV7725_WRST_GPIO_PIN;
000024  2010              MOVS     r0,#0x10
000026  f8ad0000          STRH     r0,[sp,#0]
;;;265    		GPIO_Init(OV7725_WRST_GPIO_PORT, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4817              LDR      r0,|L5.140|
00002e  f7fffffe          BL       GPIO_Init
;;;266    	
;;;267    			/*(FIFO_RRST--FIFO读复位) */
;;;268    		GPIO_InitStructure.GPIO_Pin = OV7725_RRST_GPIO_PIN;
000032  2004              MOVS     r0,#4
000034  f8ad0000          STRH     r0,[sp,#0]
;;;269    		GPIO_Init(OV7725_RRST_GPIO_PORT, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4813              LDR      r0,|L5.136|
00003c  f7fffffe          BL       GPIO_Init
;;;270    		
;;;271    		/*(FIFO_RCLK-FIFO读时钟)*/
;;;272    		GPIO_InitStructure.GPIO_Pin = OV7725_RCLK_GPIO_PIN;
000040  2020              MOVS     r0,#0x20
000042  f8ad0000          STRH     r0,[sp,#0]
;;;273    		GPIO_Init(OV7725_RCLK_GPIO_PORT, &GPIO_InitStructure);
000046  4669              MOV      r1,sp
000048  4810              LDR      r0,|L5.140|
00004a  f7fffffe          BL       GPIO_Init
;;;274    
;;;275    		/*(FIFO_WE--FIFO写使能)*/
;;;276    		GPIO_InitStructure.GPIO_Pin = OV7725_WE_GPIO_PIN;	
00004e  2008              MOVS     r0,#8
000050  f8ad0000          STRH     r0,[sp,#0]
;;;277    		GPIO_Init(OV7725_WE_GPIO_PORT, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  480e              LDR      r0,|L5.144|
000058  f7fffffe          BL       GPIO_Init
;;;278    	
;;;279    
;;;280        /*(FIFO_DATA--FIFO输出数据)*/
;;;281    		GPIO_InitStructure.GPIO_Pin = 	OV7725_DATA_0_GPIO_PIN | OV7725_DATA_1_GPIO_PIN |
00005c  f44f407f          MOV      r0,#0xff00
000060  f8ad0000          STRH     r0,[sp,#0]
;;;282    																			OV7725_DATA_2_GPIO_PIN | OV7725_DATA_3_GPIO_PIN |
;;;283    																			OV7725_DATA_4_GPIO_PIN | 	OV7725_DATA_5_GPIO_PIN |
;;;284    																			OV7725_DATA_6_GPIO_PIN | 	OV7725_DATA_7_GPIO_PIN;
;;;285        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000064  2004              MOVS     r0,#4
000066  f88d0003          STRB     r0,[sp,#3]
;;;286        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00006a  2003              MOVS     r0,#3
00006c  f88d0002          STRB     r0,[sp,#2]
;;;287    		GPIO_Init(OV7725_DATA_GPIO_PORT, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4808              LDR      r0,|L5.148|
000074  f7fffffe          BL       GPIO_Init
;;;288    		
;;;289    		
;;;290        FIFO_OE_L();	  					/*拉低使FIFO输出使能*/
000078  2008              MOVS     r0,#8
00007a  4903              LDR      r1,|L5.136|
00007c  3114              ADDS     r1,r1,#0x14
00007e  6008              STR      r0,[r1,#0]
;;;291        FIFO_WE_H();   						/*拉高使FIFO写允许*/
000080  4903              LDR      r1,|L5.144|
000082  3110              ADDS     r1,r1,#0x10
000084  6008              STR      r0,[r1,#0]
;;;292    		
;;;293    		
;;;294    }
000086  bd08              POP      {r3,pc}
;;;295    
                          ENDP

                  |L5.136|
                          DCD      0x40010800
                  |L5.140|
                          DCD      0x40011000
                  |L5.144|
                          DCD      0x40011400
                  |L5.148|
                          DCD      0x40010c00

                          AREA ||i.ImagDisp||, CODE, READONLY, ALIGN=2

                  ImagDisp PROC
;;;789      */
;;;790    void ImagDisp(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;791    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;792    	uint16_t i, j; 
;;;793    	uint16_t Camera_Data;
;;;794    	
;;;795    	ILI9341_OpenWindow(sx,sy,width,height);
00000c  462b              MOV      r3,r5
00000e  4622              MOV      r2,r4
000010  4651              MOV      r1,r10
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       ILI9341_OpenWindow
;;;796    	ILI9341_Write_Cmd ( CMD_SetPixel );	
000018  202c              MOVS     r0,#0x2c
00001a  f7fffffe          BL       ILI9341_Write_Cmd
;;;797    
;;;798    	for(i = 0; i < width; i++)
00001e  2600              MOVS     r6,#0
000020  e022              B        |L6.104|
                  |L6.34|
;;;799    	{
;;;800    		for(j = 0; j < height-20; j++)
000022  2700              MOVS     r7,#0
000024  e01a              B        |L6.92|
                  |L6.38|
;;;801    		{
;;;802    			READ_FIFO_PIXEL(Camera_Data);		/* 从FIFO读出一个rgb565像素到Camera_Data变量 */
000026  bf00              NOP      
000028  f04f0800          MOV      r8,#0
00002c  2020              MOVS     r0,#0x20
00002e  4910              LDR      r1,|L6.112|
000030  6148              STR      r0,[r1,#0x14]
000032  4810              LDR      r0,|L6.116|
000034  6800              LDR      r0,[r0,#0]
000036  f400487f          AND      r8,r0,#0xff00
00003a  2020              MOVS     r0,#0x20
00003c  6108              STR      r0,[r1,#0x10]
00003e  6148              STR      r0,[r1,#0x14]
000040  480c              LDR      r0,|L6.116|
000042  6800              LDR      r0,[r0,#0]
000044  f3c02007          UBFX     r0,r0,#8,#8
000048  ea400808          ORR      r8,r0,r8
00004c  2020              MOVS     r0,#0x20
00004e  6108              STR      r0,[r1,#0x10]
000050  bf00              NOP      
;;;803    			ILI9341_Write_Data(Camera_Data);
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       ILI9341_Write_Data
000058  1c78              ADDS     r0,r7,#1              ;800
00005a  b287              UXTH     r7,r0                 ;800
                  |L6.92|
00005c  f1a50014          SUB      r0,r5,#0x14           ;800
000060  42b8              CMP      r0,r7                 ;800
000062  dce0              BGT      |L6.38|
000064  1c70              ADDS     r0,r6,#1              ;798
000066  b286              UXTH     r6,r0                 ;798
                  |L6.104|
000068  42a6              CMP      r6,r4                 ;798
00006a  dbda              BLT      |L6.34|
;;;804    		}
;;;805    	}
;;;806    }
00006c  e8bd87f0          POP      {r4-r10,pc}
;;;807    void camera_buff_save(u16 *camera_buf,u16 length, u16 width)
                          ENDP

                  |L6.112|
                          DCD      0x40011000
                  |L6.116|
                          DCD      0x40010c08

                          AREA ||i.OV7725_Brightness||, CODE, READONLY, ALIGN=1

                  OV7725_Brightness PROC
;;;495      */
;;;496    void OV7725_Brightness(int8_t bri)
000000  b570              PUSH     {r4-r6,lr}
;;;497    {
000002  4606              MOV      r6,r0
;;;498    	uint8_t BRIGHT_Value,SIGN_Value;	
;;;499    	
;;;500    	switch(bri)
000004  1d30              ADDS     r0,r6,#4
000006  2809              CMP      r0,#9
000008  d221              BCS      |L7.78|
00000a  e8dff000          TBB      [pc,r0]
00000e  1d1a              DCB      0x1d,0x1a
000010  1714110e          DCB      0x17,0x14,0x11,0x0e
000014  0b080500          DCB      0x0b,0x08,0x05,0x00
;;;501    	{
;;;502    		case 4:
;;;503    				BRIGHT_Value = 0x48;
000018  2448              MOVS     r4,#0x48
;;;504    				SIGN_Value = 0x06;
00001a  2506              MOVS     r5,#6
;;;505    			break;
00001c  e01a              B        |L7.84|
;;;506    		
;;;507    		case 3:
;;;508    				BRIGHT_Value = 0x38;
00001e  2438              MOVS     r4,#0x38
;;;509    				SIGN_Value = 0x06;		
000020  2506              MOVS     r5,#6
;;;510    		break;	
000022  e017              B        |L7.84|
;;;511    		
;;;512    		case 2:
;;;513    				BRIGHT_Value = 0x28;
000024  2428              MOVS     r4,#0x28
;;;514    				SIGN_Value = 0x06;			
000026  2506              MOVS     r5,#6
;;;515    		break;	
000028  e014              B        |L7.84|
;;;516    		
;;;517    		case 1:
;;;518    				BRIGHT_Value = 0x18;
00002a  2418              MOVS     r4,#0x18
;;;519    				SIGN_Value = 0x06;			
00002c  2506              MOVS     r5,#6
;;;520    		break;	
00002e  e011              B        |L7.84|
;;;521    		
;;;522    		case 0:
;;;523    				BRIGHT_Value = 0x08;
000030  2408              MOVS     r4,#8
;;;524    				SIGN_Value = 0x06;			
000032  2506              MOVS     r5,#6
;;;525    		break;	
000034  e00e              B        |L7.84|
;;;526    		
;;;527    		case -1:
;;;528    				BRIGHT_Value = 0x08;
000036  2408              MOVS     r4,#8
;;;529    				SIGN_Value = 0x0e;		
000038  250e              MOVS     r5,#0xe
;;;530    		break;	
00003a  e00b              B        |L7.84|
;;;531    		
;;;532    		case -2:
;;;533    				BRIGHT_Value = 0x18;
00003c  2418              MOVS     r4,#0x18
;;;534    				SIGN_Value = 0x0e;		
00003e  250e              MOVS     r5,#0xe
;;;535    		break;	
000040  e008              B        |L7.84|
;;;536    		
;;;537    		case -3:
;;;538    				BRIGHT_Value = 0x28;
000042  2428              MOVS     r4,#0x28
;;;539    				SIGN_Value = 0x0e;		
000044  250e              MOVS     r5,#0xe
;;;540    		break;	
000046  e005              B        |L7.84|
;;;541    		
;;;542    		case -4:
;;;543    				BRIGHT_Value = 0x38;
000048  2438              MOVS     r4,#0x38
;;;544    				SIGN_Value = 0x0e;		
00004a  250e              MOVS     r5,#0xe
;;;545    		break;	
00004c  e002              B        |L7.84|
                  |L7.78|
;;;546    		
;;;547    		default:
;;;548    			OV7725_DEBUG("Brightness parameter error!");
00004e  bf00              NOP      
000050  bf00              NOP      
;;;549    			break;
000052  bf00              NOP      
                  |L7.84|
000054  bf00              NOP                            ;505
;;;550    	}
;;;551    
;;;552    		SCCB_WriteByte(REG_BRIGHT, BRIGHT_Value); //AWB on
000056  4621              MOV      r1,r4
000058  209b              MOVS     r0,#0x9b
00005a  f7fffffe          BL       SCCB_WriteByte
;;;553    		SCCB_WriteByte(REG_SIGN, SIGN_Value);
00005e  4629              MOV      r1,r5
000060  20ab              MOVS     r0,#0xab
000062  f7fffffe          BL       SCCB_WriteByte
;;;554    }		
000066  bd70              POP      {r4-r6,pc}
;;;555    
                          ENDP


                          AREA ||i.OV7725_Color_Saturation||, CODE, READONLY, ALIGN=1

                  OV7725_Color_Saturation PROC
;;;474      */
;;;475    void OV7725_Color_Saturation(int8_t sat)
000000  b510              PUSH     {r4,lr}
;;;476    {
000002  4604              MOV      r4,r0
;;;477    
;;;478     	if(sat >=-4 && sat<=4)
000004  f1140f04          CMN      r4,#4
000008  db0e              BLT      |L8.40|
00000a  2c04              CMP      r4,#4
00000c  dc0c              BGT      |L8.40|
;;;479    	{	
;;;480    		SCCB_WriteByte(REG_USAT, (sat+4)<<4); 
00000e  1d20              ADDS     r0,r4,#4
000010  0700              LSLS     r0,r0,#28
000012  0e01              LSRS     r1,r0,#24
000014  20a7              MOVS     r0,#0xa7
000016  f7fffffe          BL       SCCB_WriteByte
;;;481    		SCCB_WriteByte(REG_VSAT, (sat+4)<<4);
00001a  1d20              ADDS     r0,r4,#4
00001c  0700              LSLS     r0,r0,#28
00001e  0e01              LSRS     r1,r0,#24
000020  20a8              MOVS     r0,#0xa8
000022  f7fffffe          BL       SCCB_WriteByte
000026  e001              B        |L8.44|
                  |L8.40|
;;;482    	}
;;;483    	else
;;;484    	{
;;;485    		OV7725_DEBUG("Color Saturation parameter error!");
000028  bf00              NOP      
00002a  bf00              NOP      
                  |L8.44|
;;;486    	}
;;;487    	
;;;488    }			
00002c  bd10              POP      {r4,pc}
;;;489    
                          ENDP


                          AREA ||i.OV7725_Contrast||, CODE, READONLY, ALIGN=1

                  OV7725_Contrast PROC
;;;560      */
;;;561    void OV7725_Contrast(int8_t cnst)
000000  b510              PUSH     {r4,lr}
;;;562    {
000002  4604              MOV      r4,r0
;;;563    	if(cnst >= -4 && cnst <=4)
000004  f1140f04          CMN      r4,#4
000008  db0b              BLT      |L9.34|
00000a  2c04              CMP      r4,#4
00000c  dc09              BGT      |L9.34|
;;;564    	{
;;;565    		SCCB_WriteByte(REG_CNST, (0x30-(4-cnst)*4));
00000e  f1c40004          RSB      r0,r4,#4
000012  2230              MOVS     r2,#0x30
000014  eba20080          SUB      r0,r2,r0,LSL #2
000018  b2c1              UXTB     r1,r0
00001a  209c              MOVS     r0,#0x9c
00001c  f7fffffe          BL       SCCB_WriteByte
000020  e001              B        |L9.38|
                  |L9.34|
;;;566    	}
;;;567    	else
;;;568    	{
;;;569    		OV7725_DEBUG("Contrast parameter error!");
000022  bf00              NOP      
000024  bf00              NOP      
                  |L9.38|
;;;570    	}
;;;571    }		
000026  bd10              POP      {r4,pc}
;;;572    
                          ENDP


                          AREA ||i.OV7725_GPIO_Config||, CODE, READONLY, ALIGN=1

                  OV7725_GPIO_Config PROC
;;;344     ************************************************/
;;;345    void OV7725_GPIO_Config(void)
000000  b510              PUSH     {r4,lr}
;;;346    {
;;;347    	SCCB_GPIO_Config();
000002  f7fffffe          BL       SCCB_GPIO_Config
;;;348    	FIFO_GPIO_Config();
000006  f7fffffe          BL       FIFO_GPIO_Config
;;;349    	VSYNC_GPIO_Config();
00000a  f7fffffe          BL       VSYNC_GPIO_Config
;;;350    	
;;;351    }
00000e  bd10              POP      {r4,pc}
;;;352    
                          ENDP


                          AREA ||i.OV7725_Init||, CODE, READONLY, ALIGN=2

                  OV7725_Init PROC
;;;359     ************************************************/
;;;360    ErrorStatus OV7725_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;361    {
;;;362    	uint16_t i = 0;
000002  2400              MOVS     r4,#0
;;;363    	uint8_t Sensor_IDCode = 0;	
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;364    	
;;;365    	//DEBUG("ov7725 Register Config Start......");
;;;366    	
;;;367    	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*复位sensor */
000008  2180              MOVS     r1,#0x80
00000a  2012              MOVS     r0,#0x12
00000c  f7fffffe          BL       SCCB_WriteByte
000010  b908              CBNZ     r0,|L11.22|
;;;368    	{
;;;369    		//DEBUG("sccb write data error");		
;;;370    		return ERROR ;
000012  2000              MOVS     r0,#0
                  |L11.20|
;;;371    	}	
;;;372    
;;;373    	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* 读取sensor ID号*/
;;;374    	{
;;;375    		//DEBUG("read id faild");		
;;;376    		return ERROR;
;;;377    	}
;;;378    	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
;;;379    	
;;;380    	if(Sensor_IDCode == OV7725_ID)
;;;381    	{
;;;382    		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
;;;383    		{
;;;384    			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
;;;385    			{                
;;;386    				//DEBUG("write reg faild", Sensor_Config[i].Address);
;;;387    				return ERROR;
;;;388    			}
;;;389    		}
;;;390    	}
;;;391    	else
;;;392    	{
;;;393    		return ERROR;
;;;394    	}
;;;395    	//DEBUG("ov7725 Register Config Success");
;;;396    	
;;;397    	return SUCCESS;
;;;398    }
000014  bd38              POP      {r3-r5,pc}
                  |L11.22|
000016  220b              MOVS     r2,#0xb               ;373
000018  2101              MOVS     r1,#1                 ;373
00001a  4668              MOV      r0,sp                 ;373
00001c  f7fffffe          BL       SCCB_ReadByte
000020  b908              CBNZ     r0,|L11.38|
000022  2000              MOVS     r0,#0                 ;376
000024  e7f6              B        |L11.20|
                  |L11.38|
000026  f89d0000          LDRB     r0,[sp,#0]            ;380
00002a  2821              CMP      r0,#0x21              ;380
00002c  d114              BNE      |L11.88|
00002e  2400              MOVS     r4,#0                 ;382
000030  e00d              B        |L11.78|
                  |L11.50|
000032  4a0b              LDR      r2,|L11.96|
000034  eb020244          ADD      r2,r2,r4,LSL #1       ;384
000038  7851              LDRB     r1,[r2,#1]            ;384
00003a  4a09              LDR      r2,|L11.96|
00003c  f8120014          LDRB     r0,[r2,r4,LSL #1]     ;384
000040  f7fffffe          BL       SCCB_WriteByte
000044  b908              CBNZ     r0,|L11.74|
000046  2000              MOVS     r0,#0                 ;387
000048  e7e4              B        |L11.20|
                  |L11.74|
00004a  1c60              ADDS     r0,r4,#1              ;382
00004c  b284              UXTH     r4,r0                 ;382
                  |L11.78|
00004e  4805              LDR      r0,|L11.100|
000050  7800              LDRB     r0,[r0,#0]            ;382  ; OV7725_REG_NUM
000052  4284              CMP      r4,r0                 ;382
000054  dbed              BLT      |L11.50|
000056  e001              B        |L11.92|
                  |L11.88|
000058  2000              MOVS     r0,#0                 ;393
00005a  e7db              B        |L11.20|
                  |L11.92|
00005c  2001              MOVS     r0,#1                 ;397
00005e  e7d9              B        |L11.20|
;;;399    
                          ENDP

                  |L11.96|
                          DCD      Sensor_Config
                  |L11.100|
                          DCD      OV7725_REG_NUM

                          AREA ||i.OV7725_Light_Mode||, CODE, READONLY, ALIGN=1

                  OV7725_Light_Mode PROC
;;;412      */
;;;413    void OV7725_Light_Mode(uint8_t mode)
000000  b510              PUSH     {r4,lr}
;;;414    {
000002  4604              MOV      r4,r0
;;;415    	switch(mode)
000004  2c06              CMP      r4,#6
000006  d279              BCS      |L12.252|
000008  e8dff004          TBB      [pc,r4]
00000c  03142d46          DCB      0x03,0x14,0x2d,0x46
000010  5f79              DCB      0x5f,0x79
;;;416    	{
;;;417    		case 0:	//Auto，自动模式
;;;418    			SCCB_WriteByte(0x13, 0xff); //AWB on 
000012  21ff              MOVS     r1,#0xff
000014  2013              MOVS     r0,#0x13
000016  f7fffffe          BL       SCCB_WriteByte
;;;419    			SCCB_WriteByte(0x0e, 0x65);
00001a  2165              MOVS     r1,#0x65
00001c  200e              MOVS     r0,#0xe
00001e  f7fffffe          BL       SCCB_WriteByte
;;;420    			SCCB_WriteByte(0x2d, 0x00);
000022  2100              MOVS     r1,#0
000024  202d              MOVS     r0,#0x2d
000026  f7fffffe          BL       SCCB_WriteByte
;;;421    			SCCB_WriteByte(0x2e, 0x00);
00002a  2100              MOVS     r1,#0
00002c  202e              MOVS     r0,#0x2e
00002e  f7fffffe          BL       SCCB_WriteByte
;;;422    			break;
000032  e070              B        |L12.278|
;;;423    		case 1://sunny，晴天
;;;424    			SCCB_WriteByte(0x13, 0xfd); //AWB off
000034  21fd              MOVS     r1,#0xfd
000036  2013              MOVS     r0,#0x13
000038  f7fffffe          BL       SCCB_WriteByte
;;;425    			SCCB_WriteByte(0x01, 0x5a);
00003c  215a              MOVS     r1,#0x5a
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       SCCB_WriteByte
;;;426    			SCCB_WriteByte(0x02, 0x5c);
000044  215c              MOVS     r1,#0x5c
000046  2002              MOVS     r0,#2
000048  f7fffffe          BL       SCCB_WriteByte
;;;427    			SCCB_WriteByte(0x0e, 0x65);
00004c  2165              MOVS     r1,#0x65
00004e  200e              MOVS     r0,#0xe
000050  f7fffffe          BL       SCCB_WriteByte
;;;428    			SCCB_WriteByte(0x2d, 0x00);
000054  2100              MOVS     r1,#0
000056  202d              MOVS     r0,#0x2d
000058  f7fffffe          BL       SCCB_WriteByte
;;;429    			SCCB_WriteByte(0x2e, 0x00);
00005c  2100              MOVS     r1,#0
00005e  202e              MOVS     r0,#0x2e
000060  f7fffffe          BL       SCCB_WriteByte
;;;430    			break;	
000064  e057              B        |L12.278|
;;;431    		case 2://cloudy，多云
;;;432    			SCCB_WriteByte(0x13, 0xfd); //AWB off
000066  21fd              MOVS     r1,#0xfd
000068  2013              MOVS     r0,#0x13
00006a  f7fffffe          BL       SCCB_WriteByte
;;;433    			SCCB_WriteByte(0x01, 0x58);
00006e  2158              MOVS     r1,#0x58
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       SCCB_WriteByte
;;;434    			SCCB_WriteByte(0x02, 0x60);
000076  2160              MOVS     r1,#0x60
000078  2002              MOVS     r0,#2
00007a  f7fffffe          BL       SCCB_WriteByte
;;;435    			SCCB_WriteByte(0x0e, 0x65);
00007e  2165              MOVS     r1,#0x65
000080  200e              MOVS     r0,#0xe
000082  f7fffffe          BL       SCCB_WriteByte
;;;436    			SCCB_WriteByte(0x2d, 0x00);
000086  2100              MOVS     r1,#0
000088  202d              MOVS     r0,#0x2d
00008a  f7fffffe          BL       SCCB_WriteByte
;;;437    			SCCB_WriteByte(0x2e, 0x00);
00008e  2100              MOVS     r1,#0
000090  202e              MOVS     r0,#0x2e
000092  f7fffffe          BL       SCCB_WriteByte
;;;438    			break;	
000096  e03e              B        |L12.278|
;;;439    		case 3://office，办公室
;;;440    			SCCB_WriteByte(0x13, 0xfd); //AWB off
000098  21fd              MOVS     r1,#0xfd
00009a  2013              MOVS     r0,#0x13
00009c  f7fffffe          BL       SCCB_WriteByte
;;;441    			SCCB_WriteByte(0x01, 0x84);
0000a0  2184              MOVS     r1,#0x84
0000a2  2001              MOVS     r0,#1
0000a4  f7fffffe          BL       SCCB_WriteByte
;;;442    			SCCB_WriteByte(0x02, 0x4c);
0000a8  214c              MOVS     r1,#0x4c
0000aa  2002              MOVS     r0,#2
0000ac  f7fffffe          BL       SCCB_WriteByte
;;;443    			SCCB_WriteByte(0x0e, 0x65);
0000b0  2165              MOVS     r1,#0x65
0000b2  200e              MOVS     r0,#0xe
0000b4  f7fffffe          BL       SCCB_WriteByte
;;;444    			SCCB_WriteByte(0x2d, 0x00);
0000b8  2100              MOVS     r1,#0
0000ba  202d              MOVS     r0,#0x2d
0000bc  f7fffffe          BL       SCCB_WriteByte
;;;445    			SCCB_WriteByte(0x2e, 0x00);
0000c0  2100              MOVS     r1,#0
0000c2  202e              MOVS     r0,#0x2e
0000c4  f7fffffe          BL       SCCB_WriteByte
;;;446    			break;	
0000c8  e025              B        |L12.278|
;;;447    		case 4://home，家里
;;;448    			SCCB_WriteByte(0x13, 0xfd); //AWB off
0000ca  21fd              MOVS     r1,#0xfd
0000cc  2013              MOVS     r0,#0x13
0000ce  f7fffffe          BL       SCCB_WriteByte
;;;449    			SCCB_WriteByte(0x01, 0x96);
0000d2  2196              MOVS     r1,#0x96
0000d4  2001              MOVS     r0,#1
0000d6  f7fffffe          BL       SCCB_WriteByte
;;;450    			SCCB_WriteByte(0x02, 0x40);
0000da  2140              MOVS     r1,#0x40
0000dc  2002              MOVS     r0,#2
0000de  f7fffffe          BL       SCCB_WriteByte
;;;451    			SCCB_WriteByte(0x0e, 0x65);
0000e2  2165              MOVS     r1,#0x65
0000e4  200e              MOVS     r0,#0xe
0000e6  f7fffffe          BL       SCCB_WriteByte
;;;452    			SCCB_WriteByte(0x2d, 0x00);
0000ea  2100              MOVS     r1,#0
0000ec  202d              MOVS     r0,#0x2d
0000ee  f7fffffe          BL       SCCB_WriteByte
;;;453    			SCCB_WriteByte(0x2e, 0x00);
0000f2  2100              MOVS     r1,#0
0000f4  202e              MOVS     r0,#0x2e
0000f6  f7fffffe          BL       SCCB_WriteByte
;;;454    			break;	
0000fa  e00c              B        |L12.278|
                  |L12.252|
0000fc  e008              B        |L12.272|
;;;455    		
;;;456    		case 5://night，夜晚
;;;457    			SCCB_WriteByte(0x13, 0xff); //AWB on
0000fe  21ff              MOVS     r1,#0xff
000100  2013              MOVS     r0,#0x13
000102  f7fffffe          BL       SCCB_WriteByte
;;;458    			SCCB_WriteByte(0x0e, 0xe5);
000106  21e5              MOVS     r1,#0xe5
000108  200e              MOVS     r0,#0xe
00010a  f7fffffe          BL       SCCB_WriteByte
;;;459    			break;	
00010e  e002              B        |L12.278|
                  |L12.272|
;;;460    		
;;;461    		default:
;;;462    			 OV7725_DEBUG("Light Mode parameter error!"); 
000110  bf00              NOP      
000112  bf00              NOP      
;;;463    
;;;464    			break;
000114  bf00              NOP      
                  |L12.278|
000116  bf00              NOP                            ;422
;;;465    	}
;;;466    
;;;467    }			
000118  bd10              POP      {r4,pc}
;;;468    
                          ENDP


                          AREA ||i.OV7725_Special_Effect||, CODE, READONLY, ALIGN=1

                  OV7725_Special_Effect PROC
;;;585      */
;;;586    void OV7725_Special_Effect(uint8_t eff)
000000  b510              PUSH     {r4,lr}
;;;587    {
000002  4604              MOV      r4,r0
;;;588    	switch(eff)
000004  2c07              CMP      r4,#7
000006  d258              BCS      |L13.186|
000008  e8dff004          TBB      [pc,r4]
00000c  04111e2b          DCB      0x04,0x11,0x1e,0x2b
000010  38455200          DCB      0x38,0x45,0x52,0x00
;;;589    	{
;;;590    		case 0://正常
;;;591    			SCCB_WriteByte(0xa6, 0x06);
000014  2106              MOVS     r1,#6
000016  20a6              MOVS     r0,#0xa6
000018  f7fffffe          BL       SCCB_WriteByte
;;;592    			SCCB_WriteByte(0x60, 0x80);
00001c  2180              MOVS     r1,#0x80
00001e  2060              MOVS     r0,#0x60
000020  f7fffffe          BL       SCCB_WriteByte
;;;593    			SCCB_WriteByte(0x61, 0x80);
000024  2180              MOVS     r1,#0x80
000026  2061              MOVS     r0,#0x61
000028  f7fffffe          BL       SCCB_WriteByte
;;;594    		break;
00002c  e048              B        |L13.192|
;;;595    		
;;;596    		case 1://黑白
;;;597    			SCCB_WriteByte(0xa6, 0x26);
00002e  2126              MOVS     r1,#0x26
000030  20a6              MOVS     r0,#0xa6
000032  f7fffffe          BL       SCCB_WriteByte
;;;598    			SCCB_WriteByte(0x60, 0x80);
000036  2180              MOVS     r1,#0x80
000038  2060              MOVS     r0,#0x60
00003a  f7fffffe          BL       SCCB_WriteByte
;;;599    			SCCB_WriteByte(0x61, 0x80);
00003e  2180              MOVS     r1,#0x80
000040  2061              MOVS     r0,#0x61
000042  f7fffffe          BL       SCCB_WriteByte
;;;600    		break;	
000046  e03b              B        |L13.192|
;;;601    		
;;;602    		case 2://偏蓝
;;;603    			SCCB_WriteByte(0xa6, 0x1e);
000048  211e              MOVS     r1,#0x1e
00004a  20a6              MOVS     r0,#0xa6
00004c  f7fffffe          BL       SCCB_WriteByte
;;;604    			SCCB_WriteByte(0x60, 0xa0);
000050  21a0              MOVS     r1,#0xa0
000052  2060              MOVS     r0,#0x60
000054  f7fffffe          BL       SCCB_WriteByte
;;;605    			SCCB_WriteByte(0x61, 0x40);	
000058  2140              MOVS     r1,#0x40
00005a  2061              MOVS     r0,#0x61
00005c  f7fffffe          BL       SCCB_WriteByte
;;;606    		break;	
000060  e02e              B        |L13.192|
;;;607    		
;;;608    		case 3://复古
;;;609    			SCCB_WriteByte(0xa6, 0x1e);
000062  211e              MOVS     r1,#0x1e
000064  20a6              MOVS     r0,#0xa6
000066  f7fffffe          BL       SCCB_WriteByte
;;;610    			SCCB_WriteByte(0x60, 0x40);
00006a  2140              MOVS     r1,#0x40
00006c  2060              MOVS     r0,#0x60
00006e  f7fffffe          BL       SCCB_WriteByte
;;;611    			SCCB_WriteByte(0x61, 0xa0);	
000072  21a0              MOVS     r1,#0xa0
000074  2061              MOVS     r0,#0x61
000076  f7fffffe          BL       SCCB_WriteByte
;;;612    		break;	
00007a  e021              B        |L13.192|
;;;613    		
;;;614    		case 4://偏红
;;;615    			SCCB_WriteByte(0xa6, 0x1e);
00007c  211e              MOVS     r1,#0x1e
00007e  20a6              MOVS     r0,#0xa6
000080  f7fffffe          BL       SCCB_WriteByte
;;;616    			SCCB_WriteByte(0x60, 0x80);
000084  2180              MOVS     r1,#0x80
000086  2060              MOVS     r0,#0x60
000088  f7fffffe          BL       SCCB_WriteByte
;;;617    			SCCB_WriteByte(0x61, 0xc0);		
00008c  21c0              MOVS     r1,#0xc0
00008e  2061              MOVS     r0,#0x61
000090  f7fffffe          BL       SCCB_WriteByte
;;;618    		break;	
000094  e014              B        |L13.192|
;;;619    		
;;;620    		case 5://偏绿
;;;621    			SCCB_WriteByte(0xa6, 0x1e);
000096  211e              MOVS     r1,#0x1e
000098  20a6              MOVS     r0,#0xa6
00009a  f7fffffe          BL       SCCB_WriteByte
;;;622    			SCCB_WriteByte(0x60, 0x60);
00009e  2160              MOVS     r1,#0x60
0000a0  4608              MOV      r0,r1
0000a2  f7fffffe          BL       SCCB_WriteByte
;;;623    			SCCB_WriteByte(0x61, 0x60);		
0000a6  2160              MOVS     r1,#0x60
0000a8  2061              MOVS     r0,#0x61
0000aa  f7fffffe          BL       SCCB_WriteByte
;;;624    		break;	
0000ae  e007              B        |L13.192|
;;;625    		
;;;626    		case 6://反相
;;;627    			SCCB_WriteByte(0xa6, 0x46);
0000b0  2146              MOVS     r1,#0x46
0000b2  20a6              MOVS     r0,#0xa6
0000b4  f7fffffe          BL       SCCB_WriteByte
;;;628    		break;	
0000b8  e002              B        |L13.192|
                  |L13.186|
;;;629    				
;;;630    		default:
;;;631    			OV7725_DEBUG("Special Effect error!");
0000ba  bf00              NOP      
0000bc  bf00              NOP      
;;;632    			break;
0000be  bf00              NOP      
                  |L13.192|
0000c0  bf00              NOP                            ;594
;;;633    	}
;;;634    }		
0000c2  bd10              POP      {r4,pc}
;;;635    
                          ENDP


                          AREA ||i.OV7725_Window_Set||, CODE, READONLY, ALIGN=1

                  OV7725_Window_Set PROC
;;;653      */
;;;654    void OV7725_Window_Set(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height,uint8_t QVGA_VGA)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;655    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;656    	uint8_t reg_raw,cal_temp;
;;;657    
;;;658    	/***********QVGA or VGA *************/
;;;659    	if(QVGA_VGA == 0)
000010  f1b80f00          CMP      r8,#0
000014  d104              BNE      |L14.32|
;;;660    	{
;;;661    		/*QVGA RGB565 */
;;;662    		SCCB_WriteByte(REG_COM7,0x46); 
000016  2146              MOVS     r1,#0x46
000018  2012              MOVS     r0,#0x12
00001a  f7fffffe          BL       SCCB_WriteByte
00001e  e003              B        |L14.40|
                  |L14.32|
;;;663    	}
;;;664    	else
;;;665    	{
;;;666    			/*VGA RGB565 */
;;;667    		SCCB_WriteByte(REG_COM7,0x06); 
000020  2106              MOVS     r1,#6
000022  2012              MOVS     r0,#0x12
000024  f7fffffe          BL       SCCB_WriteByte
                  |L14.40|
;;;668    	}
;;;669    
;;;670    	/***************HSTART*********************/
;;;671    	//读取寄存器的原内容，HStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;672    	SCCB_ReadByte(&reg_raw,1,REG_HSTART);
000028  2217              MOVS     r2,#0x17
00002a  2101              MOVS     r1,#1
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       SCCB_ReadByte
;;;673    	
;;;674    	//sx为窗口偏移，高8位存储在HSTART，低2位在HREF
;;;675    	cal_temp = (reg_raw + (sx>>2));	
000032  f89d0000          LDRB     r0,[sp,#0]
000036  eb0000a6          ADD      r0,r0,r6,ASR #2
00003a  f00009ff          AND      r9,r0,#0xff
;;;676    	SCCB_WriteByte(REG_HSTART,cal_temp ); 
00003e  4649              MOV      r1,r9
000040  2017              MOVS     r0,#0x17
000042  f7fffffe          BL       SCCB_WriteByte
;;;677    	
;;;678    	/***************HSIZE*********************/
;;;679    	//水平宽度，高8位存储在HSIZE，低2位存储在HREF
;;;680    	SCCB_WriteByte(REG_HSIZE,width>>2);//HSIZE左移两位 
000046  f3c40187          UBFX     r1,r4,#2,#8
00004a  2018              MOVS     r0,#0x18
00004c  f7fffffe          BL       SCCB_WriteByte
;;;681    	
;;;682    	
;;;683    	/***************VSTART*********************/
;;;684    	//读取寄存器的原内容，VStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;685    	SCCB_ReadByte(&reg_raw,1,REG_VSTRT);	
000050  2219              MOVS     r2,#0x19
000052  2101              MOVS     r1,#1
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       SCCB_ReadByte
;;;686    	//sy为窗口偏移，高8位存储在HSTART，低1位在HREF
;;;687    	cal_temp = (reg_raw + (sy>>1));	
00005a  f89d0000          LDRB     r0,[sp,#0]
00005e  eb000067          ADD      r0,r0,r7,ASR #1
000062  f00009ff          AND      r9,r0,#0xff
;;;688    	
;;;689    	SCCB_WriteByte(REG_VSTRT,cal_temp);
000066  4649              MOV      r1,r9
000068  2019              MOVS     r0,#0x19
00006a  f7fffffe          BL       SCCB_WriteByte
;;;690    	
;;;691    	/***************VSIZE*********************/
;;;692    	//垂直高度，高8位存储在VSIZE，低1位存储在HREF
;;;693    	SCCB_WriteByte(REG_VSIZE,height>>1);//VSIZE左移一位
00006e  f3c50147          UBFX     r1,r5,#1,#8
000072  201a              MOVS     r0,#0x1a
000074  f7fffffe          BL       SCCB_WriteByte
;;;694    	
;;;695    	/***************VSTART*********************/
;;;696    	//读取寄存器的原内容	
;;;697    	SCCB_ReadByte(&reg_raw,1,REG_HREF);	
000078  2232              MOVS     r2,#0x32
00007a  2101              MOVS     r1,#1
00007c  4668              MOV      r0,sp
00007e  f7fffffe          BL       SCCB_ReadByte
;;;698    	//把水平宽度的低2位、垂直高度的低1位，水平偏移的低2位，垂直偏移的低1位的配置添加到HREF
;;;699    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2)|((sx&0x03)<<4)|((sy&0x01)<<6));	
000082  f0040003          AND      r0,r4,#3
000086  f89d1000          LDRB     r1,[sp,#0]
00008a  4308              ORRS     r0,r0,r1
00008c  f0050101          AND      r1,r5,#1
000090  ea400081          ORR      r0,r0,r1,LSL #2
000094  f0060103          AND      r1,r6,#3
000098  ea401001          ORR      r0,r0,r1,LSL #4
00009c  f0070101          AND      r1,r7,#1
0000a0  ea401981          ORR      r9,r0,r1,LSL #6
;;;700    	
;;;701    	SCCB_WriteByte(REG_HREF,cal_temp);
0000a4  4649              MOV      r1,r9
0000a6  2032              MOVS     r0,#0x32
0000a8  f7fffffe          BL       SCCB_WriteByte
;;;702    	
;;;703    	/***************HOUTSIZIE /VOUTSIZE*********************/
;;;704    	SCCB_WriteByte(REG_HOutSize,width>>2);
0000ac  f3c40187          UBFX     r1,r4,#2,#8
0000b0  2029              MOVS     r0,#0x29
0000b2  f7fffffe          BL       SCCB_WriteByte
;;;705    	SCCB_WriteByte(REG_VOutSize,height>>1);
0000b6  f3c50147          UBFX     r1,r5,#1,#8
0000ba  202c              MOVS     r0,#0x2c
0000bc  f7fffffe          BL       SCCB_WriteByte
;;;706    	
;;;707    	//读取寄存器的原内容	
;;;708    	SCCB_ReadByte(&reg_raw,1,REG_EXHCH);	
0000c0  222a              MOVS     r2,#0x2a
0000c2  2101              MOVS     r1,#1
0000c4  4668              MOV      r0,sp
0000c6  f7fffffe          BL       SCCB_ReadByte
;;;709    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2));	
0000ca  f0040003          AND      r0,r4,#3
0000ce  f89d1000          LDRB     r1,[sp,#0]
0000d2  4308              ORRS     r0,r0,r1
0000d4  f0050101          AND      r1,r5,#1
0000d8  ea400981          ORR      r9,r0,r1,LSL #2
;;;710    
;;;711    	SCCB_WriteByte(REG_EXHCH,cal_temp);	
0000dc  4649              MOV      r1,r9
0000de  202a              MOVS     r0,#0x2a
0000e0  f7fffffe          BL       SCCB_WriteByte
;;;712    }
0000e4  e8bd83f8          POP      {r3-r9,pc}
;;;713    
                          ENDP


                          AREA ||i.OV7725_Window_VGA_Set||, CODE, READONLY, ALIGN=1

                  OV7725_Window_VGA_Set PROC
;;;727      */
;;;728    void OV7725_Window_VGA_Set(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;729    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;730    	
;;;731    	uint8_t reg_raw,cal_temp;
;;;732    
;;;733    	/***********QVGA or VGA *************/
;;;734    	/*VGA RGB565 */
;;;735    	SCCB_WriteByte(REG_COM7,0x06); 
00000c  2106              MOVS     r1,#6
00000e  2012              MOVS     r0,#0x12
000010  f7fffffe          BL       SCCB_WriteByte
;;;736    
;;;737    	/***************HSTART*********************/
;;;738    	//读取寄存器的原内容，HStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;739    	SCCB_ReadByte(&reg_raw,1,REG_HSTART);
000014  2217              MOVS     r2,#0x17
000016  2101              MOVS     r1,#1
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       SCCB_ReadByte
;;;740    	
;;;741    	//sx为窗口偏移，高8位存储在HSTART，低2位在HREF
;;;742    	cal_temp = (reg_raw + (sx>>2));	
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  eb0000a6          ADD      r0,r0,r6,ASR #2
000026  f00008ff          AND      r8,r0,#0xff
;;;743    	SCCB_WriteByte(REG_HSTART,cal_temp ); 
00002a  4641              MOV      r1,r8
00002c  2017              MOVS     r0,#0x17
00002e  f7fffffe          BL       SCCB_WriteByte
;;;744    	
;;;745    	/***************HSIZE*********************/
;;;746    	//水平宽度，高8位存储在HSIZE，低2位存储在HREF
;;;747    	SCCB_WriteByte(REG_HSIZE,width>>2);//HSIZE左移两位 320 
000032  f3c40187          UBFX     r1,r4,#2,#8
000036  2018              MOVS     r0,#0x18
000038  f7fffffe          BL       SCCB_WriteByte
;;;748    	
;;;749    	
;;;750    	/***************VSTART*********************/
;;;751    	//读取寄存器的原内容，VStart包含偏移值，在原始偏移植的基础上加上窗口偏移	
;;;752    	SCCB_ReadByte(&reg_raw,1,REG_VSTRT);	
00003c  2219              MOVS     r2,#0x19
00003e  2101              MOVS     r1,#1
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       SCCB_ReadByte
;;;753    	//sy为窗口偏移，高8位存储在HSTART，低1位在HREF
;;;754    	cal_temp = (reg_raw + (sy>>1));	
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  eb000067          ADD      r0,r0,r7,ASR #1
00004e  f00008ff          AND      r8,r0,#0xff
;;;755    	
;;;756    	SCCB_WriteByte(REG_VSTRT,cal_temp);
000052  4641              MOV      r1,r8
000054  2019              MOVS     r0,#0x19
000056  f7fffffe          BL       SCCB_WriteByte
;;;757    	
;;;758    	/***************VSIZE*********************/
;;;759    	//垂直高度，高8位存储在VSIZE，低1位存储在HREF
;;;760    	SCCB_WriteByte(REG_VSIZE,height>>1);//VSIZE左移一位 240
00005a  f3c50147          UBFX     r1,r5,#1,#8
00005e  201a              MOVS     r0,#0x1a
000060  f7fffffe          BL       SCCB_WriteByte
;;;761    	
;;;762    	/***************VSTART*********************/
;;;763    	//读取寄存器的原内容	
;;;764    	SCCB_ReadByte(&reg_raw,1,REG_HREF);	
000064  2232              MOVS     r2,#0x32
000066  2101              MOVS     r1,#1
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       SCCB_ReadByte
;;;765    	//把水平宽度的低2位、垂直高度的低1位，水平偏移的低2位，垂直偏移的低1位的配置添加到HREF
;;;766    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2)|((sx&0x03)<<4)|((sy&0x01)<<6));	
00006e  f0040003          AND      r0,r4,#3
000072  f89d1000          LDRB     r1,[sp,#0]
000076  4308              ORRS     r0,r0,r1
000078  f0050101          AND      r1,r5,#1
00007c  ea400081          ORR      r0,r0,r1,LSL #2
000080  f0060103          AND      r1,r6,#3
000084  ea401001          ORR      r0,r0,r1,LSL #4
000088  f0070101          AND      r1,r7,#1
00008c  ea401881          ORR      r8,r0,r1,LSL #6
;;;767    	
;;;768    	SCCB_WriteByte(REG_VSTRT,cal_temp);
000090  4641              MOV      r1,r8
000092  2019              MOVS     r0,#0x19
000094  f7fffffe          BL       SCCB_WriteByte
;;;769    	
;;;770    	/***************HOUTSIZIE /VOUTSIZE*********************/
;;;771    	SCCB_WriteByte(REG_HOutSize,width>>2);
000098  f3c40187          UBFX     r1,r4,#2,#8
00009c  2029              MOVS     r0,#0x29
00009e  f7fffffe          BL       SCCB_WriteByte
;;;772    	SCCB_WriteByte(REG_VOutSize,height>>1);
0000a2  f3c50147          UBFX     r1,r5,#1,#8
0000a6  202c              MOVS     r0,#0x2c
0000a8  f7fffffe          BL       SCCB_WriteByte
;;;773    	
;;;774    	//读取寄存器的原内容	
;;;775    	SCCB_ReadByte(&reg_raw,1,REG_EXHCH);	
0000ac  222a              MOVS     r2,#0x2a
0000ae  2101              MOVS     r1,#1
0000b0  4668              MOV      r0,sp
0000b2  f7fffffe          BL       SCCB_ReadByte
;;;776    	
;;;777    	cal_temp = (reg_raw |(width&0x03)|((height&0x01)<<2));	
0000b6  f0040003          AND      r0,r4,#3
0000ba  f89d1000          LDRB     r1,[sp,#0]
0000be  4308              ORRS     r0,r0,r1
0000c0  f0050101          AND      r1,r5,#1
0000c4  ea400881          ORR      r8,r0,r1,LSL #2
;;;778    
;;;779    	SCCB_WriteByte(REG_EXHCH,cal_temp);	
0000c8  4641              MOV      r1,r8
0000ca  202a              MOVS     r0,#0x2a
0000cc  f7fffffe          BL       SCCB_WriteByte
;;;780    }
0000d0  e8bd83f8          POP      {r3-r9,pc}
;;;781    
                          ENDP


                          AREA ||i.VSYNC_GPIO_Config||, CODE, READONLY, ALIGN=2

                  VSYNC_GPIO_Config PROC
;;;303     ************************************************/
;;;304    static void VSYNC_GPIO_Config(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;305    {
;;;306    		GPIO_InitTypeDef GPIO_InitStructure;
;;;307    	  EXTI_InitTypeDef EXTI_InitStructure;
;;;308    		NVIC_InitTypeDef NVIC_InitStructure;
;;;309    	
;;;310    		/*初始化时钟，注意中断要开AFIO*/
;;;311    	  RCC_APB2PeriphClockCmd ( RCC_APB2Periph_AFIO|OV7725_VSYNC_GPIO_CLK, ENABLE );	 
000002  2101              MOVS     r1,#1
000004  2041              MOVS     r0,#0x41
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;312        
;;;313    		/*初始化引脚*/
;;;314    		GPIO_InitStructure.GPIO_Pin =  OV7725_VSYNC_GPIO_PIN;
00000a  2008              MOVS     r0,#8
00000c  f8ad000c          STRH     r0,[sp,#0xc]
;;;315        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000010  2004              MOVS     r0,#4
000012  f88d000f          STRB     r0,[sp,#0xf]
;;;316        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d000e          STRB     r0,[sp,#0xe]
;;;317    	  GPIO_Init(OV7725_VSYNC_GPIO_PORT, &GPIO_InitStructure);
00001c  a903              ADD      r1,sp,#0xc
00001e  4816              LDR      r0,|L16.120|
000020  f7fffffe          BL       GPIO_Init
;;;318    
;;;319    		/*配置中断*/
;;;320        GPIO_EXTILineConfig(OV7725_VSYNC_EXTI_SOURCE_PORT, OV7725_VSYNC_EXTI_SOURCE_PIN);
000024  2103              MOVS     r1,#3
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       GPIO_EXTILineConfig
;;;321        EXTI_InitStructure.EXTI_Line = OV7725_VSYNC_EXTI_LINE;
00002c  2008              MOVS     r0,#8
00002e  9001              STR      r0,[sp,#4]
;;;322        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
000030  2000              MOVS     r0,#0
000032  f88d0008          STRB     r0,[sp,#8]
;;;323    		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling ; 
000036  200c              MOVS     r0,#0xc
000038  f88d0009          STRB     r0,[sp,#9]
;;;324        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
00003c  2001              MOVS     r0,#1
00003e  f88d000a          STRB     r0,[sp,#0xa]
;;;325        EXTI_Init(&EXTI_InitStructure);
000042  a801              ADD      r0,sp,#4
000044  f7fffffe          BL       EXTI_Init
;;;326        EXTI_GenerateSWInterrupt(OV7725_VSYNC_EXTI_LINE);		
000048  2008              MOVS     r0,#8
00004a  f7fffffe          BL       EXTI_GenerateSWInterrupt
;;;327    	
;;;328    		/*配置优先级*/
;;;329        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
00004e  f44f60c0          MOV      r0,#0x600
000052  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;330        NVIC_InitStructure.NVIC_IRQChannel = OV7725_VSYNC_EXTI_IRQ;
000056  2009              MOVS     r0,#9
000058  f88d0000          STRB     r0,[sp,#0]
;;;331        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00005c  2000              MOVS     r0,#0
00005e  f88d0001          STRB     r0,[sp,#1]
;;;332        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
000062  2003              MOVS     r0,#3
000064  f88d0002          STRB     r0,[sp,#2]
;;;333        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000068  2001              MOVS     r0,#1
00006a  f88d0003          STRB     r0,[sp,#3]
;;;334        NVIC_Init(&NVIC_InitStructure);
00006e  4668              MOV      r0,sp
000070  f7fffffe          BL       NVIC_Init
;;;335    }
000074  bd1f              POP      {r0-r4,pc}
;;;336    
                          ENDP

000076  0000              DCW      0x0000
                  |L16.120|
                          DCD      0x40011000

                          AREA ||i.camera_buff_save||, CODE, READONLY, ALIGN=2

                  camera_buff_save PROC
;;;806    }
;;;807    void camera_buff_save(u16 *camera_buf,u16 length, u16 width)
000000  b570              PUSH     {r4-r6,lr}
;;;808    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;809    	u32 i;
;;;810    	u16 camera_data;
;;;811    	for(i=0;i<camera_HEIGHT*camera_WIDTH;i++)
000006  2000              MOVS     r0,#0
000008  e016              B        |L17.56|
                  |L17.10|
;;;812    	{
;;;813    		READ_FIFO_PIXEL(camera_data);		/* 从FIFO读出一个rgb565像素到Camera_Data变量 */
00000a  bf00              NOP      
00000c  2100              MOVS     r1,#0
00000e  2520              MOVS     r5,#0x20
000010  4e0b              LDR      r6,|L17.64|
000012  6175              STR      r5,[r6,#0x14]
000014  4d0b              LDR      r5,|L17.68|
000016  682d              LDR      r5,[r5,#0]
000018  f405417f          AND      r1,r5,#0xff00
00001c  2520              MOVS     r5,#0x20
00001e  6135              STR      r5,[r6,#0x10]
000020  6175              STR      r5,[r6,#0x14]
000022  4d08              LDR      r5,|L17.68|
000024  682d              LDR      r5,[r5,#0]
000026  f3c52507          UBFX     r5,r5,#8,#8
00002a  4329              ORRS     r1,r1,r5
00002c  2520              MOVS     r5,#0x20
00002e  6135              STR      r5,[r6,#0x10]
000030  bf00              NOP      
;;;814    		camera_buf[i]=camera_data;
000032  f8231010          STRH     r1,[r3,r0,LSL #1]
000036  1c40              ADDS     r0,r0,#1              ;811
                  |L17.56|
000038  f5b03fff          CMP      r0,#0x1fe00           ;811
00003c  d3e5              BCC      |L17.10|
;;;815    	}
;;;816    	
;;;817    }
00003e  bd70              POP      {r4-r6,pc}
;;;818    /*
                          ENDP

                  |L17.64|
                          DCD      0x40011000
                  |L17.68|
                          DCD      0x40010c08

                          AREA ||.data||, DATA, ALIGN=1

                  cam_mode_test
000000  0000              DCB      0x00,0x00
000002  0000              DCW      0x0000
000004  00000140          DCW      0x0000,0x0140
000008  00f00000          DCW      0x00f0,0x0000
00000c  0000              DCW      0x0000
00000e  0300              DCB      0x03,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  cam_mode
000014  0100              DCB      0x01,0x00
000016  0000              DCW      0x0000
000018  000001e0          DCW      0x0000,0x01e0
00001c  01100000          DCW      0x0110,0x0000
000020  0000              DCW      0x0000
000022  0300              DCB      0x03,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
                  Sensor_Config
000028  11001246          DCB      0x11,0x00,0x12,0x46
00002c  173f1850          DCB      0x17,0x3f,0x18,0x50
000030  19031a78          DCB      0x19,0x03,0x1a,0x78
000034  32002950          DCB      0x32,0x00,0x29,0x50
000038  2c782a00          DCB      0x2c,0x78,0x2a,0x00
00003c  427f4d09          DCB      0x42,0x7f,0x4d,0x09
000040  63e064ff          DCB      0x63,0xe0,0x64,0xff
000044  65206600          DCB      0x65,0x20,0x66,0x00
000048  670013f0          DCB      0x67,0x00,0x13,0xf0
00004c  0d810fc5          DCB      0x0d,0x81,0x0f,0xc5
000050  142122ff          DCB      0x14,0x21,0x22,0xff
000054  23012434          DCB      0x23,0x01,0x24,0x34
000058  253c26a1          DCB      0x25,0x3c,0x26,0xa1
00005c  2b006baa          DCB      0x2b,0x00,0x6b,0xaa
000060  13ff695d          DCB      0x13,0xff,0x69,0x5d
000064  900a9101          DCB      0x90,0x0a,0x91,0x01
000068  92019301          DCB      0x92,0x01,0x93,0x01
00006c  945f9553          DCB      0x94,0x5f,0x95,0x53
000070  9611971a          DCB      0x96,0x11,0x97,0x1a
000074  983d995a          DCB      0x98,0x3d,0x99,0x5a
000078  9a1e9b00          DCB      0x9a,0x1e,0x9b,0x00
00007c  9c25a765          DCB      0x9c,0x25,0xa7,0x65
000080  a8659e81          DCB      0xa8,0x65,0x9e,0x81
000084  a6067e0c          DCB      0xa6,0x06,0x7e,0x0c
000088  7f16802a          DCB      0x7f,0x16,0x80,0x2a
00008c  814e8261          DCB      0x81,0x4e,0x82,0x61
000090  836f847b          DCB      0x83,0x6f,0x84,0x7b
000094  8586868e          DCB      0x85,0x86,0x86,0x8e
000098  879788a4          DCB      0x87,0x97,0x88,0xa4
00009c  89af8ac5          DCB      0x89,0xaf,0x8a,0xc5
0000a0  8bd78ce8          DCB      0x8b,0xd7,0x8c,0xe8
0000a4  8d20a980          DCB      0x8d,0x20,0xa9,0x80
0000a8  aa80acff          DCB      0xaa,0x80,0xac,0xff
0000ac  33002299          DCB      0x33,0x00,0x22,0x99
0000b0  23034a00          DCB      0x23,0x03,0x4a,0x00
0000b4  49134708          DCB      0x49,0x13,0x47,0x08
0000b8  4b144c17          DCB      0x4b,0x14,0x4c,0x17
0000bc  46050cd0          DCB      0x46,0x05,0x0c,0xd0
0000c0  0ef5              DCB      0x0e,0xf5
                  OV7725_REG_NUM
0000c2  4d                DCB      0x4d
                  Ov7725_vsync
0000c3  00                DCB      0x00
