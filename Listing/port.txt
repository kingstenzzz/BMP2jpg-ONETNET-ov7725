; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\port.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\port.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\port.crf ..\..\Freee-RTOS\portable\RVDS\ARM_CM3\port.c]
                          THUMB

                          AREA ||i.prvTaskExitError||, CODE, READONLY, ALIGN=1

                  prvTaskExitError PROC
;;;235    
;;;236    static void prvTaskExitError( void )
000000  bf00              NOP      
000002  2005              MOVS     r0,#5
000004  f3808811          MSR      BASEPRI,r0
000008  f3bf8f4f          DSB      
00000c  f3bf8f6f          ISB      
000010  bf00              NOP      
;;;237    {
;;;238    	/* A function that implements a task must not exit or attempt to return to
;;;239    	its caller as there is nothing to return to.  If a task wants to exit it
;;;240    	should instead call vTaskDelete( NULL ).
;;;241    
;;;242    	Artificially force an assert() to be triggered if configASSERT() is
;;;243    	defined, then stop here so application writers can catch the error. */
;;;244    	configASSERT( uxCriticalNesting == ~0UL );
;;;245    	portDISABLE_INTERRUPTS();
;;;246    	for( ;; );
000012  bf00              NOP      
                  |L1.20|
000014  e7fe              B        |L1.20|
;;;247    }
;;;248    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.pxPortInitialiseStack||, CODE, READONLY, ALIGN=2

                  pxPortInitialiseStack PROC
;;;216     */
;;;217    StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
000000  1f00              SUBS     r0,r0,#4
;;;218    {
;;;219    	/* Simulate the stack frame as it would be created by a context switch
;;;220    	interrupt. */
;;;221    	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
;;;222    	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
000002  f04f7380          MOV      r3,#0x1000000
000006  6003              STR      r3,[r0,#0]
;;;223    	pxTopOfStack--;
000008  1f00              SUBS     r0,r0,#4
;;;224    	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
00000a  f0210301          BIC      r3,r1,#1
00000e  6003              STR      r3,[r0,#0]
;;;225    	pxTopOfStack--;
000010  1f00              SUBS     r0,r0,#4
;;;226    	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
000012  4b03              LDR      r3,|L2.32|
000014  6003              STR      r3,[r0,#0]
;;;227    
;;;228    	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
000016  3814              SUBS     r0,r0,#0x14
;;;229    	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
000018  6002              STR      r2,[r0,#0]
;;;230    	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
00001a  3820              SUBS     r0,r0,#0x20
;;;231    
;;;232    	return pxTopOfStack;
;;;233    }
00001c  4770              BX       lr
;;;234    /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      prvTaskExitError

                          AREA ||i.vPortEndScheduler||, CODE, READONLY, ALIGN=1

                  vPortEndScheduler PROC
;;;357    
;;;358    void vPortEndScheduler( void )
000000  4770              BX       lr
;;;359    {
;;;360    	/* Not implemented in ports where there is nothing to return to.
;;;361    	Artificially force an assert. */
;;;362    	configASSERT( uxCriticalNesting == 1000UL );
;;;363    }
;;;364    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vPortEnterCritical||, CODE, READONLY, ALIGN=2

                  vPortEnterCritical PROC
;;;365    
;;;366    void vPortEnterCritical( void )
000000  bf00              NOP      
000002  2005              MOVS     r0,#5
000004  f3808811          MSR      BASEPRI,r0
000008  f3bf8f4f          DSB      
00000c  f3bf8f6f          ISB      
000010  bf00              NOP      
;;;367    {
;;;368    	portDISABLE_INTERRUPTS();
;;;369    	uxCriticalNesting++;
000012  4803              LDR      r0,|L4.32|
000014  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000016  1c40              ADDS     r0,r0,#1
000018  4901              LDR      r1,|L4.32|
00001a  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;370    
;;;371    	/* This is not the interrupt safe version of the enter critical function so
;;;372    	assert() if it is being called from an interrupt context.  Only API
;;;373    	functions that end in "FromISR" can be used in an interrupt.  Only assert if
;;;374    	the critical nesting count is 1 to protect against recursive calls if the
;;;375    	assert function also uses a critical section. */
;;;376    	if( uxCriticalNesting == 1 )
;;;377    	{
;;;378    		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
;;;379    	}
;;;380    }
00001c  4770              BX       lr
;;;381    /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortExitCritical||, CODE, READONLY, ALIGN=2

                  vPortExitCritical PROC
;;;382    
;;;383    void vPortExitCritical( void )
000000  4806              LDR      r0,|L5.28|
;;;384    {
;;;385    	configASSERT( uxCriticalNesting );
;;;386    	uxCriticalNesting--;
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  1e40              SUBS     r0,r0,#1
000006  4905              LDR      r1,|L5.28|
000008  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;387    	if( uxCriticalNesting == 0 )
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00000e  b920              CBNZ     r0,|L5.26|
;;;388    	{
;;;389    		portENABLE_INTERRUPTS();
000010  2000              MOVS     r0,#0
000012  f3808811          MSR      BASEPRI,r0
000016  bf00              NOP      
000018  bf00              NOP      
                  |L5.26|
;;;390    	}
;;;391    }
00001a  4770              BX       lr
;;;392    /*-----------------------------------------------------------*/
                          ENDP

                  |L5.28|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortSetupTimerInterrupt||, CODE, READONLY, ALIGN=2

                  vPortSetupTimerInterrupt PROC
;;;613    
;;;614    	void vPortSetupTimerInterrupt( void )
000000  4803              LDR      r0,|L6.16|
;;;615    	{
;;;616    		/* Calculate the constants required to configure the tick interrupt. */
;;;617    		#if configUSE_TICKLESS_IDLE == 1
;;;618    		{
;;;619    			ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
;;;620    			xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
;;;621    			ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
;;;622    		}
;;;623    		#endif /* configUSE_TICKLESS_IDLE */
;;;624    
;;;625    		/* Configure SysTick to interrupt at the requested rate. */
;;;626    		portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
000002  f04f21e0          MOV      r1,#0xe000e000
000006  6148              STR      r0,[r1,#0x14]
;;;627    		portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
000008  2007              MOVS     r0,#7
00000a  6108              STR      r0,[r1,#0x10]
;;;628    	}
00000c  4770              BX       lr
;;;629    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x0001193f

                          AREA ||i.xPortStartScheduler||, CODE, READONLY, ALIGN=2

                  xPortStartScheduler PROC
;;;292     */
;;;293    BaseType_t xPortStartScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;294    {
;;;295    	#if( configASSERT_DEFINED == 1 )
;;;296    	{
;;;297    		volatile uint32_t ulOriginalPriority;
;;;298    		volatile uint8_t * const pucFirstUserPriorityRegister = ( uint8_t * ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
;;;299    		volatile uint8_t ucMaxPriorityValue;
;;;300    
;;;301    		/* Determine the maximum priority from which ISR safe FreeRTOS API
;;;302    		functions can be called.  ISR safe functions are those that end in
;;;303    		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
;;;304    		ensure interrupt entry is as fast and simple as possible.
;;;305    
;;;306    		Save the interrupt priority value that is about to be clobbered. */
;;;307    		ulOriginalPriority = *pucFirstUserPriorityRegister;
;;;308    
;;;309    		/* Determine the number of priority bits available.  First write to all
;;;310    		possible bits. */
;;;311    		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
;;;312    
;;;313    		/* Read the value back to see how many bits stuck. */
;;;314    		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
;;;315    
;;;316    		/* Use the same mask on the maximum system call priority. */
;;;317    		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
;;;318    
;;;319    		/* Calculate the maximum acceptable priority group value for the number
;;;320    		of bits read back. */
;;;321    		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
;;;322    		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
;;;323    		{
;;;324    			ulMaxPRIGROUPValue--;
;;;325    			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
;;;326    		}
;;;327    
;;;328    		/* Shift the priority group value back to its position within the AIRCR
;;;329    		register. */
;;;330    		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
;;;331    		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
;;;332    
;;;333    		/* Restore the clobbered interrupt priority register to its original
;;;334    		value. */
;;;335    		*pucFirstUserPriorityRegister = ulOriginalPriority;
;;;336    	}
;;;337    	#endif /* conifgASSERT_DEFINED */
;;;338    
;;;339    	/* Make PendSV and SysTick the lowest priority interrupts. */
;;;340    	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
000002  480a              LDR      r0,|L7.44|
000004  6800              LDR      r0,[r0,#0]
000006  f4402070          ORR      r0,r0,#0xf0000
00000a  4908              LDR      r1,|L7.44|
00000c  6008              STR      r0,[r1,#0]
;;;341    	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  f0406070          ORR      r0,r0,#0xf000000
000016  6008              STR      r0,[r1,#0]
;;;342    
;;;343    	/* Start the timer that generates the tick ISR.  Interrupts are disabled
;;;344    	here already. */
;;;345    	vPortSetupTimerInterrupt();
000018  f7fffffe          BL       vPortSetupTimerInterrupt
;;;346    
;;;347    	/* Initialise the critical nesting count ready for the first task. */
;;;348    	uxCriticalNesting = 0;
00001c  2000              MOVS     r0,#0
00001e  4904              LDR      r1,|L7.48|
000020  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;349    
;;;350    	/* Start the first task. */
;;;351    	prvStartFirstTask();
000022  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
;;;352    
;;;353    	/* Should not get here! */
;;;354    	return 0;
000026  2000              MOVS     r0,#0
;;;355    }
000028  bd10              POP      {r4,pc}
;;;356    /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0xe000ed20
                  |L7.48|
                          DCD      uxCriticalNesting

                          AREA ||i.xPortSysTickHandler||, CODE, READONLY, ALIGN=2

                  xPortSysTickHandler PROC
;;;430    
;;;431    void xPortSysTickHandler( void )
000000  b510              PUSH     {r4,lr}
;;;432    {
;;;433    	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
;;;434    	executes all interrupts must be unmasked.  There is therefore no need to
;;;435    	save and then restore the interrupt mask value as its value is already
;;;436    	known - therefore the slightly faster vPortRaiseBASEPRI() function is used
;;;437    	in place of portSET_INTERRUPT_MASK_FROM_ISR(). */
;;;438    	vPortRaiseBASEPRI();
000002  bf00              NOP      
000004  2005              MOVS     r0,#5
000006  f3808811          MSR      BASEPRI,r0
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
000012  bf00              NOP      
;;;439    	{
;;;440    		/* Increment the RTOS tick. */
;;;441    		if( xTaskIncrementTick() != pdFALSE )
000014  f7fffffe          BL       xTaskIncrementTick
000018  b118              CBZ      r0,|L8.34|
;;;442    		{
;;;443    			/* A context switch is required.  Context switching is performed in
;;;444    			the PendSV interrupt.  Pend the PendSV interrupt. */
;;;445    			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
00001a  f04f5080          MOV      r0,#0x10000000
00001e  4904              LDR      r1,|L8.48|
000020  6008              STR      r0,[r1,#0]
                  |L8.34|
;;;446    
;;;447    		}
;;;448    	}
;;;449    	vPortClearBASEPRIFromISR();
000022  bf00              NOP      
000024  2000              MOVS     r0,#0
000026  f3808811          MSR      BASEPRI,r0
00002a  bf00              NOP      
;;;450    }
00002c  bd10              POP      {r4,pc}
;;;451    /*-----------------------------------------------------------*/
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      0xe000ed04

                          AREA ||.data||, DATA, ALIGN=2

                  uxCriticalNesting
                          DCD      0xaaaaaaaa

;*** Start embedded assembler ***

#line 1 "..\\..\\Freee-RTOS\\portable\\RVDS\\ARM_CM3\\port.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |SVC_Handler|
#line 250
|SVC_Handler| PROC
#line 251

 PRESERVE8

 ldr r3, =pxCurrentTCB  
 ldr r1, [r3]  
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0  
 isb
 mov r0, #0
 msr basepri, r0
 orr r14, #0xd
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 267
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 268

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]

 
 msr msp, r0
 
 cpsie i
 cpsie f
 dsb
 isb
 
 svc 0
 nop
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |PendSV_Handler|
#line 394
|PendSV_Handler| PROC
#line 395

 extern uxCriticalNesting
 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb

 ldr r3, =pxCurrentTCB  
 ldr r2, [r3]

 stmdb r0!, {r4-r11}  
 str r0, [r2]  

 stmdb sp!, {r3, r14}
 mov r0, #5
 msr basepri, r0
 dsb
 isb
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3, r14}

 ldr r1, [r3]
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0
 isb
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vPortGetIPSR|
#line 633
|vPortGetIPSR| PROC
#line 634

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***
