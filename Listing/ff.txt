; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\ff.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\ff.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\ff.crf ..\..\User\FATFS\ff.c]
                          THUMB

                          AREA ||i.Fatfs_Init||, CODE, READONLY, ALIGN=2

                  Fatfs_Init PROC
;;;4678   
;;;4679   void Fatfs_Init()
000000  b510              PUSH     {r4,lr}
;;;4680   {
000002  f5ad5d82          SUB      sp,sp,#0x1040
;;;4681   	FATFS fs;													/* FatFs文件系统对象 */
;;;4682     FRESULT res_sd;                /* 文件操作结果 */
;;;4683   	res_sd = f_mount(&fs,"0:",1);	
000006  2201              MOVS     r2,#1
000008  a106              ADR      r1,|L1.36|
00000a  a804              ADD      r0,sp,#0x10
00000c  f7fffffe          BL       f_mount
000010  4604              MOV      r4,r0
;;;4684   	while(res_sd != FR_OK)
000012  e002              B        |L1.26|
                  |L1.20|
;;;4685   	{
;;;4686   		printf("\r\n请插入SD卡。\r\n");
000014  a004              ADR      r0,|L1.40|
000016  f7fffffe          BL       __2printf
                  |L1.26|
00001a  2c00              CMP      r4,#0                 ;4684
00001c  d1fa              BNE      |L1.20|
;;;4687   	}
;;;4688   	 
;;;4689   
;;;4690   }
00001e  f50d5d82          ADD      sp,sp,#0x1040
000022  bd10              POP      {r4,pc}
;;;4691   
                          ENDP

                  |L1.36|
000024  303a00            DCB      "0:",0
000027  00                DCB      0
                  |L1.40|
000028  0d0ac7eb          DCB      "\r\n",199,235,178,229,200,235,"SD",191,168,161,163,"\r\n"
00002c  b2e5c8eb
000030  5344bfa8
000034  a1a30d0a
000038  00                DCB      0
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;2176   static
;;;2177   BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;2178   	FATFS* fs,	/* File system object */
;;;2179   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2180   )
;;;2181   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2182   	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
000006  2000              MOVS     r0,#0
000008  7120              STRB     r0,[r4,#4]
00000a  1e40              SUBS     r0,r0,#1
00000c  62e0              STR      r0,[r4,#0x2c]
;;;2183   	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       move_window
000016  b108              CBZ      r0,|L2.28|
;;;2184   		return 3;
000018  2003              MOVS     r0,#3
                  |L2.26|
;;;2185   
;;;2186   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
;;;2187   		return 2;
;;;2188   
;;;2189   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
;;;2190   		return 0;
;;;2191   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2192   		return 0;
;;;2193   
;;;2194   	return 1;
;;;2195   }
00001a  bd70              POP      {r4-r6,pc}
                  |L2.28|
00001c  f894122e          LDRB     r1,[r4,#0x22e]        ;2186
000020  f894022f          LDRB     r0,[r4,#0x22f]        ;2186
000024  ea412000          ORR      r0,r1,r0,LSL #8       ;2186
000028  f64a2155          MOV      r1,#0xaa55            ;2186
00002c  4288              CMP      r0,r1                 ;2186
00002e  d001              BEQ      |L2.52|
000030  2002              MOVS     r0,#2                 ;2187
000032  e7f2              B        |L2.26|
                  |L2.52|
000034  f8940069          LDRB     r0,[r4,#0x69]         ;2189
000038  0601              LSLS     r1,r0,#24             ;2189
00003a  f8940068          LDRB     r0,[r4,#0x68]         ;2189
00003e  ea414100          ORR      r1,r1,r0,LSL #16      ;2189
000042  f8940067          LDRB     r0,[r4,#0x67]         ;2189
000046  ea412000          ORR      r0,r1,r0,LSL #8       ;2189
00004a  f8941066          LDRB     r1,[r4,#0x66]         ;2189
00004e  4308              ORRS     r0,r0,r1              ;2189
000050  f020407f          BIC      r0,r0,#0xff000000     ;2189
000054  490d              LDR      r1,|L2.140|
000056  4288              CMP      r0,r1                 ;2189
000058  d101              BNE      |L2.94|
00005a  2000              MOVS     r0,#0                 ;2190
00005c  e7dd              B        |L2.26|
                  |L2.94|
00005e  f8940085          LDRB     r0,[r4,#0x85]         ;2191
000062  0601              LSLS     r1,r0,#24             ;2191
000064  f8940084          LDRB     r0,[r4,#0x84]         ;2191
000068  ea414100          ORR      r1,r1,r0,LSL #16      ;2191
00006c  f8940083          LDRB     r0,[r4,#0x83]         ;2191
000070  ea412000          ORR      r0,r1,r0,LSL #8       ;2191
000074  f8941082          LDRB     r1,[r4,#0x82]         ;2191
000078  4308              ORRS     r0,r0,r1              ;2191
00007a  f020407f          BIC      r0,r0,#0xff000000     ;2191
00007e  4903              LDR      r1,|L2.140|
000080  4288              CMP      r0,r1                 ;2191
000082  d101              BNE      |L2.136|
000084  2000              MOVS     r0,#0                 ;2192
000086  e7c8              B        |L2.26|
                  |L2.136|
000088  2001              MOVS     r0,#1                 ;2194
00008a  e7c6              B        |L2.26|
;;;2196   
                          ENDP

                  |L2.140|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;544    static
;;;545    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;546    	while (*str && *str != chr) str++;
000002  e000              B        |L3.6|
                  |L3.4|
000004  1c52              ADDS     r2,r2,#1
                  |L3.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b110              CBZ      r0,|L3.16|
00000a  7810              LDRB     r0,[r2,#0]
00000c  4288              CMP      r0,r1
00000e  d1f9              BNE      |L3.4|
                  |L3.16|
;;;547    	return *str;
000010  7810              LDRB     r0,[r2,#0]
;;;548    }
000012  4770              BX       lr
;;;549    
                          ENDP


                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;801    
;;;802    DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
000000  4602              MOV      r2,r0
;;;803    	FATFS* fs,		/* File system object */
;;;804    	DWORD clst		/* Cluster# to be converted */
;;;805    )
;;;806    {
;;;807    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;808    	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
000004  6950              LDR      r0,[r2,#0x14]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L4.16|
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;809    	return clst * fs->csize + fs->database;
;;;810    }
00000e  4770              BX       lr
                  |L4.16|
000010  7893              LDRB     r3,[r2,#2]            ;809
000012  6a90              LDR      r0,[r2,#0x28]         ;809
000014  fb010003          MLA      r0,r1,r3,r0           ;809
000018  e7f9              B        |L4.14|
;;;811    
                          ENDP


                          AREA ||i.cmp_lfn||, CODE, READONLY, ALIGN=2

                  cmp_lfn PROC
;;;1275   static
;;;1276   int cmp_lfn (			/* 1:matched, 0:not matched */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1277   	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer to be compared */
;;;1278   	BYTE* dir			/* Pointer to the directory entry containing the part of LFN */
;;;1279   )
;;;1280   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;1281   	UINT i, s;
;;;1282   	WCHAR wc, uc;
;;;1283   
;;;1284   
;;;1285   	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
000008  7ea1              LDRB     r1,[r4,#0x1a]
00000a  7ee0              LDRB     r0,[r4,#0x1b]
00000c  ea412000          ORR      r0,r1,r0,LSL #8
000010  b110              CBZ      r0,|L5.24|
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;1286   
;;;1287   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
;;;1288   
;;;1289   	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
;;;1290   		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
;;;1291   		if (wc) {
;;;1292   			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
;;;1293   				return 0;					/* Not matched */
;;;1294   			wc = uc;
;;;1295   		} else {
;;;1296   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1297   		}
;;;1298   	}
;;;1299   
;;;1300   	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
;;;1301   		return 0;
;;;1302   
;;;1303   	return 1;		/* The part of LFN matched */
;;;1304   }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L5.24|
000018  7820              LDRB     r0,[r4,#0]            ;1287
00001a  f000003f          AND      r0,r0,#0x3f           ;1287
00001e  1e40              SUBS     r0,r0,#1              ;1287
000020  eb000180          ADD      r1,r0,r0,LSL #2       ;1287
000024  eb0106c0          ADD      r6,r1,r0,LSL #3       ;1287
000028  f04f0901          MOV      r9,#1                 ;1289
00002c  2500              MOVS     r5,#0                 ;1289
00002e  e024              B        |L5.122|
                  |L5.48|
000030  481a              LDR      r0,|L5.156|
000032  5d40              LDRB     r0,[r0,r5]            ;1290
000034  5c20              LDRB     r0,[r4,r0]            ;1290
000036  4919              LDR      r1,|L5.156|
000038  5d49              LDRB     r1,[r1,r5]            ;1290
00003a  4421              ADD      r1,r1,r4              ;1290
00003c  7849              LDRB     r1,[r1,#1]            ;1290
00003e  ea402701          ORR      r7,r0,r1,LSL #8       ;1290
000042  f1b90f00          CMP      r9,#0                 ;1291
000046  d011              BEQ      |L5.108|
000048  2eff              CMP      r6,#0xff              ;1292
00004a  d20b              BCS      |L5.100|
00004c  4638              MOV      r0,r7                 ;1292
00004e  f7fffffe          BL       ff_wtoupper
000052  4682              MOV      r10,r0                ;1292
000054  4631              MOV      r1,r6                 ;1292
000056  1c76              ADDS     r6,r6,#1              ;1292
000058  f8380011          LDRH     r0,[r8,r1,LSL #1]     ;1292
00005c  f7fffffe          BL       ff_wtoupper
000060  4582              CMP      r10,r0                ;1292
000062  d001              BEQ      |L5.104|
                  |L5.100|
000064  2000              MOVS     r0,#0                 ;1293
000066  e7d5              B        |L5.20|
                  |L5.104|
000068  46b9              MOV      r9,r7                 ;1294
00006a  e005              B        |L5.120|
                  |L5.108|
00006c  f64f70ff          MOV      r0,#0xffff            ;1296
000070  4287              CMP      r7,r0                 ;1296
000072  d001              BEQ      |L5.120|
000074  2000              MOVS     r0,#0                 ;1296
000076  e7cd              B        |L5.20|
                  |L5.120|
000078  1c6d              ADDS     r5,r5,#1              ;1289
                  |L5.122|
00007a  2d0d              CMP      r5,#0xd               ;1289
00007c  d3d8              BCC      |L5.48|
00007e  7820              LDRB     r0,[r4,#0]            ;1300
000080  f0000040          AND      r0,r0,#0x40           ;1300
000084  b138              CBZ      r0,|L5.150|
000086  f1b90f00          CMP      r9,#0                 ;1300
00008a  d004              BEQ      |L5.150|
00008c  f8380016          LDRH     r0,[r8,r6,LSL #1]     ;1300
000090  b108              CBZ      r0,|L5.150|
000092  2000              MOVS     r0,#0                 ;1301
000094  e7be              B        |L5.20|
                  |L5.150|
000096  2001              MOVS     r0,#1                 ;1303
000098  e7bc              B        |L5.20|
;;;1305   
                          ENDP

00009a  0000              DCW      0x0000
                  |L5.156|
                          DCD      LfnOfs

                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;991    static
;;;992    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;993    	FATFS* fs,			/* File system object */
;;;994    	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
;;;995    )
;;;996    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;997    	DWORD cs, ncl, scl;
;;;998    	FRESULT res;
;;;999    
;;;1000   
;;;1001   	if (clst == 0) {		/* Create a new chain */
000008  f1b90f00          CMP      r9,#0
00000c  d106              BNE      |L6.28|
;;;1002   		scl = fs->last_clust;			/* Get suggested start point */
00000e  68e7              LDR      r7,[r4,#0xc]
;;;1003   		if (!scl || scl >= fs->n_fatent) scl = 1;
000010  b117              CBZ      r7,|L6.24|
000012  6960              LDR      r0,[r4,#0x14]
000014  42b8              CMP      r0,r7
000016  d815              BHI      |L6.68|
                  |L6.24|
000018  2701              MOVS     r7,#1
00001a  e013              B        |L6.68|
                  |L6.28|
;;;1004   	}
;;;1005   	else {					/* Stretch the current chain */
;;;1006   		cs = get_fat(fs, clst);			/* Check the cluster status */
00001c  4649              MOV      r1,r9
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       get_fat
000024  4606              MOV      r6,r0
;;;1007   		if (cs < 2) return 1;			/* Invalid value */
000026  2e02              CMP      r6,#2
000028  d202              BCS      |L6.48|
00002a  2001              MOVS     r0,#1
                  |L6.44|
;;;1008   		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
;;;1009   		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;1010   		scl = clst;
;;;1011   	}
;;;1012   
;;;1013   	ncl = scl;				/* Start cluster */
;;;1014   	for (;;) {
;;;1015   		ncl++;							/* Next cluster */
;;;1016   		if (ncl >= fs->n_fatent) {		/* Check wrap around */
;;;1017   			ncl = 2;
;;;1018   			if (ncl > scl) return 0;	/* No free cluster */
;;;1019   		}
;;;1020   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1021   		if (cs == 0) break;				/* Found a free cluster */
;;;1022   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1023   			return cs;
;;;1024   		if (ncl == scl) return 0;		/* No free cluster */
;;;1025   	}
;;;1026   
;;;1027   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1028   	if (res == FR_OK && clst != 0) {
;;;1029   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1030   	}
;;;1031   	if (res == FR_OK) {
;;;1032   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1033   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1034   			fs->free_clust--;
;;;1035   			fs->fsi_flag |= 1;
;;;1036   		}
;;;1037   	} else {
;;;1038   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1039   	}
;;;1040   
;;;1041   	return ncl;		/* Return new cluster number or error code */
;;;1042   }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L6.48|
000030  1c70              ADDS     r0,r6,#1              ;1008
000032  b908              CBNZ     r0,|L6.56|
000034  4630              MOV      r0,r6                 ;1008
000036  e7f9              B        |L6.44|
                  |L6.56|
000038  6960              LDR      r0,[r4,#0x14]         ;1009
00003a  42b0              CMP      r0,r6                 ;1009
00003c  d901              BLS      |L6.66|
00003e  4630              MOV      r0,r6                 ;1009
000040  e7f4              B        |L6.44|
                  |L6.66|
000042  464f              MOV      r7,r9                 ;1010
                  |L6.68|
000044  463d              MOV      r5,r7                 ;1013
000046  bf00              NOP                            ;1014
                  |L6.72|
000048  1c6d              ADDS     r5,r5,#1              ;1015
00004a  6960              LDR      r0,[r4,#0x14]         ;1016
00004c  42a8              CMP      r0,r5                 ;1016
00004e  d804              BHI      |L6.90|
000050  2502              MOVS     r5,#2                 ;1017
000052  42bd              CMP      r5,r7                 ;1018
000054  d901              BLS      |L6.90|
000056  2000              MOVS     r0,#0                 ;1018
000058  e7e8              B        |L6.44|
                  |L6.90|
00005a  4629              MOV      r1,r5                 ;1020
00005c  4620              MOV      r0,r4                 ;1020
00005e  f7fffffe          BL       get_fat
000062  4606              MOV      r6,r0                 ;1020
000064  b906              CBNZ     r6,|L6.104|
000066  e009              B        |L6.124|
                  |L6.104|
000068  1c70              ADDS     r0,r6,#1              ;1022
00006a  b108              CBZ      r0,|L6.112|
00006c  2e01              CMP      r6,#1                 ;1022
00006e  d101              BNE      |L6.116|
                  |L6.112|
000070  4630              MOV      r0,r6                 ;1023
000072  e7db              B        |L6.44|
                  |L6.116|
000074  42bd              CMP      r5,r7                 ;1024
000076  d1e7              BNE      |L6.72|
000078  2000              MOVS     r0,#0                 ;1024
00007a  e7d7              B        |L6.44|
                  |L6.124|
00007c  bf00              NOP                            ;1021
00007e  f06f4270          MVN      r2,#0xf0000000        ;1027
000082  4629              MOV      r1,r5                 ;1027
000084  4620              MOV      r0,r4                 ;1027
000086  f7fffffe          BL       put_fat
00008a  4680              MOV      r8,r0                 ;1027
00008c  f1b80f00          CMP      r8,#0                 ;1028
000090  d108              BNE      |L6.164|
000092  f1b90f00          CMP      r9,#0                 ;1028
000096  d005              BEQ      |L6.164|
000098  462a              MOV      r2,r5                 ;1029
00009a  4649              MOV      r1,r9                 ;1029
00009c  4620              MOV      r0,r4                 ;1029
00009e  f7fffffe          BL       put_fat
0000a2  4680              MOV      r8,r0                 ;1029
                  |L6.164|
0000a4  f1b80f00          CMP      r8,#0                 ;1031
0000a8  d10b              BNE      |L6.194|
0000aa  60e5              STR      r5,[r4,#0xc]          ;1032
0000ac  6920              LDR      r0,[r4,#0x10]         ;1033
0000ae  1c40              ADDS     r0,r0,#1              ;1033
0000b0  b178              CBZ      r0,|L6.210|
0000b2  6920              LDR      r0,[r4,#0x10]         ;1034
0000b4  1e40              SUBS     r0,r0,#1              ;1034
0000b6  6120              STR      r0,[r4,#0x10]         ;1034
0000b8  7960              LDRB     r0,[r4,#5]            ;1035
0000ba  f0400001          ORR      r0,r0,#1              ;1035
0000be  7160              STRB     r0,[r4,#5]            ;1035
0000c0  e007              B        |L6.210|
                  |L6.194|
0000c2  f1b80f01          CMP      r8,#1                 ;1038
0000c6  d102              BNE      |L6.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;1038
0000cc  e000              B        |L6.208|
                  |L6.206|
0000ce  2001              MOVS     r0,#1                 ;1038
                  |L6.208|
0000d0  4605              MOV      r5,r0                 ;1038
                  |L6.210|
0000d2  4628              MOV      r0,r5                 ;1041
0000d4  e7aa              B        |L6.44|
;;;1043   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1844   static
;;;1845   FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1846   	DIR* dp,			/* Pointer to the directory object */
;;;1847   	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
;;;1848   )
;;;1849   {
000004  b083              SUB      sp,sp,#0xc
000006  4682              MOV      r10,r0
;;;1850   #if _USE_LFN	/* LFN configuration */
;;;1851   	BYTE b, cf;
;;;1852   	WCHAR w, *lfn;
;;;1853   	UINT i, ni, si, di;
;;;1854   	const TCHAR *p;
;;;1855   
;;;1856   	/* Create LFN in Unicode */
;;;1857   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000008  9804              LDR      r0,[sp,#0x10]
00000a  f8d0b000          LDR      r11,[r0,#0]
00000e  e001              B        |L7.20|
                  |L7.16|
000010  f10b0b01          ADD      r11,r11,#1
                  |L7.20|
000014  f89b0000          LDRB     r0,[r11,#0]
000018  282f              CMP      r0,#0x2f
00001a  d0f9              BEQ      |L7.16|
00001c  f89b0000          LDRB     r0,[r11,#0]
000020  285c              CMP      r0,#0x5c
000022  d0f5              BEQ      |L7.16|
;;;1858   	lfn = dp->lfn;
000024  f8da901c          LDR      r9,[r10,#0x1c]
;;;1859   	si = di = 0;
000028  2500              MOVS     r5,#0
00002a  462e              MOV      r6,r5
;;;1860   	for (;;) {
00002c  bf00              NOP      
                  |L7.46|
;;;1861   		w = p[si++];					/* Get a character */
00002e  4630              MOV      r0,r6
000030  1c76              ADDS     r6,r6,#1
000032  f81b4000          LDRB     r4,[r11,r0]
;;;1862   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
000036  2c20              CMP      r4,#0x20
000038  db03              BLT      |L7.66|
00003a  2c2f              CMP      r4,#0x2f
00003c  d001              BEQ      |L7.66|
00003e  2c5c              CMP      r4,#0x5c
000040  d100              BNE      |L7.68|
                  |L7.66|
000042  e01c              B        |L7.126|
                  |L7.68|
;;;1863   		if (di >= _MAX_LFN)				/* Reject too long name */
000044  2dff              CMP      r5,#0xff
000046  d303              BCC      |L7.80|
;;;1864   			return FR_INVALID_NAME;
000048  2006              MOVS     r0,#6
                  |L7.74|
;;;1865   #if !_LFN_UNICODE
;;;1866   		w &= 0xFF;
;;;1867   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1868   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1869   			w = (w << 8) + b;			/* Create a DBC */
;;;1870   			if (!IsDBCS2(b))
;;;1871   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1872   		}
;;;1873   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1874   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1875   #endif
;;;1876   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
;;;1877   			return FR_INVALID_NAME;
;;;1878   		lfn[di++] = w;					/* Store the Unicode character */
;;;1879   	}
;;;1880   	*path = &p[si];						/* Return pointer to the next segment */
;;;1881   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1882   #if _FS_RPATH
;;;1883   	if ((di == 1 && lfn[di - 1] == '.') ||
;;;1884   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot entry? */
;;;1885   		lfn[di] = 0;
;;;1886   		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
;;;1887   			dp->fn[i] = (i < di) ? '.' : ' ';
;;;1888   		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1889   		return FR_OK;
;;;1890   	}
;;;1891   #endif
;;;1892   	while (di) {						/* Snip off trailing spaces and dots if exist */
;;;1893   		w = lfn[di - 1];
;;;1894   		if (w != ' ' && w != '.') break;
;;;1895   		di--;
;;;1896   	}
;;;1897   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1898   	lfn[di] = 0;						/* LFN is created */
;;;1899   
;;;1900   	/* Create SFN in directory form */
;;;1901   	mem_set(dp->fn, ' ', 11);
;;;1902   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1903   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1904   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1905   
;;;1906   	b = i = 0; ni = 8;
;;;1907   	for (;;) {
;;;1908   		w = lfn[si++];					/* Get an LFN character */
;;;1909   		if (!w) break;					/* Break on end of the LFN */
;;;1910   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1911   			cf |= NS_LOSS | NS_LFN; continue;
;;;1912   		}
;;;1913   
;;;1914   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1915   			if (ni == 11) {				/* Long extension */
;;;1916   				cf |= NS_LOSS | NS_LFN; break;
;;;1917   			}
;;;1918   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1919   			if (si > di) break;			/* No extension */
;;;1920   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1921   			b <<= 2; continue;
;;;1922   		}
;;;1923   
;;;1924   		if (w >= 0x80) {				/* Non ASCII character */
;;;1925   #ifdef _EXCVT
;;;1926   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1927   			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
;;;1928   #else
;;;1929   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1930   #endif
;;;1931   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1932   		}
;;;1933   
;;;1934   		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
;;;1935   			if (i >= ni - 1) {
;;;1936   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1937   			}
;;;1938   			dp->fn[i++] = (BYTE)(w >> 8);
;;;1939   		} else {						/* SBC */
;;;1940   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
;;;1941   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1942   			} else {
;;;1943   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1944   					b |= 2;
;;;1945   				} else {
;;;1946   					if (IsLower(w)) {	/* ASCII small capital */
;;;1947   						b |= 1; w -= 0x20;
;;;1948   					}
;;;1949   				}
;;;1950   			}
;;;1951   		}
;;;1952   		dp->fn[i++] = (BYTE)w;
;;;1953   	}
;;;1954   
;;;1955   	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
;;;1956   
;;;1957   	if (ni == 8) b <<= 2;
;;;1958   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1959   		cf |= NS_LFN;
;;;1960   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
;;;1961   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1962   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1963   	}
;;;1964   
;;;1965   	dp->fn[NSFLAG] = cf;	/* SFN is created */
;;;1966   
;;;1967   	return FR_OK;
;;;1968   
;;;1969   
;;;1970   #else	/* Non-LFN configuration */
;;;1971   	BYTE b, c, d, *sfn;
;;;1972   	UINT ni, si, i;
;;;1973   	const char *p;
;;;1974   
;;;1975   	/* Create file name in directory form */
;;;1976   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Skip duplicated separator */
;;;1977   	sfn = dp->fn;
;;;1978   	mem_set(sfn, ' ', 11);
;;;1979   	si = i = b = 0; ni = 8;
;;;1980   #if _FS_RPATH
;;;1981   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1982   		for (;;) {
;;;1983   			c = (BYTE)p[si++];
;;;1984   			if (c != '.' || si >= 3) break;
;;;1985   			sfn[i++] = c;
;;;1986   		}
;;;1987   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1988   		*path = &p[si];									/* Return pointer to the next segment */
;;;1989   		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1990   		return FR_OK;
;;;1991   	}
;;;1992   #endif
;;;1993   	for (;;) {
;;;1994   		c = (BYTE)p[si++];
;;;1995   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
;;;1996   		if (c == '.' || i >= ni) {
;;;1997   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
;;;1998   			i = 8; ni = 11;
;;;1999   			b <<= 2; continue;
;;;2000   		}
;;;2001   		if (c >= 0x80) {				/* Extended character? */
;;;2002   			b |= 3;						/* Eliminate NT flag */
;;;2003   #ifdef _EXCVT
;;;2004   			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
;;;2005   #else
;;;2006   #if !_DF1S
;;;2007   			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
;;;2008   #endif
;;;2009   #endif
;;;2010   		}
;;;2011   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
;;;2012   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;2013   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;2014   				return FR_INVALID_NAME;
;;;2015   			sfn[i++] = c;
;;;2016   			sfn[i++] = d;
;;;2017   		} else {						/* SBC */
;;;2018   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;2019   				return FR_INVALID_NAME;
;;;2020   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;2021   				b |= 2;
;;;2022   			} else {
;;;2023   				if (IsLower(c)) {		/* ASCII small capital? */
;;;2024   					b |= 1; c -= 0x20;
;;;2025   				}
;;;2026   			}
;;;2027   			sfn[i++] = c;
;;;2028   		}
;;;2029   	}
;;;2030   	*path = &p[si];						/* Return pointer to the next segment */
;;;2031   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;2032   
;;;2033   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;2034   	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
;;;2035   
;;;2036   	if (ni == 8) b <<= 2;
;;;2037   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;2038   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;2039   
;;;2040   	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
;;;2041   
;;;2042   	return FR_OK;
;;;2043   #endif
;;;2044   }
00004a  b005              ADD      sp,sp,#0x14
00004c  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.80|
000050  b2e4              UXTB     r4,r4                 ;1866
000052  2101              MOVS     r1,#1                 ;1873
000054  4620              MOV      r0,r4                 ;1873
000056  f7fffffe          BL       ff_convert
00005a  4604              MOV      r4,r0                 ;1873
00005c  b90c              CBNZ     r4,|L7.98|
00005e  2006              MOVS     r0,#6                 ;1874
000060  e7f3              B        |L7.74|
                  |L7.98|
000062  2c80              CMP      r4,#0x80              ;1876
000064  da06              BGE      |L7.116|
000066  4621              MOV      r1,r4                 ;1876
000068  a06b              ADR      r0,|L7.536|
00006a  f7fffffe          BL       chk_chr
00006e  b108              CBZ      r0,|L7.116|
000070  2006              MOVS     r0,#6                 ;1877
000072  e7ea              B        |L7.74|
                  |L7.116|
000074  4628              MOV      r0,r5                 ;1878
000076  1c6d              ADDS     r5,r5,#1              ;1878
000078  f8294010          STRH     r4,[r9,r0,LSL #1]     ;1878
00007c  e7d7              B        |L7.46|
                  |L7.126|
00007e  bf00              NOP                            ;1862
000080  eb0b0106          ADD      r1,r11,r6             ;1880
000084  9804              LDR      r0,[sp,#0x10]         ;1880
000086  6001              STR      r1,[r0,#0]            ;1880
000088  2c20              CMP      r4,#0x20              ;1881
00008a  da01              BGE      |L7.144|
00008c  2004              MOVS     r0,#4                 ;1881
00008e  e000              B        |L7.146|
                  |L7.144|
000090  2000              MOVS     r0,#0                 ;1881
                  |L7.146|
000092  4607              MOV      r7,r0                 ;1881
000094  e008              B        |L7.168|
                  |L7.150|
000096  1e68              SUBS     r0,r5,#1              ;1893
000098  f8394010          LDRH     r4,[r9,r0,LSL #1]     ;1893
00009c  2c20              CMP      r4,#0x20              ;1894
00009e  d002              BEQ      |L7.166|
0000a0  2c2e              CMP      r4,#0x2e              ;1894
0000a2  d000              BEQ      |L7.166|
0000a4  e002              B        |L7.172|
                  |L7.166|
0000a6  1e6d              SUBS     r5,r5,#1              ;1895
                  |L7.168|
0000a8  2d00              CMP      r5,#0                 ;1892
0000aa  d1f4              BNE      |L7.150|
                  |L7.172|
0000ac  bf00              NOP                            ;1894
0000ae  b90d              CBNZ     r5,|L7.180|
0000b0  2006              MOVS     r0,#6                 ;1897
0000b2  e7ca              B        |L7.74|
                  |L7.180|
0000b4  2000              MOVS     r0,#0                 ;1898
0000b6  f8290015          STRH     r0,[r9,r5,LSL #1]     ;1898
0000ba  220b              MOVS     r2,#0xb               ;1901
0000bc  2120              MOVS     r1,#0x20              ;1901
0000be  f8da0018          LDR      r0,[r10,#0x18]        ;1901
0000c2  f7fffffe          BL       mem_set
0000c6  2600              MOVS     r6,#0                 ;1902
0000c8  e000              B        |L7.204|
                  |L7.202|
0000ca  1c76              ADDS     r6,r6,#1              ;1902
                  |L7.204|
0000cc  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1902
0000d0  2820              CMP      r0,#0x20              ;1902
0000d2  d0fa              BEQ      |L7.202|
0000d4  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1902
0000d8  282e              CMP      r0,#0x2e              ;1902
0000da  d0f6              BEQ      |L7.202|
0000dc  b10e              CBZ      r6,|L7.226|
0000de  f0470703          ORR      r7,r7,#3              ;1903
                  |L7.226|
0000e2  e000              B        |L7.230|
                  |L7.228|
0000e4  1e6d              SUBS     r5,r5,#1              ;1904
                  |L7.230|
0000e6  b125              CBZ      r5,|L7.242|
0000e8  1e68              SUBS     r0,r5,#1              ;1904
0000ea  f8390010          LDRH     r0,[r9,r0,LSL #1]     ;1904
0000ee  282e              CMP      r0,#0x2e              ;1904
0000f0  d1f8              BNE      |L7.228|
                  |L7.242|
0000f2  f04f0800          MOV      r8,#0                 ;1906
0000f6  f8cd8008          STR      r8,[sp,#8]            ;1906
0000fa  2008              MOVS     r0,#8                 ;1906
0000fc  9001              STR      r0,[sp,#4]            ;1906
0000fe  bf00              NOP                            ;1907
                  |L7.256|
000100  4630              MOV      r0,r6                 ;1908
000102  1c76              ADDS     r6,r6,#1              ;1908
000104  f8394010          LDRH     r4,[r9,r0,LSL #1]     ;1908
000108  b904              CBNZ     r4,|L7.268|
00010a  e055              B        |L7.440|
                  |L7.268|
00010c  2c20              CMP      r4,#0x20              ;1910
00010e  d003              BEQ      |L7.280|
000110  2c2e              CMP      r4,#0x2e              ;1910
000112  d104              BNE      |L7.286|
000114  42ae              CMP      r6,r5                 ;1910
000116  d002              BEQ      |L7.286|
                  |L7.280|
000118  f0470703          ORR      r7,r7,#3              ;1911
00011c  e7f0              B        |L7.256|
                  |L7.286|
00011e  e9dd1001          LDRD     r1,r0,[sp,#4]         ;1914
000122  4288              CMP      r0,r1                 ;1914
000124  d201              BCS      |L7.298|
000126  42ae              CMP      r6,r5                 ;1914
000128  d116              BNE      |L7.344|
                  |L7.298|
00012a  9801              LDR      r0,[sp,#4]            ;1915
00012c  280b              CMP      r0,#0xb               ;1915
00012e  d102              BNE      |L7.310|
000130  f0470703          ORR      r7,r7,#3              ;1916
000134  e040              B        |L7.440|
                  |L7.310|
000136  42ae              CMP      r6,r5                 ;1918
000138  d001              BEQ      |L7.318|
00013a  f0470703          ORR      r7,r7,#3              ;1918
                  |L7.318|
00013e  42ae              CMP      r6,r5                 ;1919
000140  d900              BLS      |L7.324|
000142  e039              B        |L7.440|
                  |L7.324|
000144  462e              MOV      r6,r5                 ;1920
000146  2008              MOVS     r0,#8                 ;1920
000148  9002              STR      r0,[sp,#8]            ;1920
00014a  200b              MOVS     r0,#0xb               ;1920
00014c  9001              STR      r0,[sp,#4]            ;1920
00014e  ea4f6088          LSL      r0,r8,#26             ;1921
000152  ea4f6810          LSR      r8,r0,#24             ;1921
000156  e7d3              B        |L7.256|
                  |L7.344|
000158  2c80              CMP      r4,#0x80              ;1924
00015a  db0b              BLT      |L7.372|
00015c  2100              MOVS     r1,#0                 ;1926
00015e  4620              MOV      r0,r4                 ;1926
000160  f7fffffe          BL       ff_convert
000164  4604              MOV      r4,r0                 ;1926
000166  b11c              CBZ      r4,|L7.368|
000168  f1a40080          SUB      r0,r4,#0x80           ;1927
00016c  492d              LDR      r1,|L7.548|
00016e  5c0c              LDRB     r4,[r1,r0]            ;1927
                  |L7.368|
000170  f0470702          ORR      r7,r7,#2              ;1931
                  |L7.372|
000174  bf00              NOP                            ;1934
000176  b124              CBZ      r4,|L7.386|
000178  4621              MOV      r1,r4                 ;1940
00017a  a02b              ADR      r0,|L7.552|
00017c  f7fffffe          BL       chk_chr
000180  b118              CBZ      r0,|L7.394|
                  |L7.386|
000182  245f              MOVS     r4,#0x5f              ;1941
000184  f0470703          ORR      r7,r7,#3              ;1941
000188  e00f              B        |L7.426|
                  |L7.394|
00018a  2c41              CMP      r4,#0x41              ;1943
00018c  db04              BLT      |L7.408|
00018e  2c5a              CMP      r4,#0x5a              ;1943
000190  dc02              BGT      |L7.408|
000192  f0480802          ORR      r8,r8,#2              ;1944
000196  e008              B        |L7.426|
                  |L7.408|
000198  2c61              CMP      r4,#0x61              ;1946
00019a  db06              BLT      |L7.426|
00019c  2c7a              CMP      r4,#0x7a              ;1946
00019e  dc04              BGT      |L7.426|
0001a0  f0480801          ORR      r8,r8,#1              ;1947
0001a4  f1a40020          SUB      r0,r4,#0x20           ;1947
0001a8  b284              UXTH     r4,r0                 ;1947
                  |L7.426|
0001aa  f8da3018          LDR      r3,[r10,#0x18]        ;1952
0001ae  9802              LDR      r0,[sp,#8]            ;1952
0001b0  1c41              ADDS     r1,r0,#1              ;1952
0001b2  9102              STR      r1,[sp,#8]            ;1952
0001b4  541c              STRB     r4,[r3,r0]            ;1952
0001b6  e7a3              B        |L7.256|
                  |L7.440|
0001b8  bf00              NOP                            ;1909
0001ba  f8da0018          LDR      r0,[r10,#0x18]        ;1955
0001be  7800              LDRB     r0,[r0,#0]            ;1955
0001c0  28e5              CMP      r0,#0xe5              ;1955
0001c2  d103              BNE      |L7.460|
0001c4  2005              MOVS     r0,#5                 ;1955
0001c6  f8da1018          LDR      r1,[r10,#0x18]        ;1955
0001ca  7008              STRB     r0,[r1,#0]            ;1955
                  |L7.460|
0001cc  9801              LDR      r0,[sp,#4]            ;1957
0001ce  2808              CMP      r0,#8                 ;1957
0001d0  d103              BNE      |L7.474|
0001d2  ea4f6088          LSL      r0,r8,#26             ;1957
0001d6  ea4f6810          LSR      r8,r0,#24             ;1957
                  |L7.474|
0001da  f008000c          AND      r0,r8,#0xc            ;1958
0001de  280c              CMP      r0,#0xc               ;1958
0001e0  d003              BEQ      |L7.490|
0001e2  f0080003          AND      r0,r8,#3              ;1958
0001e6  2803              CMP      r0,#3                 ;1958
0001e8  d101              BNE      |L7.494|
                  |L7.490|
0001ea  f0470702          ORR      r7,r7,#2              ;1959
                  |L7.494|
0001ee  f0070002          AND      r0,r7,#2              ;1960
0001f2  b958              CBNZ     r0,|L7.524|
0001f4  f0080003          AND      r0,r8,#3              ;1961
0001f8  2801              CMP      r0,#1                 ;1961
0001fa  d101              BNE      |L7.512|
0001fc  f0470710          ORR      r7,r7,#0x10           ;1961
                  |L7.512|
000200  f008000c          AND      r0,r8,#0xc            ;1962
000204  2804              CMP      r0,#4                 ;1962
000206  d101              BNE      |L7.524|
000208  f0470708          ORR      r7,r7,#8              ;1962
                  |L7.524|
00020c  f8da0018          LDR      r0,[r10,#0x18]        ;1965
000210  72c7              STRB     r7,[r0,#0xb]          ;1965
000212  2000              MOVS     r0,#0                 ;1967
000214  e719              B        |L7.74|
;;;2045   
                          ENDP

000216  0000              DCW      0x0000
                  |L7.536|
000218  222a3a3c          DCB      """*:<>?|",127,0
00021c  3e3f7c7f
000220  00      
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
                  |L7.548|
                          DCD      ExCvt
                  |L7.552|
000228  2b2c3b3d          DCB      "+,;=[]",0
00022c  5b5d00  
00022f  00                DCB      0

                          AREA ||i.dir_alloc||, CODE, READONLY, ALIGN=1

                  dir_alloc PROC
;;;1200   static
;;;1201   FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1202   	DIR* dp,		/* Pointer to the directory object */
;;;1203   	UINT nent		/* Number of contiguous entries to allocate (1-21) */
;;;1204   )
;;;1205   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1206   	FRESULT res;
;;;1207   	UINT n;
;;;1208   
;;;1209   
;;;1210   	res = dir_sdi(dp, 0);
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dir_sdi
000010  4605              MOV      r5,r0
;;;1211   	if (res == FR_OK) {
000012  b9ed              CBNZ     r5,|L8.80|
;;;1212   		n = 0;
000014  2700              MOVS     r7,#0
;;;1213   		do {
000016  bf00              NOP      
                  |L8.24|
;;;1214   			res = move_window(dp->fs, dp->sect);
000018  6921              LDR      r1,[r4,#0x10]
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       move_window
000020  4605              MOV      r5,r0
;;;1215   			if (res != FR_OK) break;
000022  b105              CBZ      r5,|L8.38|
000024  e013              B        |L8.78|
                  |L8.38|
;;;1216   			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
000026  6960              LDR      r0,[r4,#0x14]
000028  7800              LDRB     r0,[r0,#0]
00002a  28e5              CMP      r0,#0xe5
00002c  d002              BEQ      |L8.52|
00002e  6960              LDR      r0,[r4,#0x14]
000030  7800              LDRB     r0,[r0,#0]
000032  b920              CBNZ     r0,|L8.62|
                  |L8.52|
;;;1217   				if (++n == nent) break;	/* A block of contiguous free entries is found */
000034  1c78              ADDS     r0,r7,#1
000036  4607              MOV      r7,r0
000038  42b0              CMP      r0,r6
00003a  d101              BNE      |L8.64|
00003c  e007              B        |L8.78|
                  |L8.62|
;;;1218   			} else {
;;;1219   				n = 0;					/* Not a blank entry. Restart to search */
00003e  2700              MOVS     r7,#0
                  |L8.64|
;;;1220   			}
;;;1221   			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dir_next
000048  4605              MOV      r5,r0
;;;1222   		} while (res == FR_OK);
00004a  2d00              CMP      r5,#0
00004c  d0e4              BEQ      |L8.24|
                  |L8.78|
00004e  bf00              NOP                            ;1215
                  |L8.80|
;;;1223   	}
;;;1224   	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
000050  2d04              CMP      r5,#4
000052  d100              BNE      |L8.86|
000054  2507              MOVS     r5,#7
                  |L8.86|
;;;1225   	return res;
000056  4628              MOV      r0,r5
;;;1226   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;1227   #endif
                          ENDP


                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;1459   static
;;;1460   FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1461   	DIR* dp			/* Pointer to the directory object linked to the file name */
;;;1462   )
;;;1463   {
000004  4604              MOV      r4,r0
;;;1464   	FRESULT res;
;;;1465   	BYTE c, *dir;
;;;1466   #if _USE_LFN
;;;1467   	BYTE a, ord, sum;
;;;1468   #endif
;;;1469   
;;;1470   	res = dir_sdi(dp, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_sdi
00000e  4607              MOV      r7,r0
;;;1471   	if (res != FR_OK) return res;
000010  b117              CBZ      r7,|L9.24|
000012  4638              MOV      r0,r7
                  |L9.20|
;;;1472   
;;;1473   #if _USE_LFN
;;;1474   	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1475   #endif
;;;1476   	do {
;;;1477   		res = move_window(dp->fs, dp->sect);
;;;1478   		if (res != FR_OK) break;
;;;1479   		dir = dp->dir;					/* Ptr to the directory entry of current index */
;;;1480   		c = dir[DIR_Name];
;;;1481   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1482   #if _USE_LFN	/* LFN configuration */
;;;1483   		a = dir[DIR_Attr] & AM_MASK;
;;;1484   		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1485   			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1486   		} else {
;;;1487   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1488   				if (dp->lfn) {
;;;1489   					if (c & LLEF) {		/* Is it start of LFN sequence? */
;;;1490   						sum = dir[LDIR_Chksum];
;;;1491   						c &= ~LLEF; ord = c;	/* LFN start order */
;;;1492   						dp->lfn_idx = dp->index;	/* Start index of LFN */
;;;1493   					}
;;;1494   					/* Check validity of the LFN entry and compare it with given name */
;;;1495   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1496   				}
;;;1497   			} else {					/* An SFN entry is found */
;;;1498   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1499   				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
;;;1500   				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1501   			}
;;;1502   		}
;;;1503   #else		/* Non LFN configuration */
;;;1504   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
;;;1505   			break;
;;;1506   #endif
;;;1507   		res = dir_next(dp, 0);		/* Next entry */
;;;1508   	} while (res == FR_OK);
;;;1509   
;;;1510   	return res;
;;;1511   }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L9.24|
000018  f04f09ff          MOV      r9,#0xff              ;1474
00001c  46ca              MOV      r10,r9                ;1474
00001e  f64f70ff          MOV      r0,#0xffff            ;1474
000022  8420              STRH     r0,[r4,#0x20]         ;1474
000024  bf00              NOP                            ;1476
                  |L9.38|
000026  6921              LDR      r1,[r4,#0x10]         ;1477
000028  6820              LDR      r0,[r4,#0]            ;1477
00002a  f7fffffe          BL       move_window
00002e  4607              MOV      r7,r0                 ;1477
000030  b107              CBZ      r7,|L9.52|
000032  e057              B        |L9.228|
                  |L9.52|
000034  6965              LDR      r5,[r4,#0x14]         ;1479
000036  782e              LDRB     r6,[r5,#0]            ;1480
000038  b90e              CBNZ     r6,|L9.62|
00003a  2704              MOVS     r7,#4                 ;1481
00003c  e052              B        |L9.228|
                  |L9.62|
00003e  7ae8              LDRB     r0,[r5,#0xb]          ;1483
000040  f000083f          AND      r8,r0,#0x3f           ;1483
000044  2ee5              CMP      r6,#0xe5              ;1484
000046  d005              BEQ      |L9.84|
000048  f0080008          AND      r0,r8,#8              ;1484
00004c  b140              CBZ      r0,|L9.96|
00004e  f1b80f0f          CMP      r8,#0xf               ;1484
000052  d005              BEQ      |L9.96|
                  |L9.84|
000054  f04f09ff          MOV      r9,#0xff              ;1485
000058  f64f70ff          MOV      r0,#0xffff            ;1485
00005c  8420              STRH     r0,[r4,#0x20]         ;1485
00005e  e03a              B        |L9.214|
                  |L9.96|
000060  f1b80f0f          CMP      r8,#0xf               ;1487
000064  d11c              BNE      |L9.160|
000066  69e0              LDR      r0,[r4,#0x1c]         ;1488
000068  b378              CBZ      r0,|L9.202|
00006a  f0060040          AND      r0,r6,#0x40           ;1489
00006e  b130              CBZ      r0,|L9.126|
000070  f895a00d          LDRB     r10,[r5,#0xd]         ;1490
000074  f0260640          BIC      r6,r6,#0x40           ;1491
000078  46b1              MOV      r9,r6                 ;1491
00007a  88e0              LDRH     r0,[r4,#6]            ;1492
00007c  8420              STRH     r0,[r4,#0x20]         ;1492
                  |L9.126|
00007e  454e              CMP      r6,r9                 ;1495
000080  d10a              BNE      |L9.152|
000082  7b68              LDRB     r0,[r5,#0xd]          ;1495
000084  4550              CMP      r0,r10                ;1495
000086  d107              BNE      |L9.152|
000088  4629              MOV      r1,r5                 ;1495
00008a  69e0              LDR      r0,[r4,#0x1c]         ;1495
00008c  f7fffffe          BL       cmp_lfn
000090  b110              CBZ      r0,|L9.152|
000092  f1a90001          SUB      r0,r9,#1              ;1495
000096  e000              B        |L9.154|
                  |L9.152|
000098  20ff              MOVS     r0,#0xff              ;1495
                  |L9.154|
00009a  f00009ff          AND      r9,r0,#0xff           ;1495
00009e  e01a              B        |L9.214|
                  |L9.160|
0000a0  f1b90f00          CMP      r9,#0                 ;1498
0000a4  d105              BNE      |L9.178|
0000a6  4628              MOV      r0,r5                 ;1498
0000a8  f7fffffe          BL       sum_sfn
0000ac  4550              CMP      r0,r10                ;1498
0000ae  d100              BNE      |L9.178|
0000b0  e018              B        |L9.228|
                  |L9.178|
0000b2  69a0              LDR      r0,[r4,#0x18]         ;1499
0000b4  7ac0              LDRB     r0,[r0,#0xb]          ;1499
0000b6  f0000001          AND      r0,r0,#1              ;1499
0000ba  b938              CBNZ     r0,|L9.204|
0000bc  220b              MOVS     r2,#0xb               ;1499
0000be  4628              MOV      r0,r5                 ;1499
0000c0  69a1              LDR      r1,[r4,#0x18]         ;1499
0000c2  f7fffffe          BL       mem_cmp
0000c6  b908              CBNZ     r0,|L9.204|
0000c8  e00c              B        |L9.228|
                  |L9.202|
0000ca  e004              B        |L9.214|
                  |L9.204|
0000cc  f04f09ff          MOV      r9,#0xff              ;1500
0000d0  f64f70ff          MOV      r0,#0xffff            ;1500
0000d4  8420              STRH     r0,[r4,#0x20]         ;1500
                  |L9.214|
0000d6  2100              MOVS     r1,#0                 ;1507
0000d8  4620              MOV      r0,r4                 ;1507
0000da  f7fffffe          BL       dir_next
0000de  4607              MOV      r7,r0                 ;1507
0000e0  2f00              CMP      r7,#0                 ;1508
0000e2  d0a0              BEQ      |L9.38|
                  |L9.228|
0000e4  bf00              NOP                            ;1478
0000e6  4638              MOV      r0,r7                 ;1510
0000e8  e794              B        |L9.20|
;;;1512   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;1129   static
;;;1130   FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1131   	DIR* dp,		/* Pointer to the directory object */
;;;1132   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1133   )
;;;1134   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1135   	DWORD clst;
;;;1136   	UINT i;
;;;1137   #if !_FS_READONLY
;;;1138   	UINT c;
;;;1139   #endif
;;;1140   
;;;1141   
;;;1142   	i = dp->index + 1;
000008  88e0              LDRH     r0,[r4,#6]
00000a  1c46              ADDS     r6,r0,#1
;;;1143   	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
00000c  b2b0              UXTH     r0,r6
00000e  b108              CBZ      r0,|L10.20|
000010  6920              LDR      r0,[r4,#0x10]
000012  b910              CBNZ     r0,|L10.26|
                  |L10.20|
;;;1144   		return FR_NO_FILE;
000014  2004              MOVS     r0,#4
                  |L10.22|
;;;1145   
;;;1146   	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
;;;1147   		dp->sect++;					/* Next sector */
;;;1148   
;;;1149   		if (!dp->clust) {		/* Static table */
;;;1150   			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
;;;1151   				return FR_NO_FILE;
;;;1152   		}
;;;1153   		else {					/* Dynamic table */
;;;1154   			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1155   				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
;;;1156   				if (clst <= 1) return FR_INT_ERR;
;;;1157   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1158   				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
;;;1159   #if !_FS_READONLY
;;;1160   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
;;;1161   					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
;;;1162   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1163   					if (clst == 1) return FR_INT_ERR;
;;;1164   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1165   					/* Clean-up stretched table */
;;;1166   					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
;;;1167   					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
;;;1168   					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
;;;1169   					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1170   						dp->fs->wflag = 1;
;;;1171   						if (sync_window(dp->fs)) return FR_DISK_ERR;
;;;1172   						dp->fs->winsect++;
;;;1173   					}
;;;1174   					dp->fs->winsect -= c;						/* Rewind window offset */
;;;1175   #else
;;;1176   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
;;;1177   					return FR_NO_FILE;							/* Report EOT */
;;;1178   #endif
;;;1179   				}
;;;1180   				dp->clust = clst;				/* Initialize data for new cluster */
;;;1181   				dp->sect = clust2sect(dp->fs, clst);
;;;1182   			}
;;;1183   		}
;;;1184   	}
;;;1185   
;;;1186   	dp->index = (WORD)i;	/* Current index */
;;;1187   	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
;;;1188   
;;;1189   	return FR_OK;
;;;1190   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L10.26|
00001a  6821              LDR      r1,[r4,#0]            ;1146
00001c  8948              LDRH     r0,[r1,#0xa]          ;1146
00001e  17c1              ASRS     r1,r0,#31             ;1146
000020  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1146
000024  1149              ASRS     r1,r1,#5              ;1146
000026  fbb6f2f1          UDIV     r2,r6,r1              ;1146
00002a  fb016112          MLS      r1,r1,r2,r6           ;1146
00002e  2900              CMP      r1,#0                 ;1146
000030  d171              BNE      |L10.278|
000032  6920              LDR      r0,[r4,#0x10]         ;1147
000034  1c40              ADDS     r0,r0,#1              ;1147
000036  6120              STR      r0,[r4,#0x10]         ;1147
000038  68e0              LDR      r0,[r4,#0xc]          ;1149
00003a  b928              CBNZ     r0,|L10.72|
00003c  6820              LDR      r0,[r4,#0]            ;1150
00003e  8900              LDRH     r0,[r0,#8]            ;1150
000040  42b0              CMP      r0,r6                 ;1150
000042  d868              BHI      |L10.278|
000044  2004              MOVS     r0,#4                 ;1151
000046  e7e6              B        |L10.22|
                  |L10.72|
000048  6821              LDR      r1,[r4,#0]            ;1154
00004a  8948              LDRH     r0,[r1,#0xa]          ;1154
00004c  17c1              ASRS     r1,r0,#31             ;1154
00004e  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1154
000052  1149              ASRS     r1,r1,#5              ;1154
000054  fbb6f1f1          UDIV     r1,r6,r1              ;1154
000058  6822              LDR      r2,[r4,#0]            ;1154
00005a  7892              LDRB     r2,[r2,#2]            ;1154
00005c  1e52              SUBS     r2,r2,#1              ;1154
00005e  4011              ANDS     r1,r1,r2              ;1154
000060  2900              CMP      r1,#0                 ;1154
000062  d158              BNE      |L10.278|
000064  68e1              LDR      r1,[r4,#0xc]          ;1155
000066  6820              LDR      r0,[r4,#0]            ;1155
000068  f7fffffe          BL       get_fat
00006c  4605              MOV      r5,r0                 ;1155
00006e  2d01              CMP      r5,#1                 ;1156
000070  d801              BHI      |L10.118|
000072  2002              MOVS     r0,#2                 ;1156
000074  e7cf              B        |L10.22|
                  |L10.118|
000076  1c68              ADDS     r0,r5,#1              ;1157
000078  b908              CBNZ     r0,|L10.126|
00007a  2001              MOVS     r0,#1                 ;1157
00007c  e7cb              B        |L10.22|
                  |L10.126|
00007e  6820              LDR      r0,[r4,#0]            ;1158
000080  6940              LDR      r0,[r0,#0x14]         ;1158
000082  42a8              CMP      r0,r5                 ;1158
000084  d841              BHI      |L10.266|
000086  f1b80f00          CMP      r8,#0                 ;1160
00008a  d101              BNE      |L10.144|
00008c  2004              MOVS     r0,#4                 ;1160
00008e  e7c2              B        |L10.22|
                  |L10.144|
000090  68e1              LDR      r1,[r4,#0xc]          ;1161
000092  6820              LDR      r0,[r4,#0]            ;1161
000094  f7fffffe          BL       create_chain
000098  4605              MOV      r5,r0                 ;1161
00009a  b90d              CBNZ     r5,|L10.160|
00009c  2007              MOVS     r0,#7                 ;1162
00009e  e7ba              B        |L10.22|
                  |L10.160|
0000a0  2d01              CMP      r5,#1                 ;1163
0000a2  d101              BNE      |L10.168|
0000a4  2002              MOVS     r0,#2                 ;1163
0000a6  e7b6              B        |L10.22|
                  |L10.168|
0000a8  1c68              ADDS     r0,r5,#1              ;1164
0000aa  b908              CBNZ     r0,|L10.176|
0000ac  2001              MOVS     r0,#1                 ;1164
0000ae  e7b2              B        |L10.22|
                  |L10.176|
0000b0  6820              LDR      r0,[r4,#0]            ;1166
0000b2  f7fffffe          BL       sync_window
0000b6  b108              CBZ      r0,|L10.188|
0000b8  2001              MOVS     r0,#1                 ;1166
0000ba  e7ac              B        |L10.22|
                  |L10.188|
0000bc  6821              LDR      r1,[r4,#0]            ;1167
0000be  894a              LDRH     r2,[r1,#0xa]          ;1167
0000c0  f1010030          ADD      r0,r1,#0x30           ;1167
0000c4  2100              MOVS     r1,#0                 ;1167
0000c6  f7fffffe          BL       mem_set
0000ca  4629              MOV      r1,r5                 ;1168
0000cc  6820              LDR      r0,[r4,#0]            ;1168
0000ce  f7fffffe          BL       clust2sect
0000d2  6821              LDR      r1,[r4,#0]            ;1168
0000d4  62c8              STR      r0,[r1,#0x2c]         ;1168
0000d6  2700              MOVS     r7,#0                 ;1169
0000d8  e00e              B        |L10.248|
                  |L10.218|
0000da  2001              MOVS     r0,#1                 ;1170
0000dc  6821              LDR      r1,[r4,#0]            ;1170
0000de  7108              STRB     r0,[r1,#4]            ;1170
0000e0  6820              LDR      r0,[r4,#0]            ;1171
0000e2  f7fffffe          BL       sync_window
0000e6  b108              CBZ      r0,|L10.236|
0000e8  2001              MOVS     r0,#1                 ;1171
0000ea  e794              B        |L10.22|
                  |L10.236|
0000ec  6820              LDR      r0,[r4,#0]            ;1172
0000ee  6ac0              LDR      r0,[r0,#0x2c]         ;1172
0000f0  1c40              ADDS     r0,r0,#1              ;1172
0000f2  6821              LDR      r1,[r4,#0]            ;1172
0000f4  62c8              STR      r0,[r1,#0x2c]         ;1172
0000f6  1c7f              ADDS     r7,r7,#1              ;1169
                  |L10.248|
0000f8  6820              LDR      r0,[r4,#0]            ;1169
0000fa  7880              LDRB     r0,[r0,#2]            ;1169
0000fc  42b8              CMP      r0,r7                 ;1169
0000fe  d8ec              BHI      |L10.218|
000100  6820              LDR      r0,[r4,#0]            ;1174
000102  6ac0              LDR      r0,[r0,#0x2c]         ;1174
000104  1bc0              SUBS     r0,r0,r7              ;1174
000106  6821              LDR      r1,[r4,#0]            ;1174
000108  62c8              STR      r0,[r1,#0x2c]         ;1174
                  |L10.266|
00010a  60e5              STR      r5,[r4,#0xc]          ;1180
00010c  4629              MOV      r1,r5                 ;1181
00010e  6820              LDR      r0,[r4,#0]            ;1181
000110  f7fffffe          BL       clust2sect
000114  6120              STR      r0,[r4,#0x10]         ;1181
                  |L10.278|
000116  80e6              STRH     r6,[r4,#6]            ;1186
000118  6821              LDR      r1,[r4,#0]            ;1187
00011a  8948              LDRH     r0,[r1,#0xa]          ;1187
00011c  17c1              ASRS     r1,r0,#31             ;1187
00011e  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1187
000122  1149              ASRS     r1,r1,#5              ;1187
000124  fbb6f2f1          UDIV     r2,r6,r1              ;1187
000128  fb016112          MLS      r1,r1,r2,r6           ;1187
00012c  6822              LDR      r2,[r4,#0]            ;1187
00012e  3230              ADDS     r2,r2,#0x30           ;1187
000130  eb021141          ADD      r1,r2,r1,LSL #5       ;1187
000134  6161              STR      r1,[r4,#0x14]         ;1187
000136  2000              MOVS     r0,#0                 ;1189
000138  e76d              B        |L10.22|
;;;1191   
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1520   static
;;;1521   FRESULT dir_read (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1522   	DIR* dp,		/* Pointer to the directory object */
;;;1523   	int vol			/* Filtered by 0:file/directory or 1:volume label */
;;;1524   )
;;;1525   {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;1526   	FRESULT res;
;;;1527   	BYTE a, c, *dir;
;;;1528   #if _USE_LFN
;;;1529   	BYTE ord = 0xFF, sum = 0xFF;
000008  f04f09ff          MOV      r9,#0xff
00000c  46cb              MOV      r11,r9
;;;1530   #endif
;;;1531   
;;;1532   	res = FR_NO_FILE;
00000e  2704              MOVS     r7,#4
;;;1533   	while (dp->sect) {
000010  e04f              B        |L11.178|
                  |L11.18|
;;;1534   		res = move_window(dp->fs, dp->sect);
000012  6921              LDR      r1,[r4,#0x10]
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       move_window
00001a  4607              MOV      r7,r0
;;;1535   		if (res != FR_OK) break;
00001c  b107              CBZ      r7,|L11.32|
00001e  e04b              B        |L11.184|
                  |L11.32|
;;;1536   		dir = dp->dir;					/* Ptr to the directory entry of current index */
000020  6966              LDR      r6,[r4,#0x14]
;;;1537   		c = dir[DIR_Name];
000022  7835              LDRB     r5,[r6,#0]
;;;1538   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000024  b90d              CBNZ     r5,|L11.42|
000026  2704              MOVS     r7,#4
000028  e046              B        |L11.184|
                  |L11.42|
;;;1539   		a = dir[DIR_Attr] & AM_MASK;
00002a  7af0              LDRB     r0,[r6,#0xb]
00002c  f000083f          AND      r8,r0,#0x3f
;;;1540   #if _USE_LFN	/* LFN configuration */
;;;1541   		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
000030  2de5              CMP      r5,#0xe5
000032  d00a              BEQ      |L11.74|
000034  2d2e              CMP      r5,#0x2e
000036  d008              BEQ      |L11.74|
000038  f0280020          BIC      r0,r8,#0x20
00003c  2808              CMP      r0,#8
00003e  d101              BNE      |L11.68|
000040  2001              MOVS     r0,#1
000042  e000              B        |L11.70|
                  |L11.68|
000044  2000              MOVS     r0,#0
                  |L11.70|
000046  4550              CMP      r0,r10
000048  d002              BEQ      |L11.80|
                  |L11.74|
;;;1542   			ord = 0xFF;
00004a  f04f09ff          MOV      r9,#0xff
00004e  e029              B        |L11.164|
                  |L11.80|
;;;1543   		} else {
;;;1544   			if (a == AM_LFN) {			/* An LFN entry is found */
000050  f1b80f0f          CMP      r8,#0xf
000054  d11a              BNE      |L11.140|
;;;1545   				if (c & LLEF) {			/* Is it start of LFN sequence? */
000056  f0050040          AND      r0,r5,#0x40
00005a  b130              CBZ      r0,|L11.106|
;;;1546   					sum = dir[LDIR_Chksum];
00005c  f896b00d          LDRB     r11,[r6,#0xd]
;;;1547   					c &= ~LLEF; ord = c;
000060  f0250540          BIC      r5,r5,#0x40
000064  46a9              MOV      r9,r5
;;;1548   					dp->lfn_idx = dp->index;
000066  88e0              LDRH     r0,[r4,#6]
000068  8420              STRH     r0,[r4,#0x20]
                  |L11.106|
;;;1549   				}
;;;1550   				/* Check LFN validity and capture it */
;;;1551   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
00006a  454d              CMP      r5,r9
00006c  d10a              BNE      |L11.132|
00006e  7b70              LDRB     r0,[r6,#0xd]
000070  4558              CMP      r0,r11
000072  d107              BNE      |L11.132|
000074  4631              MOV      r1,r6
000076  69e0              LDR      r0,[r4,#0x1c]
000078  f7fffffe          BL       pick_lfn
00007c  b110              CBZ      r0,|L11.132|
00007e  f1a90001          SUB      r0,r9,#1
000082  e000              B        |L11.134|
                  |L11.132|
000084  20ff              MOVS     r0,#0xff
                  |L11.134|
000086  f00009ff          AND      r9,r0,#0xff
00008a  e00b              B        |L11.164|
                  |L11.140|
;;;1552   			} else {					/* An SFN entry is found */
;;;1553   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
00008c  f1b90f00          CMP      r9,#0
000090  d104              BNE      |L11.156|
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       sum_sfn
000098  4558              CMP      r0,r11
00009a  d002              BEQ      |L11.162|
                  |L11.156|
;;;1554   					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
00009c  f64f70ff          MOV      r0,#0xffff
0000a0  8420              STRH     r0,[r4,#0x20]
                  |L11.162|
;;;1555   				break;
0000a2  e009              B        |L11.184|
                  |L11.164|
;;;1556   			}
;;;1557   		}
;;;1558   #else		/* Non LFN configuration */
;;;1559   		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
;;;1560   			break;
;;;1561   #endif
;;;1562   		res = dir_next(dp, 0);				/* Next entry */
0000a4  2100              MOVS     r1,#0
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       dir_next
0000ac  4607              MOV      r7,r0
;;;1563   		if (res != FR_OK) break;
0000ae  b107              CBZ      r7,|L11.178|
0000b0  e002              B        |L11.184|
                  |L11.178|
0000b2  6920              LDR      r0,[r4,#0x10]         ;1533
0000b4  2800              CMP      r0,#0                 ;1533
0000b6  d1ac              BNE      |L11.18|
                  |L11.184|
0000b8  bf00              NOP                            ;1535
;;;1564   	}
;;;1565   
;;;1566   	if (res != FR_OK) dp->sect = 0;
0000ba  b10f              CBZ      r7,|L11.192|
0000bc  2000              MOVS     r0,#0
0000be  6120              STR      r0,[r4,#0x10]
                  |L11.192|
;;;1567   
;;;1568   	return res;
0000c0  4638              MOV      r0,r7
;;;1569   }
0000c2  e8bd9ff0          POP      {r4-r12,pc}
;;;1570   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1579   static
;;;1580   FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1581   	DIR* dp				/* Target directory with object name to be created */
;;;1582   )
;;;1583   {
000004  4604              MOV      r4,r0
;;;1584   	FRESULT res;
;;;1585   #if _USE_LFN	/* LFN configuration */
;;;1586   	UINT n, nent;
;;;1587   	BYTE sn[12], *fn, sum;
;;;1588   	WCHAR *lfn;
;;;1589   
;;;1590   
;;;1591   	fn = dp->fn; lfn = dp->lfn;
000006  f8d48018          LDR      r8,[r4,#0x18]
00000a  f8d4901c          LDR      r9,[r4,#0x1c]
;;;1592   	mem_cpy(sn, fn, 12);
00000e  220c              MOVS     r2,#0xc
000010  4641              MOV      r1,r8
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       mem_cpy
;;;1593   
;;;1594   	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
000018  bf00              NOP      
;;;1595   		return FR_INVALID_NAME;
;;;1596   
;;;1597   	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
00001a  f89d000b          LDRB     r0,[sp,#0xb]
00001e  f0000001          AND      r0,r0,#1
000022  b320              CBZ      r0,|L12.110|
;;;1598   		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
000024  2000              MOVS     r0,#0
000026  f888000b          STRB     r0,[r8,#0xb]
00002a  61e0              STR      r0,[r4,#0x1c]
;;;1599   		for (n = 1; n < 100; n++) {
00002c  2601              MOVS     r6,#1
00002e  e00c              B        |L12.74|
                  |L12.48|
;;;1600   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
000030  4633              MOV      r3,r6
000032  464a              MOV      r2,r9
000034  4669              MOV      r1,sp
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       gen_numname
;;;1601   			res = dir_find(dp);				/* Check if the name collides with existing SFN */
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dir_find
000042  4605              MOV      r5,r0
;;;1602   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L12.72|
000046  e002              B        |L12.78|
                  |L12.72|
000048  1c76              ADDS     r6,r6,#1              ;1599
                  |L12.74|
00004a  2e64              CMP      r6,#0x64              ;1599
00004c  d3f0              BCC      |L12.48|
                  |L12.78|
00004e  bf00              NOP      
;;;1603   		}
;;;1604   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
000050  2e64              CMP      r6,#0x64
000052  d102              BNE      |L12.90|
000054  2007              MOVS     r0,#7
                  |L12.86|
;;;1605   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1606   		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
;;;1607   	}
;;;1608   
;;;1609   	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1610   		for (n = 0; lfn[n]; n++) ;
;;;1611   		nent = (n + 25) / 13;
;;;1612   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1613   		nent = 1;
;;;1614   	}
;;;1615   	res = dir_alloc(dp, nent);		/* Allocate entries */
;;;1616   
;;;1617   	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
;;;1618   		res = dir_sdi(dp, dp->index - nent);
;;;1619   		if (res == FR_OK) {
;;;1620   			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
;;;1621   			do {					/* Store LFN entries in bottom first */
;;;1622   				res = move_window(dp->fs, dp->sect);
;;;1623   				if (res != FR_OK) break;
;;;1624   				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
;;;1625   				dp->fs->wflag = 1;
;;;1626   				res = dir_next(dp, 0);	/* Next entry */
;;;1627   			} while (res == FR_OK && --nent);
;;;1628   		}
;;;1629   	}
;;;1630   #else	/* Non LFN configuration */
;;;1631   	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
;;;1632   #endif
;;;1633   
;;;1634   	if (res == FR_OK) {				/* Set SFN entry */
;;;1635   		res = move_window(dp->fs, dp->sect);
;;;1636   		if (res == FR_OK) {
;;;1637   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
;;;1638   			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
;;;1639   #if _USE_LFN
;;;1640   			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1641   #endif
;;;1642   			dp->fs->wflag = 1;
;;;1643   		}
;;;1644   	}
;;;1645   
;;;1646   	return res;
;;;1647   }
000056  e8bd8ffe          POP      {r1-r11,pc}
                  |L12.90|
00005a  2d04              CMP      r5,#4                 ;1605
00005c  d001              BEQ      |L12.98|
00005e  4628              MOV      r0,r5                 ;1605
000060  e7f9              B        |L12.86|
                  |L12.98|
000062  f89d000b          LDRB     r0,[sp,#0xb]          ;1606
000066  f888000b          STRB     r0,[r8,#0xb]          ;1606
00006a  f8c4901c          STR      r9,[r4,#0x1c]         ;1606
                  |L12.110|
00006e  f89d000b          LDRB     r0,[sp,#0xb]          ;1609
000072  f0000002          AND      r0,r0,#2              ;1609
000076  b160              CBZ      r0,|L12.146|
000078  2600              MOVS     r6,#0                 ;1610
00007a  e000              B        |L12.126|
                  |L12.124|
00007c  1c76              ADDS     r6,r6,#1              ;1610
                  |L12.126|
00007e  f8390016          LDRH     r0,[r9,r6,LSL #1]     ;1610
000082  2800              CMP      r0,#0                 ;1610
000084  d1fa              BNE      |L12.124|
000086  f1060019          ADD      r0,r6,#0x19           ;1611
00008a  210d              MOVS     r1,#0xd               ;1611
00008c  fbb0f7f1          UDIV     r7,r0,r1              ;1611
000090  e000              B        |L12.148|
                  |L12.146|
000092  2701              MOVS     r7,#1                 ;1613
                  |L12.148|
000094  4639              MOV      r1,r7                 ;1615
000096  4620              MOV      r0,r4                 ;1615
000098  f7fffffe          BL       dir_alloc
00009c  4605              MOV      r5,r0                 ;1615
00009e  bb45              CBNZ     r5,|L12.242|
0000a0  1e78              SUBS     r0,r7,#1              ;1617
0000a2  1e07              SUBS     r7,r0,#0              ;1617
0000a4  d025              BEQ      |L12.242|
0000a6  88e0              LDRH     r0,[r4,#6]            ;1618
0000a8  1bc1              SUBS     r1,r0,r7              ;1618
0000aa  4620              MOV      r0,r4                 ;1618
0000ac  f7fffffe          BL       dir_sdi
0000b0  4605              MOV      r5,r0                 ;1618
0000b2  b9f5              CBNZ     r5,|L12.242|
0000b4  69a0              LDR      r0,[r4,#0x18]         ;1620
0000b6  f7fffffe          BL       sum_sfn
0000ba  4682              MOV      r10,r0                ;1620
0000bc  bf00              NOP                            ;1621
                  |L12.190|
0000be  6921              LDR      r1,[r4,#0x10]         ;1622
0000c0  6820              LDR      r0,[r4,#0]            ;1622
0000c2  f7fffffe          BL       move_window
0000c6  4605              MOV      r5,r0                 ;1622
0000c8  b105              CBZ      r5,|L12.204|
0000ca  e011              B        |L12.240|
                  |L12.204|
0000cc  b2fa              UXTB     r2,r7                 ;1624
0000ce  4653              MOV      r3,r10                ;1624
0000d0  6961              LDR      r1,[r4,#0x14]         ;1624
0000d2  69e0              LDR      r0,[r4,#0x1c]         ;1624
0000d4  f7fffffe          BL       fit_lfn
0000d8  2001              MOVS     r0,#1                 ;1625
0000da  6821              LDR      r1,[r4,#0]            ;1625
0000dc  7108              STRB     r0,[r1,#4]            ;1625
0000de  2100              MOVS     r1,#0                 ;1626
0000e0  4620              MOV      r0,r4                 ;1626
0000e2  f7fffffe          BL       dir_next
0000e6  4605              MOV      r5,r0                 ;1626
0000e8  b915              CBNZ     r5,|L12.240|
0000ea  1e78              SUBS     r0,r7,#1              ;1627
0000ec  1e07              SUBS     r7,r0,#0              ;1627
0000ee  d1e6              BNE      |L12.190|
                  |L12.240|
0000f0  bf00              NOP                            ;1623
                  |L12.242|
0000f2  b9c5              CBNZ     r5,|L12.294|
0000f4  6921              LDR      r1,[r4,#0x10]         ;1635
0000f6  6820              LDR      r0,[r4,#0]            ;1635
0000f8  f7fffffe          BL       move_window
0000fc  4605              MOV      r5,r0                 ;1635
0000fe  b995              CBNZ     r5,|L12.294|
000100  2220              MOVS     r2,#0x20              ;1637
000102  2100              MOVS     r1,#0                 ;1637
000104  6960              LDR      r0,[r4,#0x14]         ;1637
000106  f7fffffe          BL       mem_set
00010a  220b              MOVS     r2,#0xb               ;1638
00010c  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;1638
000110  f7fffffe          BL       mem_cpy
000114  69a0              LDR      r0,[r4,#0x18]         ;1640
000116  7ac0              LDRB     r0,[r0,#0xb]          ;1640
000118  f0000018          AND      r0,r0,#0x18           ;1640
00011c  6961              LDR      r1,[r4,#0x14]         ;1640
00011e  7308              STRB     r0,[r1,#0xc]          ;1640
000120  2001              MOVS     r0,#1                 ;1642
000122  6821              LDR      r1,[r4,#0]            ;1642
000124  7108              STRB     r0,[r1,#4]            ;1642
                  |L12.294|
000126  4628              MOV      r0,r5                 ;1646
000128  e795              B        |L12.86|
;;;1648   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1657   static
;;;1658   FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1659   	DIR* dp				/* Directory object pointing the entry to be removed */
;;;1660   )
;;;1661   {
000002  4604              MOV      r4,r0
;;;1662   	FRESULT res;
;;;1663   #if _USE_LFN	/* LFN configuration */
;;;1664   	UINT i;
;;;1665   
;;;1666   	i = dp->index;	/* SFN index */
000004  88e6              LDRH     r6,[r4,#6]
;;;1667   	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
000006  8c20              LDRH     r0,[r4,#0x20]
000008  f64f72ff          MOV      r2,#0xffff
00000c  4290              CMP      r0,r2
00000e  d101              BNE      |L13.20|
000010  4630              MOV      r0,r6
000012  e000              B        |L13.22|
                  |L13.20|
000014  8c20              LDRH     r0,[r4,#0x20]
                  |L13.22|
000016  4601              MOV      r1,r0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_sdi
00001e  4605              MOV      r5,r0
;;;1668   	if (res == FR_OK) {
000020  bb0d              CBNZ     r5,|L13.102|
;;;1669   		do {
000022  bf00              NOP      
                  |L13.36|
;;;1670   			res = move_window(dp->fs, dp->sect);
000024  6921              LDR      r1,[r4,#0x10]
000026  6820              LDR      r0,[r4,#0]
000028  f7fffffe          BL       move_window
00002c  4605              MOV      r5,r0
;;;1671   			if (res != FR_OK) break;
00002e  b105              CBZ      r5,|L13.50|
000030  e015              B        |L13.94|
                  |L13.50|
;;;1672   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
000032  2220              MOVS     r2,#0x20
000034  2100              MOVS     r1,#0
000036  6960              LDR      r0,[r4,#0x14]
000038  f7fffffe          BL       mem_set
;;;1673   			*dp->dir = DDEM;
00003c  20e5              MOVS     r0,#0xe5
00003e  6961              LDR      r1,[r4,#0x14]
000040  7008              STRB     r0,[r1,#0]
;;;1674   			dp->fs->wflag = 1;
000042  2001              MOVS     r0,#1
000044  6821              LDR      r1,[r4,#0]
000046  7108              STRB     r0,[r1,#4]
;;;1675   			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
000048  88e0              LDRH     r0,[r4,#6]
00004a  42b0              CMP      r0,r6
00004c  d300              BCC      |L13.80|
00004e  e006              B        |L13.94|
                  |L13.80|
;;;1676   			res = dir_next(dp, 0);		/* Next entry */
000050  2100              MOVS     r1,#0
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dir_next
000058  4605              MOV      r5,r0
;;;1677   		} while (res == FR_OK);
00005a  2d00              CMP      r5,#0
00005c  d0e2              BEQ      |L13.36|
                  |L13.94|
00005e  bf00              NOP                            ;1671
;;;1678   		if (res == FR_NO_FILE) res = FR_INT_ERR;
000060  2d04              CMP      r5,#4
000062  d100              BNE      |L13.102|
000064  2502              MOVS     r5,#2
                  |L13.102|
;;;1679   	}
;;;1680   
;;;1681   #else			/* Non LFN configuration */
;;;1682   	res = dir_sdi(dp, dp->index);
;;;1683   	if (res == FR_OK) {
;;;1684   		res = move_window(dp->fs, dp->sect);
;;;1685   		if (res == FR_OK) {
;;;1686   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
;;;1687   			*dp->dir = DDEM;
;;;1688   			dp->fs->wflag = 1;
;;;1689   		}
;;;1690   	}
;;;1691   #endif
;;;1692   
;;;1693   	return res;
000066  4628              MOV      r0,r5
;;;1694   }
000068  bd70              POP      {r4-r6,pc}
;;;1695   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;1081   static
;;;1082   FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1083   	DIR* dp,		/* Pointer to directory object */
;;;1084   	UINT idx		/* Index of directory table */
;;;1085   )
;;;1086   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1087   	DWORD clst, sect;
;;;1088   	UINT ic;
;;;1089   
;;;1090   
;;;1091   	dp->index = (WORD)idx;	/* Current index */
000008  80e6              STRH     r6,[r4,#6]
;;;1092   	clst = dp->sclust;		/* Table start cluster (0:root) */
00000a  68a5              LDR      r5,[r4,#8]
;;;1093   	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
00000c  2d01              CMP      r5,#1
00000e  d003              BEQ      |L14.24|
000010  6820              LDR      r0,[r4,#0]
000012  6940              LDR      r0,[r0,#0x14]
000014  42a8              CMP      r0,r5
000016  d802              BHI      |L14.30|
                  |L14.24|
;;;1094   		return FR_INT_ERR;
000018  2002              MOVS     r0,#2
                  |L14.26|
;;;1095   	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1096   		clst = dp->fs->dirbase;
;;;1097   
;;;1098   	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
;;;1099   		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
;;;1100   			return FR_INT_ERR;
;;;1101   		sect = dp->fs->dirbase;
;;;1102   	}
;;;1103   	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
;;;1104   		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
;;;1105   		while (idx >= ic) {	/* Follow cluster chain */
;;;1106   			clst = get_fat(dp->fs, clst);				/* Get next cluster */
;;;1107   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1108   			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
;;;1109   				return FR_INT_ERR;
;;;1110   			idx -= ic;
;;;1111   		}
;;;1112   		sect = clust2sect(dp->fs, clst);
;;;1113   	}
;;;1114   	dp->clust = clst;	/* Current cluster# */
;;;1115   	if (!sect) return FR_INT_ERR;
;;;1116   	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
;;;1117   	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
;;;1118   
;;;1119   	return FR_OK;
;;;1120   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L14.30|
00001e  b92d              CBNZ     r5,|L14.44|
000020  6820              LDR      r0,[r4,#0]            ;1095
000022  7800              LDRB     r0,[r0,#0]            ;1095
000024  2803              CMP      r0,#3                 ;1095
000026  d101              BNE      |L14.44|
000028  6820              LDR      r0,[r4,#0]            ;1096
00002a  6a45              LDR      r5,[r0,#0x24]         ;1096
                  |L14.44|
00002c  b945              CBNZ     r5,|L14.64|
00002e  6820              LDR      r0,[r4,#0]            ;1099
000030  8900              LDRH     r0,[r0,#8]            ;1099
000032  42b0              CMP      r0,r6                 ;1099
000034  d801              BHI      |L14.58|
000036  2002              MOVS     r0,#2                 ;1100
000038  e7ef              B        |L14.26|
                  |L14.58|
00003a  6820              LDR      r0,[r4,#0]            ;1101
00003c  6a47              LDR      r7,[r0,#0x24]         ;1101
00003e  e024              B        |L14.138|
                  |L14.64|
000040  6821              LDR      r1,[r4,#0]            ;1104
000042  8948              LDRH     r0,[r1,#0xa]          ;1104
000044  17c1              ASRS     r1,r0,#31             ;1104
000046  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1104
00004a  1149              ASRS     r1,r1,#5              ;1104
00004c  6822              LDR      r2,[r4,#0]            ;1104
00004e  7892              LDRB     r2,[r2,#2]            ;1104
000050  fb01f802          MUL      r8,r1,r2              ;1104
000054  e012              B        |L14.124|
                  |L14.86|
000056  4629              MOV      r1,r5                 ;1106
000058  6820              LDR      r0,[r4,#0]            ;1106
00005a  f7fffffe          BL       get_fat
00005e  4605              MOV      r5,r0                 ;1106
000060  1c68              ADDS     r0,r5,#1              ;1107
000062  b908              CBNZ     r0,|L14.104|
000064  2001              MOVS     r0,#1                 ;1107
000066  e7d8              B        |L14.26|
                  |L14.104|
000068  2d02              CMP      r5,#2                 ;1108
00006a  d303              BCC      |L14.116|
00006c  6820              LDR      r0,[r4,#0]            ;1108
00006e  6940              LDR      r0,[r0,#0x14]         ;1108
000070  42a8              CMP      r0,r5                 ;1108
000072  d801              BHI      |L14.120|
                  |L14.116|
000074  2002              MOVS     r0,#2                 ;1109
000076  e7d0              B        |L14.26|
                  |L14.120|
000078  eba60608          SUB      r6,r6,r8              ;1110
                  |L14.124|
00007c  4546              CMP      r6,r8                 ;1105
00007e  d2ea              BCS      |L14.86|
000080  4629              MOV      r1,r5                 ;1112
000082  6820              LDR      r0,[r4,#0]            ;1112
000084  f7fffffe          BL       clust2sect
000088  4607              MOV      r7,r0                 ;1112
                  |L14.138|
00008a  60e5              STR      r5,[r4,#0xc]          ;1114
00008c  b90f              CBNZ     r7,|L14.146|
00008e  2002              MOVS     r0,#2                 ;1115
000090  e7c3              B        |L14.26|
                  |L14.146|
000092  6821              LDR      r1,[r4,#0]            ;1116
000094  8948              LDRH     r0,[r1,#0xa]          ;1116
000096  17c1              ASRS     r1,r0,#31             ;1116
000098  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1116
00009c  1149              ASRS     r1,r1,#5              ;1116
00009e  fbb6f1f1          UDIV     r1,r6,r1              ;1116
0000a2  4439              ADD      r1,r1,r7              ;1116
0000a4  6121              STR      r1,[r4,#0x10]         ;1116
0000a6  6821              LDR      r1,[r4,#0]            ;1117
0000a8  8948              LDRH     r0,[r1,#0xa]          ;1117
0000aa  17c1              ASRS     r1,r0,#31             ;1117
0000ac  eb0061d1          ADD      r1,r0,r1,LSR #27      ;1117
0000b0  1149              ASRS     r1,r1,#5              ;1117
0000b2  fbb6f2f1          UDIV     r2,r6,r1              ;1117
0000b6  fb016112          MLS      r1,r1,r2,r6           ;1117
0000ba  6822              LDR      r2,[r4,#0]            ;1117
0000bc  3230              ADDS     r2,r2,#0x30           ;1117
0000be  eb021141          ADD      r1,r2,r1,LSL #5       ;1117
0000c2  6161              STR      r1,[r4,#0x14]         ;1117
0000c4  2000              MOVS     r0,#0                 ;1119
0000c6  e7a8              B        |L14.26|
;;;1121   
                          ENDP


                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;3670   
;;;3671   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3672   	const TCHAR* path,	/* Pointer to the file path */
;;;3673   	BYTE attr,			/* Attribute bits */
;;;3674   	BYTE mask			/* Attribute mask to change */
;;;3675   )
;;;3676   {
000002  f5ad7d0c          SUB      sp,sp,#0x230
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;3677   	FRESULT res;
;;;3678   	DIR dj;
;;;3679   	BYTE *dir;
;;;3680   	DEFINE_NAMEBUF;
;;;3681   
;;;3682   
;;;3683   	res = find_volume(&dj.fs, &path, 1);	/* Get logical drive number */
00000a  2201              MOVS     r2,#1
00000c  a98c              ADD      r1,sp,#0x230
00000e  a883              ADD      r0,sp,#0x20c
000010  f7fffffe          BL       find_volume
000014  4606              MOV      r6,r0
;;;3684   	if (res == FR_OK) {
000016  b9ee              CBNZ     r6,|L15.84|
;;;3685   		INIT_BUF(dj);
000018  a880              ADD      r0,sp,#0x200
00001a  9089              STR      r0,[sp,#0x224]
00001c  f8cdd228          STR      sp,[sp,#0x228]
;;;3686   		res = follow_path(&dj, path);		/* Follow the file path */
000020  a883              ADD      r0,sp,#0x20c
000022  998c              LDR      r1,[sp,#0x230]
000024  f7fffffe          BL       follow_path
000028  4606              MOV      r6,r0
;;;3687   		FREE_BUF();
;;;3688   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
00002a  bf00              NOP      
;;;3689   			res = FR_INVALID_NAME;
;;;3690   		if (res == FR_OK) {
00002c  b996              CBNZ     r6,|L15.84|
;;;3691   			dir = dj.dir;
00002e  9d88              LDR      r5,[sp,#0x220]
;;;3692   			if (!dir) {						/* Is it a root directory? */
000030  b90d              CBNZ     r5,|L15.54|
;;;3693   				res = FR_INVALID_NAME;
000032  2606              MOVS     r6,#6
000034  e00e              B        |L15.84|
                  |L15.54|
;;;3694   			} else {						/* File or sub directory */
;;;3695   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000036  f0040427          AND      r4,r4,#0x27
;;;3696   				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
00003a  ea070004          AND      r0,r7,r4
00003e  7ae9              LDRB     r1,[r5,#0xb]
000040  43a1              BICS     r1,r1,r4
000042  4308              ORRS     r0,r0,r1
000044  72e8              STRB     r0,[r5,#0xb]
;;;3697   				dj.fs->wflag = 1;
000046  2001              MOVS     r0,#1
000048  9983              LDR      r1,[sp,#0x20c]
00004a  7108              STRB     r0,[r1,#4]
;;;3698   				res = sync_fs(dj.fs);
00004c  9883              LDR      r0,[sp,#0x20c]
00004e  f7fffffe          BL       sync_fs
000052  4606              MOV      r6,r0
                  |L15.84|
;;;3699   			}
;;;3700   		}
;;;3701   	}
;;;3702   
;;;3703   	LEAVE_FF(dj.fs, res);
000054  4630              MOV      r0,r6
;;;3704   }
000056  f50d7d0f          ADD      sp,sp,#0x23c
00005a  bdf0              POP      {r4-r7,pc}
;;;3705   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2858   
;;;2859   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2860   	FIL *fp		/* Pointer to the file object to be closed */
;;;2861   )
;;;2862   {
000002  4605              MOV      r5,r0
;;;2863   	FRESULT res;
;;;2864   
;;;2865   
;;;2866   #if !_FS_READONLY
;;;2867   	res = f_sync(fp);					/* Flush cached data */
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       f_sync
00000a  4604              MOV      r4,r0
;;;2868   	if (res == FR_OK)
00000c  b934              CBNZ     r4,|L16.28|
;;;2869   #endif
;;;2870   	{
;;;2871   		res = validate(fp);				/* Lock volume */
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       validate
000014  4604              MOV      r4,r0
;;;2872   		if (res == FR_OK) {
000016  b90c              CBNZ     r4,|L16.28|
;;;2873   #if _FS_REENTRANT
;;;2874   			FATFS *fs = fp->fs;
;;;2875   #endif
;;;2876   #if _FS_LOCK
;;;2877   			res = dec_lock(fp->lockid);	/* Decrement file open counter */
;;;2878   			if (res == FR_OK)
;;;2879   #endif
;;;2880   				fp->fs = 0;				/* Invalidate file object */
000018  2000              MOVS     r0,#0
00001a  6028              STR      r0,[r5,#0]
                  |L16.28|
;;;2881   #if _FS_REENTRANT
;;;2882   			unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;2883   #endif
;;;2884   		}
;;;2885   	}
;;;2886   	return res;
00001c  4620              MOV      r0,r4
;;;2887   }
00001e  bd70              POP      {r4-r6,pc}
;;;2888   
                          ENDP


                          AREA ||i.f_closedir||, CODE, READONLY, ALIGN=1

                  f_closedir PROC
;;;3244   
;;;3245   FRESULT f_closedir (
000000  b570              PUSH     {r4-r6,lr}
;;;3246   	DIR *dp		/* Pointer to the directory object to be closed */
;;;3247   )
;;;3248   {
000002  4604              MOV      r4,r0
;;;3249   	FRESULT res;
;;;3250   
;;;3251   
;;;3252   	res = validate(dp);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3253   	if (res == FR_OK) {
00000c  b90d              CBNZ     r5,|L17.18|
;;;3254   #if _FS_REENTRANT
;;;3255   		FATFS *fs = dp->fs;
;;;3256   #endif
;;;3257   #if _FS_LOCK
;;;3258   		if (dp->lockid)				/* Decrement sub-directory open counter */
;;;3259   			res = dec_lock(dp->lockid);
;;;3260   		if (res == FR_OK)
;;;3261   #endif
;;;3262   			dp->fs = 0;				/* Invalidate directory object */
00000e  2000              MOVS     r0,#0
000010  6020              STR      r0,[r4,#0]
                  |L17.18|
;;;3263   #if _FS_REENTRANT
;;;3264   		unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;3265   #endif
;;;3266   	}
;;;3267   	return res;
000012  4628              MOV      r0,r5
;;;3268   }
000014  bd70              POP      {r4-r6,pc}
;;;3269   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;3405   
;;;3406   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3407   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3408   	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
;;;3409   	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3410   )
;;;3411   {
000004  b082              SUB      sp,sp,#8
000006  468a              MOV      r10,r1
;;;3412   	FRESULT res;
;;;3413   	FATFS *fs;
;;;3414   	DWORD nfree, clst, sect, stat;
;;;3415   	UINT i;
;;;3416   	BYTE fat, *p;
;;;3417   
;;;3418   
;;;3419   	/* Get logical drive number */
;;;3420   	res = find_volume(fatfs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  a902              ADD      r1,sp,#8
00000c  9804              LDR      r0,[sp,#0x10]
00000e  f7fffffe          BL       find_volume
000012  9001              STR      r0,[sp,#4]
;;;3421   	fs = *fatfs;
000014  9804              LDR      r0,[sp,#0x10]
000016  6804              LDR      r4,[r0,#0]
;;;3422   	if (res == FR_OK) {
000018  9801              LDR      r0,[sp,#4]
00001a  2800              CMP      r0,#0
00001c  d16d              BNE      |L18.250|
;;;3423   		/* If free_clust is valid, return it without full cluster scan */
;;;3424   		if (fs->free_clust <= fs->n_fatent - 2) {
00001e  e9d41004          LDRD     r1,r0,[r4,#0x10]
000022  1e80              SUBS     r0,r0,#2
000024  4281              CMP      r1,r0
000026  d803              BHI      |L18.48|
;;;3425   			*nclst = fs->free_clust;
000028  6920              LDR      r0,[r4,#0x10]
00002a  f8ca0000          STR      r0,[r10,#0]
00002e  e064              B        |L18.250|
                  |L18.48|
;;;3426   		} else {
;;;3427   			/* Get number of free clusters */
;;;3428   			fat = fs->fs_type;
000030  f894b000          LDRB     r11,[r4,#0]
;;;3429   			nfree = 0;
000034  2600              MOVS     r6,#0
;;;3430   			if (fat == FS_FAT12) {	/* Sector unalighed entries: Search FAT via regular routine. */
000036  f1bb0f01          CMP      r11,#1
00003a  d11c              BNE      |L18.118|
;;;3431   				clst = 2;
00003c  2702              MOVS     r7,#2
;;;3432   				do {
00003e  bf00              NOP      
                  |L18.64|
;;;3433   					stat = get_fat(fs, clst);
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fat
000048  4680              MOV      r8,r0
;;;3434   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00004a  f1080001          ADD      r0,r8,#1
00004e  b910              CBNZ     r0,|L18.86|
000050  2001              MOVS     r0,#1
000052  9001              STR      r0,[sp,#4]
000054  e00e              B        |L18.116|
                  |L18.86|
;;;3435   					if (stat == 1) { res = FR_INT_ERR; break; }
000056  f1b80f01          CMP      r8,#1
00005a  d102              BNE      |L18.98|
00005c  2002              MOVS     r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  e008              B        |L18.116|
                  |L18.98|
;;;3436   					if (stat == 0) nfree++;
000062  f1b80f00          CMP      r8,#0
000066  d100              BNE      |L18.106|
000068  1c76              ADDS     r6,r6,#1
                  |L18.106|
;;;3437   				} while (++clst < fs->n_fatent);
00006a  1c78              ADDS     r0,r7,#1
00006c  4607              MOV      r7,r0
00006e  6961              LDR      r1,[r4,#0x14]
000070  4288              CMP      r0,r1
000072  d3e5              BCC      |L18.64|
                  |L18.116|
000074  e03a              B        |L18.236|
                  |L18.118|
;;;3438   			} else {				/* Sector alighed entries: Accelerate the FAT search. */
;;;3439   				clst = fs->n_fatent; sect = fs->fatbase;
000076  6967              LDR      r7,[r4,#0x14]
000078  6a20              LDR      r0,[r4,#0x20]
00007a  9000              STR      r0,[sp,#0]
;;;3440   				i = 0; p = 0;
00007c  f04f0900          MOV      r9,#0
000080  2500              MOVS     r5,#0
;;;3441   				do {
000082  bf00              NOP      
                  |L18.132|
;;;3442   					if (!i) {
000084  f1b90f00          CMP      r9,#0
000088  d10e              BNE      |L18.168|
;;;3443   						res = move_window(fs, sect++);
00008a  9800              LDR      r0,[sp,#0]
00008c  1c42              ADDS     r2,r0,#1
00008e  4601              MOV      r1,r0
000090  4620              MOV      r0,r4
000092  9200              STR      r2,[sp,#0]
000094  f7fffffe          BL       move_window
000098  9001              STR      r0,[sp,#4]
;;;3444   						if (res != FR_OK) break;
00009a  9801              LDR      r0,[sp,#4]
00009c  b100              CBZ      r0,|L18.160|
00009e  e024              B        |L18.234|
                  |L18.160|
;;;3445   						p = fs->win;
0000a0  f1040530          ADD      r5,r4,#0x30
;;;3446   						i = SS(fs);
0000a4  f8b4900a          LDRH     r9,[r4,#0xa]
                  |L18.168|
;;;3447   					}
;;;3448   					if (fat == FS_FAT16) {
0000a8  f1bb0f02          CMP      r11,#2
0000ac  d109              BNE      |L18.194|
;;;3449   						if (LD_WORD(p) == 0) nfree++;
0000ae  7828              LDRB     r0,[r5,#0]
0000b0  7869              LDRB     r1,[r5,#1]
0000b2  ea402001          ORR      r0,r0,r1,LSL #8
0000b6  b900              CBNZ     r0,|L18.186|
0000b8  1c76              ADDS     r6,r6,#1
                  |L18.186|
;;;3450   						p += 2; i -= 2;
0000ba  1cad              ADDS     r5,r5,#2
0000bc  f1a90902          SUB      r9,r9,#2
0000c0  e010              B        |L18.228|
                  |L18.194|
;;;3451   					} else {
;;;3452   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) nfree++;
0000c2  78e8              LDRB     r0,[r5,#3]
0000c4  0600              LSLS     r0,r0,#24
0000c6  78a9              LDRB     r1,[r5,#2]
0000c8  ea404001          ORR      r0,r0,r1,LSL #16
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  ea402001          ORR      r0,r0,r1,LSL #8
0000d2  7829              LDRB     r1,[r5,#0]
0000d4  4308              ORRS     r0,r0,r1
0000d6  f0204070          BIC      r0,r0,#0xf0000000
0000da  b900              CBNZ     r0,|L18.222|
0000dc  1c76              ADDS     r6,r6,#1
                  |L18.222|
;;;3453   						p += 4; i -= 4;
0000de  1d2d              ADDS     r5,r5,#4
0000e0  f1a90904          SUB      r9,r9,#4
                  |L18.228|
;;;3454   					}
;;;3455   				} while (--clst);
0000e4  1e78              SUBS     r0,r7,#1
0000e6  1e07              SUBS     r7,r0,#0
0000e8  d1cc              BNE      |L18.132|
                  |L18.234|
0000ea  bf00              NOP                            ;3444
                  |L18.236|
;;;3456   			}
;;;3457   			fs->free_clust = nfree;	/* free_clust is valid */
0000ec  6126              STR      r6,[r4,#0x10]
;;;3458   			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
0000ee  7960              LDRB     r0,[r4,#5]
0000f0  f0400001          ORR      r0,r0,#1
0000f4  7160              STRB     r0,[r4,#5]
;;;3459   			*nclst = nfree;			/* Return the free clusters */
0000f6  f8ca6000          STR      r6,[r10,#0]
                  |L18.250|
;;;3460   		}
;;;3461   	}
;;;3462   	LEAVE_FF(fs, res);
0000fa  9801              LDR      r0,[sp,#4]
;;;3463   }
0000fc  b005              ADD      sp,sp,#0x14
0000fe  e8bd8ff0          POP      {r4-r11,pc}
;;;3464   
                          ENDP


                          AREA ||i.f_gets||, CODE, READONLY, ALIGN=1

                  f_gets PROC
;;;4383   
;;;4384   TCHAR* f_gets (
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;4385   	TCHAR* buff,	/* Pointer to the string buffer to read */
;;;4386   	int len,		/* Size of string buffer (characters) */
;;;4387   	FIL* fp			/* Pointer to the file object */
;;;4388   )
;;;4389   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;4390   	int n = 0;
00000a  2400              MOVS     r4,#0
;;;4391   	TCHAR c, *p = buff;
00000c  463e              MOV      r6,r7
;;;4392   	BYTE s[2];
;;;4393   	UINT rc;
;;;4394   
;;;4395   
;;;4396   	while (n < len - 1) {	/* Read characters until buffer gets filled */
00000e  e013              B        |L19.56|
                  |L19.16|
;;;4397   #if _USE_LFN && _LFN_UNICODE
;;;4398   #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
;;;4399   		f_read(fp, s, 1, &rc);
;;;4400   		if (rc != 1) break;
;;;4401   		c = s[0];
;;;4402   		if (c >= 0x80) {
;;;4403   			if (c < 0xC0) continue;	/* Skip stray trailer */
;;;4404   			if (c < 0xE0) {			/* Two-byte sequence */
;;;4405   				f_read(fp, s, 1, &rc);
;;;4406   				if (rc != 1) break;
;;;4407   				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
;;;4408   				if (c < 0x80) c = '?';
;;;4409   			} else {
;;;4410   				if (c < 0xF0) {		/* Three-byte sequence */
;;;4411   					f_read(fp, s, 2, &rc);
;;;4412   					if (rc != 2) break;
;;;4413   					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
;;;4414   					if (c < 0x800) c = '?';
;;;4415   				} else {			/* Reject four-byte sequence */
;;;4416   					c = '?';
;;;4417   				}
;;;4418   			}
;;;4419   		}
;;;4420   #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
;;;4421   		f_read(fp, s, 2, &rc);
;;;4422   		if (rc != 2) break;
;;;4423   		c = s[1] + (s[0] << 8);
;;;4424   #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
;;;4425   		f_read(fp, s, 2, &rc);
;;;4426   		if (rc != 2) break;
;;;4427   		c = s[0] + (s[1] << 8);
;;;4428   #else						/* Read a character in ANSI/OEM */
;;;4429   		f_read(fp, s, 1, &rc);
;;;4430   		if (rc != 1) break;
;;;4431   		c = s[0];
;;;4432   		if (IsDBCS1(c)) {
;;;4433   			f_read(fp, s, 1, &rc);
;;;4434   			if (rc != 1) break;
;;;4435   			c = (c << 8) + s[0];
;;;4436   		}
;;;4437   		c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;4438   		if (!c) c = '?';
;;;4439   #endif
;;;4440   #else						/* Read a character without conversion */
;;;4441   		f_read(fp, s, 1, &rc);
000010  466b              MOV      r3,sp
000012  2201              MOVS     r2,#1
000014  a901              ADD      r1,sp,#4
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       f_read
;;;4442   		if (rc != 1) break;
00001c  9800              LDR      r0,[sp,#0]
00001e  2801              CMP      r0,#1
000020  d000              BEQ      |L19.36|
000022  e00d              B        |L19.64|
                  |L19.36|
;;;4443   		c = s[0];
000024  f89d5004          LDRB     r5,[sp,#4]
;;;4444   #endif
;;;4445   		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
000028  bf00              NOP      
;;;4446   		*p++ = c;
00002a  f8065b01          STRB     r5,[r6],#1
;;;4447   		n++;
00002e  1c64              ADDS     r4,r4,#1
;;;4448   		if (c == '\n') break;		/* Break on EOL */
000030  2d0a              CMP      r5,#0xa
000032  d100              BNE      |L19.54|
000034  e004              B        |L19.64|
                  |L19.54|
000036  bf00              NOP                            ;4445
                  |L19.56|
000038  f1a80001          SUB      r0,r8,#1              ;4396
00003c  42a0              CMP      r0,r4                 ;4396
00003e  dce7              BGT      |L19.16|
                  |L19.64|
000040  bf00              NOP                            ;4442
;;;4449   	}
;;;4450   	*p = 0;
000042  2000              MOVS     r0,#0
000044  7030              STRB     r0,[r6,#0]
;;;4451   	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
000046  b114              CBZ      r4,|L19.78|
000048  4638              MOV      r0,r7
                  |L19.74|
;;;4452   }
00004a  e8bd87fc          POP      {r2-r10,pc}
                  |L19.78|
00004e  2000              MOVS     r0,#0                 ;4451
000050  e7fb              B        |L19.74|
;;;4453   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;3030   
;;;3031   FRESULT f_lseek (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3032   	FIL* fp,		/* Pointer to the file object */
;;;3033   	DWORD ofs		/* File pointer from top of file */
;;;3034   )
;;;3035   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;3036   	FRESULT res;
;;;3037   	DWORD clst, bcs, nsect, ifptr;
;;;3038   #if _USE_FASTSEEK
;;;3039   	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;3040   #endif
;;;3041   
;;;3042   
;;;3043   	res = validate(fp);					/* Check validity of the object */
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       validate
00000e  4682              MOV      r10,r0
;;;3044   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000010  f1ba0f00          CMP      r10,#0
000014  d002              BEQ      |L20.28|
000016  4650              MOV      r0,r10
                  |L20.24|
;;;3045   	if (fp->err)						/* Check error */
;;;3046   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;3047   
;;;3048   #if _USE_FASTSEEK
;;;3049   	if (fp->cltbl) {	/* Fast seek */
;;;3050   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;3051   			tbl = fp->cltbl;
;;;3052   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;3053   			cl = fp->sclust;			/* Top of the chain */
;;;3054   			if (cl) {
;;;3055   				do {
;;;3056   					/* Get a fragment */
;;;3057   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;3058   					do {
;;;3059   						pcl = cl; ncl++;
;;;3060   						cl = get_fat(fp->fs, cl);
;;;3061   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;3062   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3063   					} while (cl == pcl + 1);
;;;3064   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;3065   						*tbl++ = ncl; *tbl++ = tcl;
;;;3066   					}
;;;3067   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;3068   			}
;;;3069   			*fp->cltbl = ulen;	/* Number of items used */
;;;3070   			if (ulen <= tlen)
;;;3071   				*tbl = 0;		/* Terminate table */
;;;3072   			else
;;;3073   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;3074   
;;;3075   		} else {						/* Fast seek */
;;;3076   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;3077   				ofs = fp->fsize;
;;;3078   			fp->fptr = ofs;				/* Set file pointer */
;;;3079   			if (ofs) {
;;;3080   				fp->clust = clmt_clust(fp, ofs - 1);
;;;3081   				dsc = clust2sect(fp->fs, fp->clust);
;;;3082   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;3083   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;3084   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;3085   #if !_FS_TINY
;;;3086   #if !_FS_READONLY
;;;3087   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;3088   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3089   							ABORT(fp->fs, FR_DISK_ERR);
;;;3090   						fp->flag &= ~FA__DIRTY;
;;;3091   					}
;;;3092   #endif
;;;3093   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;3094   						ABORT(fp->fs, FR_DISK_ERR);
;;;3095   #endif
;;;3096   					fp->dsect = dsc;
;;;3097   				}
;;;3098   			}
;;;3099   		}
;;;3100   	} else
;;;3101   #endif
;;;3102   
;;;3103   	/* Normal Seek */
;;;3104   	{
;;;3105   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;3106   #if !_FS_READONLY
;;;3107   			 && !(fp->flag & FA_WRITE)
;;;3108   #endif
;;;3109   			) ofs = fp->fsize;
;;;3110   
;;;3111   		ifptr = fp->fptr;
;;;3112   		fp->fptr = nsect = 0;
;;;3113   		if (ofs) {
;;;3114   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;3115   			if (ifptr > 0 &&
;;;3116   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;3117   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;3118   				ofs -= fp->fptr;
;;;3119   				clst = fp->clust;
;;;3120   			} else {									/* When seek to back cluster, */
;;;3121   				clst = fp->sclust;						/* start from the first cluster */
;;;3122   #if !_FS_READONLY
;;;3123   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;3124   					clst = create_chain(fp->fs, 0);
;;;3125   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;3126   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3127   					fp->sclust = clst;
;;;3128   				}
;;;3129   #endif
;;;3130   				fp->clust = clst;
;;;3131   			}
;;;3132   			if (clst != 0) {
;;;3133   				while (ofs > bcs) {						/* Cluster following loop */
;;;3134   #if !_FS_READONLY
;;;3135   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;3136   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;3137   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;3138   							ofs = bcs; break;
;;;3139   						}
;;;3140   					} else
;;;3141   #endif
;;;3142   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;3143   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3144   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;3145   					fp->clust = clst;
;;;3146   					fp->fptr += bcs;
;;;3147   					ofs -= bcs;
;;;3148   				}
;;;3149   				fp->fptr += ofs;
;;;3150   				if (ofs % SS(fp->fs)) {
;;;3151   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;3152   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;3153   					nsect += ofs / SS(fp->fs);
;;;3154   				}
;;;3155   			}
;;;3156   		}
;;;3157   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3158   #if !_FS_TINY
;;;3159   #if !_FS_READONLY
;;;3160   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3161   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3162   					ABORT(fp->fs, FR_DISK_ERR);
;;;3163   				fp->flag &= ~FA__DIRTY;
;;;3164   			}
;;;3165   #endif
;;;3166   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;3167   				ABORT(fp->fs, FR_DISK_ERR);
;;;3168   #endif
;;;3169   			fp->dsect = nsect;
;;;3170   		}
;;;3171   #if !_FS_READONLY
;;;3172   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3173   			fp->fsize = fp->fptr;
;;;3174   			fp->flag |= FA__WRITTEN;
;;;3175   		}
;;;3176   #endif
;;;3177   	}
;;;3178   
;;;3179   	LEAVE_FF(fp->fs, res);
;;;3180   }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L20.28|
00001c  79e0              LDRB     r0,[r4,#7]            ;3045
00001e  b108              CBZ      r0,|L20.36|
000020  79e0              LDRB     r0,[r4,#7]            ;3046
000022  e7f9              B        |L20.24|
                  |L20.36|
000024  68e0              LDR      r0,[r4,#0xc]          ;3105
000026  42b0              CMP      r0,r6                 ;3105
000028  d204              BCS      |L20.52|
00002a  79a0              LDRB     r0,[r4,#6]            ;3107
00002c  f0000002          AND      r0,r0,#2              ;3107
000030  b900              CBNZ     r0,|L20.52|
000032  68e6              LDR      r6,[r4,#0xc]          ;3109
                  |L20.52|
000034  f8d49008          LDR      r9,[r4,#8]            ;3111
000038  f04f0800          MOV      r8,#0                 ;3112
00003c  f8c48008          STR      r8,[r4,#8]            ;3112
000040  2e00              CMP      r6,#0                 ;3113
000042  d071              BEQ      |L20.296|
000044  6820              LDR      r0,[r4,#0]            ;3114
000046  7880              LDRB     r0,[r0,#2]            ;3114
000048  6821              LDR      r1,[r4,#0]            ;3114
00004a  8949              LDRH     r1,[r1,#0xa]          ;3114
00004c  fb00f701          MUL      r7,r0,r1              ;3114
000050  f1b90f00          CMP      r9,#0                 ;3115
000054  d011              BEQ      |L20.122|
000056  1e70              SUBS     r0,r6,#1              ;3116
000058  fbb0f1f7          UDIV     r1,r0,r7              ;3116
00005c  f1a90001          SUB      r0,r9,#1              ;3116
000060  fbb0f0f7          UDIV     r0,r0,r7              ;3116
000064  4281              CMP      r1,r0                 ;3116
000066  d308              BCC      |L20.122|
000068  f1a90001          SUB      r0,r9,#1              ;3117
00006c  1e79              SUBS     r1,r7,#1              ;3117
00006e  4388              BICS     r0,r0,r1              ;3117
000070  60a0              STR      r0,[r4,#8]            ;3117
000072  68a0              LDR      r0,[r4,#8]            ;3118
000074  1a36              SUBS     r6,r6,r0              ;3118
000076  6965              LDR      r5,[r4,#0x14]         ;3119
000078  e012              B        |L20.160|
                  |L20.122|
00007a  6925              LDR      r5,[r4,#0x10]         ;3121
00007c  b97d              CBNZ     r5,|L20.158|
00007e  2100              MOVS     r1,#0                 ;3124
000080  6820              LDR      r0,[r4,#0]            ;3124
000082  f7fffffe          BL       create_chain
000086  4605              MOV      r5,r0                 ;3124
000088  2d01              CMP      r5,#1                 ;3125
00008a  d102              BNE      |L20.146|
00008c  2002              MOVS     r0,#2                 ;3125
00008e  71e0              STRB     r0,[r4,#7]            ;3125
000090  e7c2              B        |L20.24|
                  |L20.146|
000092  1c68              ADDS     r0,r5,#1              ;3126
000094  b910              CBNZ     r0,|L20.156|
000096  2001              MOVS     r0,#1                 ;3126
000098  71e0              STRB     r0,[r4,#7]            ;3126
00009a  e7bd              B        |L20.24|
                  |L20.156|
00009c  6125              STR      r5,[r4,#0x10]         ;3127
                  |L20.158|
00009e  6165              STR      r5,[r4,#0x14]         ;3130
                  |L20.160|
0000a0  2d00              CMP      r5,#0                 ;3132
0000a2  d041              BEQ      |L20.296|
0000a4  e023              B        |L20.238|
                  |L20.166|
0000a6  79a0              LDRB     r0,[r4,#6]            ;3135
0000a8  f0000002          AND      r0,r0,#2              ;3135
0000ac  b138              CBZ      r0,|L20.190|
0000ae  4629              MOV      r1,r5                 ;3136
0000b0  6820              LDR      r0,[r4,#0]            ;3136
0000b2  f7fffffe          BL       create_chain
0000b6  4605              MOV      r5,r0                 ;3136
0000b8  b935              CBNZ     r5,|L20.200|
0000ba  463e              MOV      r6,r7                 ;3138
0000bc  e019              B        |L20.242|
                  |L20.190|
0000be  4629              MOV      r1,r5                 ;3142
0000c0  6820              LDR      r0,[r4,#0]            ;3142
0000c2  f7fffffe          BL       get_fat
0000c6  4605              MOV      r5,r0                 ;3142
                  |L20.200|
0000c8  1c68              ADDS     r0,r5,#1              ;3143
0000ca  b910              CBNZ     r0,|L20.210|
0000cc  2001              MOVS     r0,#1                 ;3143
0000ce  71e0              STRB     r0,[r4,#7]            ;3143
0000d0  e7a2              B        |L20.24|
                  |L20.210|
0000d2  2d01              CMP      r5,#1                 ;3144
0000d4  d903              BLS      |L20.222|
0000d6  6820              LDR      r0,[r4,#0]            ;3144
0000d8  6940              LDR      r0,[r0,#0x14]         ;3144
0000da  42a8              CMP      r0,r5                 ;3144
0000dc  d802              BHI      |L20.228|
                  |L20.222|
0000de  2002              MOVS     r0,#2                 ;3144
0000e0  71e0              STRB     r0,[r4,#7]            ;3144
0000e2  e799              B        |L20.24|
                  |L20.228|
0000e4  6165              STR      r5,[r4,#0x14]         ;3145
0000e6  68a0              LDR      r0,[r4,#8]            ;3146
0000e8  4438              ADD      r0,r0,r7              ;3146
0000ea  60a0              STR      r0,[r4,#8]            ;3146
0000ec  1bf6              SUBS     r6,r6,r7              ;3147
                  |L20.238|
0000ee  42be              CMP      r6,r7                 ;3133
0000f0  d8d9              BHI      |L20.166|
                  |L20.242|
0000f2  bf00              NOP                            ;3138
0000f4  68a0              LDR      r0,[r4,#8]            ;3149
0000f6  4430              ADD      r0,r0,r6              ;3149
0000f8  60a0              STR      r0,[r4,#8]            ;3149
0000fa  6820              LDR      r0,[r4,#0]            ;3150
0000fc  8940              LDRH     r0,[r0,#0xa]          ;3150
0000fe  fbb6f1f0          UDIV     r1,r6,r0              ;3150
000102  fb006011          MLS      r0,r0,r1,r6           ;3150
000106  b178              CBZ      r0,|L20.296|
000108  4629              MOV      r1,r5                 ;3151
00010a  6820              LDR      r0,[r4,#0]            ;3151
00010c  f7fffffe          BL       clust2sect
000110  4680              MOV      r8,r0                 ;3151
000112  f1b80f00          CMP      r8,#0                 ;3152
000116  d102              BNE      |L20.286|
000118  2002              MOVS     r0,#2                 ;3152
00011a  71e0              STRB     r0,[r4,#7]            ;3152
00011c  e77c              B        |L20.24|
                  |L20.286|
00011e  6820              LDR      r0,[r4,#0]            ;3153
000120  8940              LDRH     r0,[r0,#0xa]          ;3153
000122  fbb6f0f0          UDIV     r0,r6,r0              ;3153
000126  4480              ADD      r8,r8,r0              ;3153
                  |L20.296|
000128  6821              LDR      r1,[r4,#0]            ;3157
00012a  8949              LDRH     r1,[r1,#0xa]          ;3157
00012c  68a0              LDR      r0,[r4,#8]            ;3157
00012e  fbb0f2f1          UDIV     r2,r0,r1              ;3157
000132  fb010012          MLS      r0,r1,r2,r0           ;3157
000136  b320              CBZ      r0,|L20.386|
000138  69a0              LDR      r0,[r4,#0x18]         ;3157
00013a  4540              CMP      r0,r8                 ;3157
00013c  d021              BEQ      |L20.386|
00013e  79a0              LDRB     r0,[r4,#6]            ;3160
000140  f0000040          AND      r0,r0,#0x40           ;3160
000144  b178              CBZ      r0,|L20.358|
000146  6821              LDR      r1,[r4,#0]            ;3161
000148  7848              LDRB     r0,[r1,#1]            ;3161
00014a  2301              MOVS     r3,#1                 ;3161
00014c  f1040124          ADD      r1,r4,#0x24           ;3161
000150  69a2              LDR      r2,[r4,#0x18]         ;3161
000152  f7fffffe          BL       disk_write
000156  b110              CBZ      r0,|L20.350|
000158  2001              MOVS     r0,#1                 ;3162
00015a  71e0              STRB     r0,[r4,#7]            ;3162
00015c  e75c              B        |L20.24|
                  |L20.350|
00015e  79a0              LDRB     r0,[r4,#6]            ;3163
000160  f0200040          BIC      r0,r0,#0x40           ;3163
000164  71a0              STRB     r0,[r4,#6]            ;3163
                  |L20.358|
000166  6821              LDR      r1,[r4,#0]            ;3166
000168  7848              LDRB     r0,[r1,#1]            ;3166
00016a  2301              MOVS     r3,#1                 ;3166
00016c  4642              MOV      r2,r8                 ;3166
00016e  f1040124          ADD      r1,r4,#0x24           ;3166
000172  f7fffffe          BL       disk_read
000176  b110              CBZ      r0,|L20.382|
000178  2001              MOVS     r0,#1                 ;3167
00017a  71e0              STRB     r0,[r4,#7]            ;3167
00017c  e74c              B        |L20.24|
                  |L20.382|
00017e  f8c48018          STR      r8,[r4,#0x18]         ;3169
                  |L20.386|
000182  e9d40102          LDRD     r0,r1,[r4,#8]         ;3172
000186  4288              CMP      r0,r1                 ;3172
000188  d905              BLS      |L20.406|
00018a  68a0              LDR      r0,[r4,#8]            ;3173
00018c  60e0              STR      r0,[r4,#0xc]          ;3173
00018e  79a0              LDRB     r0,[r4,#6]            ;3174
000190  f0400020          ORR      r0,r0,#0x20           ;3174
000194  71a0              STRB     r0,[r4,#6]            ;3174
                  |L20.406|
000196  4650              MOV      r0,r10                ;3179
000198  e73e              B        |L20.24|
;;;3181   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;3596   
;;;3597   FRESULT f_mkdir (
000000  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3598   	const TCHAR* path		/* Pointer to the directory path */
;;;3599   )
;;;3600   {
000004  f5ad7d0d          SUB      sp,sp,#0x234
;;;3601   	FRESULT res;
;;;3602   	DIR dj;
;;;3603   	BYTE *dir, n;
;;;3604   	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
000008  f7fffffe          BL       get_fattime
00000c  4606              MOV      r6,r0
;;;3605   	DEFINE_NAMEBUF;
;;;3606   
;;;3607   
;;;3608   	/* Get logical drive number */
;;;3609   	res = find_volume(&dj.fs, &path, 1);
00000e  2201              MOVS     r2,#1
000010  a98d              ADD      r1,sp,#0x234
000012  a884              ADD      r0,sp,#0x210
000014  f7fffffe          BL       find_volume
000018  4605              MOV      r5,r0
;;;3610   	if (res == FR_OK) {
00001a  2d00              CMP      r5,#0
                  |L21.28|
00001c  d16f              BNE      |L21.254|
;;;3611   		INIT_BUF(dj);
00001e  a881              ADD      r0,sp,#0x204
000020  908a              STR      r0,[sp,#0x228]
000022  a801              ADD      r0,sp,#4
000024  908b              STR      r0,[sp,#0x22c]
;;;3612   		res = follow_path(&dj, path);			/* Follow the file path */
000026  a884              ADD      r0,sp,#0x210
000028  998d              LDR      r1,[sp,#0x234]
00002a  f7fffffe          BL       follow_path
00002e  4605              MOV      r5,r0
;;;3613   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
000030  b905              CBNZ     r5,|L21.52|
000032  2508              MOVS     r5,#8
                  |L21.52|
;;;3614   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
000034  bf00              NOP      
;;;3615   			res = FR_INVALID_NAME;
;;;3616   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000036  2d04              CMP      r5,#4
000038  d1f0              BNE      |L21.28|
;;;3617   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
00003a  2100              MOVS     r1,#0
00003c  9884              LDR      r0,[sp,#0x210]
00003e  f7fffffe          BL       create_chain
000042  4607              MOV      r7,r0
;;;3618   			res = FR_OK;
000044  2500              MOVS     r5,#0
;;;3619   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000046  b907              CBNZ     r7,|L21.74|
000048  2507              MOVS     r5,#7
                  |L21.74|
;;;3620   			if (dcl == 1) res = FR_INT_ERR;
00004a  2f01              CMP      r7,#1
00004c  d100              BNE      |L21.80|
00004e  2502              MOVS     r5,#2
                  |L21.80|
;;;3621   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
000050  1c78              ADDS     r0,r7,#1
000052  b900              CBNZ     r0,|L21.86|
000054  2501              MOVS     r5,#1
                  |L21.86|
;;;3622   			if (res == FR_OK)					/* Flush FAT */
000056  b91d              CBNZ     r5,|L21.96|
;;;3623   				res = sync_window(dj.fs);
000058  9884              LDR      r0,[sp,#0x210]
00005a  f7fffffe          BL       sync_window
00005e  4605              MOV      r5,r0
                  |L21.96|
;;;3624   			if (res == FR_OK) {					/* Initialize the new directory table */
000060  2d00              CMP      r5,#0
000062  d15b              BNE      |L21.284|
;;;3625   				dsc = clust2sect(dj.fs, dcl);
000064  4639              MOV      r1,r7
000066  9884              LDR      r0,[sp,#0x210]
000068  f7fffffe          BL       clust2sect
00006c  4681              MOV      r9,r0
;;;3626   				dir = dj.fs->win;
00006e  9884              LDR      r0,[sp,#0x210]
000070  f1000430          ADD      r4,r0,#0x30
;;;3627   				mem_set(dir, 0, SS(dj.fs));
000074  9884              LDR      r0,[sp,#0x210]
000076  8942              LDRH     r2,[r0,#0xa]
000078  2100              MOVS     r1,#0
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       mem_set
;;;3628   				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
000080  220b              MOVS     r2,#0xb
000082  2120              MOVS     r1,#0x20
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       mem_set
;;;3629   				dir[DIR_Name] = '.';
00008a  202e              MOVS     r0,#0x2e
00008c  7020              STRB     r0,[r4,#0]
;;;3630   				dir[DIR_Attr] = AM_DIR;
00008e  2010              MOVS     r0,#0x10
000090  72e0              STRB     r0,[r4,#0xb]
;;;3631   				ST_DWORD(dir + DIR_WrtTime, tm);
000092  75a6              STRB     r6,[r4,#0x16]
000094  0a31              LSRS     r1,r6,#8
000096  75e1              STRB     r1,[r4,#0x17]
000098  0c31              LSRS     r1,r6,#16
00009a  7621              STRB     r1,[r4,#0x18]
00009c  0e31              LSRS     r1,r6,#24
00009e  7661              STRB     r1,[r4,#0x19]
;;;3632   				st_clust(dir, dcl);
0000a0  4639              MOV      r1,r7
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       st_clust
;;;3633   				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
0000a8  2220              MOVS     r2,#0x20
0000aa  4621              MOV      r1,r4
0000ac  f1040020          ADD      r0,r4,#0x20
0000b0  f7fffffe          BL       mem_cpy
;;;3634   				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
0000b4  202e              MOVS     r0,#0x2e
0000b6  f8840021          STRB     r0,[r4,#0x21]
0000ba  f8dda218          LDR      r10,[sp,#0x218]
;;;3635   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000be  9884              LDR      r0,[sp,#0x210]
0000c0  7800              LDRB     r0,[r0,#0]
0000c2  2803              CMP      r0,#3
0000c4  d104              BNE      |L21.208|
0000c6  9884              LDR      r0,[sp,#0x210]
0000c8  6a40              LDR      r0,[r0,#0x24]
0000ca  4550              CMP      r0,r10
0000cc  d100              BNE      |L21.208|
;;;3636   					pcl = 0;
0000ce  46aa              MOV      r10,r5
                  |L21.208|
;;;3637   				st_clust(dir + SZ_DIRE, pcl);
0000d0  4651              MOV      r1,r10
0000d2  f1040020          ADD      r0,r4,#0x20
0000d6  f7fffffe          BL       st_clust
;;;3638   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
0000da  9884              LDR      r0,[sp,#0x210]
0000dc  f8908002          LDRB     r8,[r0,#2]
0000e0  e018              B        |L21.276|
                  |L21.226|
;;;3639   					dj.fs->winsect = dsc++;
0000e2  9884              LDR      r0,[sp,#0x210]
0000e4  f8c0902c          STR      r9,[r0,#0x2c]
0000e8  f1090901          ADD      r9,r9,#1
;;;3640   					dj.fs->wflag = 1;
0000ec  2001              MOVS     r0,#1
0000ee  9984              LDR      r1,[sp,#0x210]
0000f0  7108              STRB     r0,[r1,#4]
;;;3641   					res = sync_window(dj.fs);
0000f2  9884              LDR      r0,[sp,#0x210]
0000f4  f7fffffe          BL       sync_window
0000f8  4605              MOV      r5,r0
;;;3642   					if (res != FR_OK) break;
0000fa  b10d              CBZ      r5,|L21.256|
0000fc  e00d              B        |L21.282|
                  |L21.254|
0000fe  e02d              B        |L21.348|
                  |L21.256|
;;;3643   					mem_set(dir, 0, SS(dj.fs));
000100  9884              LDR      r0,[sp,#0x210]
000102  8942              LDRH     r2,[r0,#0xa]
000104  2100              MOVS     r1,#0
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       mem_set
00010c  f1a80001          SUB      r0,r8,#1              ;3638
000110  f00008ff          AND      r8,r0,#0xff           ;3638
                  |L21.276|
000114  f1b80f00          CMP      r8,#0                 ;3638
000118  d1e3              BNE      |L21.226|
                  |L21.282|
00011a  bf00              NOP                            ;3642
                  |L21.284|
;;;3644   				}
;;;3645   			}
;;;3646   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
00011c  b91d              CBNZ     r5,|L21.294|
00011e  a884              ADD      r0,sp,#0x210
000120  f7fffffe          BL       dir_register
000124  4605              MOV      r5,r0
                  |L21.294|
;;;3647   			if (res != FR_OK) {
000126  b125              CBZ      r5,|L21.306|
;;;3648   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
000128  4639              MOV      r1,r7
00012a  9884              LDR      r0,[sp,#0x210]
00012c  f7fffffe          BL       remove_chain
000130  e014              B        |L21.348|
                  |L21.306|
;;;3649   			} else {
;;;3650   				dir = dj.dir;
000132  9c89              LDR      r4,[sp,#0x224]
;;;3651   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
000134  2010              MOVS     r0,#0x10
000136  72e0              STRB     r0,[r4,#0xb]
;;;3652   				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
000138  75a6              STRB     r6,[r4,#0x16]
00013a  0a31              LSRS     r1,r6,#8
00013c  75e1              STRB     r1,[r4,#0x17]
00013e  0c31              LSRS     r1,r6,#16
000140  7621              STRB     r1,[r4,#0x18]
000142  0e31              LSRS     r1,r6,#24
000144  7661              STRB     r1,[r4,#0x19]
;;;3653   				st_clust(dir, dcl);					/* Table start cluster */
000146  4639              MOV      r1,r7
000148  4620              MOV      r0,r4
00014a  f7fffffe          BL       st_clust
;;;3654   				dj.fs->wflag = 1;
00014e  2001              MOVS     r0,#1
000150  9984              LDR      r1,[sp,#0x210]
000152  7108              STRB     r0,[r1,#4]
;;;3655   				res = sync_fs(dj.fs);
000154  9884              LDR      r0,[sp,#0x210]
000156  f7fffffe          BL       sync_fs
00015a  4605              MOV      r5,r0
                  |L21.348|
;;;3656   			}
;;;3657   		}
;;;3658   		FREE_BUF();
;;;3659   	}
;;;3660   
;;;3661   	LEAVE_FF(dj.fs, res);
00015c  4628              MOV      r0,r5
;;;3662   }
00015e  f50d7d0e          ADD      sp,sp,#0x238
000162  e8bd87f0          POP      {r4-r10,pc}
;;;3663   
                          ENDP


                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;4064   
;;;4065   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;4066   	const TCHAR* path,	/* Logical drive number */
;;;4067   	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
;;;4068   	UINT au				/* Size of allocation unit in unit of byte or sector */
;;;4069   )
;;;4070   {
000004  b090              SUB      sp,sp,#0x40
000006  4691              MOV      r9,r2
;;;4071   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;4072   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;4073   	int vol;
;;;4074   	BYTE fmt, md, sys, *tbl, pdrv, part;
;;;4075   	DWORD n_clst, vs, n, wsect;
;;;4076   	UINT i;
;;;4077   	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
;;;4078   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;4079   	FATFS *fs;
;;;4080   	DSTATUS stat;
;;;4081   #if _USE_TRIM
;;;4082   	DWORD eb[2];
;;;4083   #endif
;;;4084   
;;;4085   
;;;4086   	/* Check mounted drive and clear work area */
;;;4087   	if (sfd > 1) return FR_INVALID_PARAMETER;
000008  9811              LDR      r0,[sp,#0x44]
00000a  2801              CMP      r0,#1
00000c  dd03              BLE      |L22.22|
00000e  2013              MOVS     r0,#0x13
                  |L22.16|
;;;4088   	vol = get_ldnumber(&path);
;;;4089   	if (vol < 0) return FR_INVALID_DRIVE;
;;;4090   	fs = FatFs[vol];
;;;4091   	if (!fs) return FR_NOT_ENABLED;
;;;4092   	fs->fs_type = 0;
;;;4093   	pdrv = LD2PD(vol);	/* Physical drive */
;;;4094   	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
;;;4095   
;;;4096   	/* Get disk statics */
;;;4097   	stat = disk_initialize(pdrv);
;;;4098   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;4099   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;4100   #if _MAX_SS != _MIN_SS		/* Get disk sector size */
;;;4101   	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
;;;4102   		return FR_DISK_ERR;
;;;4103   #endif
;;;4104   	if (_MULTI_PARTITION && part) {
;;;4105   		/* Get partition information from partition table in the MBR */
;;;4106   		if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
;;;4107   		if (LD_WORD(fs->win + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;4108   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4109   		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
;;;4110   		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
;;;4111   		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
;;;4112   	} else {
;;;4113   		/* Create a partition in this function */
;;;4114   		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;4115   			return FR_DISK_ERR;
;;;4116   		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
;;;4117   		n_vol -= b_vol;				/* Volume size */
;;;4118   	}
;;;4119   
;;;4120   	if (au & (au - 1)) au = 0;
;;;4121   	if (!au) {						/* AU auto selection */
;;;4122   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;4123   		for (i = 0; vs < vst[i]; i++) ;
;;;4124   		au = cst[i];
;;;4125   	}
;;;4126   	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
;;;4127   	if (!au) au = 1;
;;;4128   	if (au > 128) au = 128;
;;;4129   
;;;4130   	/* Pre-compute number of clusters and FAT sub-type */
;;;4131   	n_clst = n_vol / au;
;;;4132   	fmt = FS_FAT12;
;;;4133   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;4134   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;4135   
;;;4136   	/* Determine offset and size of FAT structure */
;;;4137   	if (fmt == FS_FAT32) {
;;;4138   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;4139   		n_rsv = 32;
;;;4140   		n_dir = 0;
;;;4141   	} else {
;;;4142   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;4143   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;4144   		n_rsv = 1;
;;;4145   		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
;;;4146   	}
;;;4147   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;4148   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;4149   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;4150   	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
;;;4151   
;;;4152   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;4153   	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;4154   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;4155   	n = (n - b_data) / N_FATS;
;;;4156   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;4157   		n_rsv += n;
;;;4158   		b_fat += n;
;;;4159   	} else {					/* FAT12/16: Expand FAT size */
;;;4160   		n_fat += n;
;;;4161   	}
;;;4162   
;;;4163   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;4164   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;4165   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;4166   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;4167   		return FR_MKFS_ABORTED;
;;;4168   
;;;4169   	/* Determine system ID in the partition table */
;;;4170   	if (fmt == FS_FAT32) {
;;;4171   		sys = 0x0C;		/* FAT32X */
;;;4172   	} else {
;;;4173   		if (fmt == FS_FAT12 && n_vol < 0x10000) {
;;;4174   			sys = 0x01;	/* FAT12(<65536) */
;;;4175   		} else {
;;;4176   			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
;;;4177   		}
;;;4178   	}
;;;4179   
;;;4180   	if (_MULTI_PARTITION && part) {
;;;4181   		/* Update system ID in the partition table */
;;;4182   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4183   		tbl[4] = sys;
;;;4184   		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
;;;4185   			return FR_DISK_ERR;
;;;4186   		md = 0xF8;
;;;4187   	} else {
;;;4188   		if (sfd) {	/* No partition table (SFD) */
;;;4189   			md = 0xF0;
;;;4190   		} else {	/* Create partition table (FDISK) */
;;;4191   			mem_set(fs->win, 0, SS(fs));
;;;4192   			tbl = fs->win + MBR_Table;	/* Create partition table for single partition in the drive */
;;;4193   			tbl[1] = 1;						/* Partition start head */
;;;4194   			tbl[2] = 1;						/* Partition start sector */
;;;4195   			tbl[3] = 0;						/* Partition start cylinder */
;;;4196   			tbl[4] = sys;					/* System type */
;;;4197   			tbl[5] = 254;					/* Partition end head */
;;;4198   			n = (b_vol + n_vol) / 63 / 255;
;;;4199   			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
;;;4200   			tbl[7] = (BYTE)n;				/* End cylinder */
;;;4201   			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
;;;4202   			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
;;;4203   			ST_WORD(fs->win + BS_55AA, 0xAA55);	/* MBR signature */
;;;4204   			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
;;;4205   				return FR_DISK_ERR;
;;;4206   			md = 0xF8;
;;;4207   		}
;;;4208   	}
;;;4209   
;;;4210   	/* Create BPB in the VBR */
;;;4211   	tbl = fs->win;							/* Clear sector */
;;;4212   	mem_set(tbl, 0, SS(fs));
;;;4213   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;4214   	i = SS(fs);								/* Sector size */
;;;4215   	ST_WORD(tbl + BPB_BytsPerSec, i);
;;;4216   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;4217   	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
;;;4218   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;4219   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
;;;4220   	ST_WORD(tbl + BPB_RootEntCnt, i);
;;;4221   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;4222   		ST_WORD(tbl + BPB_TotSec16, n_vol);
;;;4223   	} else {
;;;4224   		ST_DWORD(tbl + BPB_TotSec32, n_vol);
;;;4225   	}
;;;4226   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;4227   	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
;;;4228   	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
;;;4229   	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;4230   	n = GET_FATTIME();						/* Use current time as VSN */
;;;4231   	if (fmt == FS_FAT32) {
;;;4232   		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
;;;4233   		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;4234   		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
;;;4235   		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
;;;4236   		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
;;;4237   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;4238   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;4239   		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;4240   	} else {
;;;4241   		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
;;;4242   		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;4243   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;4244   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;4245   		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;4246   	}
;;;4247   	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;4248   	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
;;;4249   		return FR_DISK_ERR;
;;;4250   	if (fmt == FS_FAT32)					/* Write it to the backup VBR if needed (VBR + 6) */
;;;4251   		disk_write(pdrv, tbl, b_vol + 6, 1);
;;;4252   
;;;4253   	/* Initialize FAT area */
;;;4254   	wsect = b_fat;
;;;4255   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;4256   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;4257   		n = md;								/* Media descriptor byte */
;;;4258   		if (fmt != FS_FAT32) {
;;;4259   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;4260   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
;;;4261   		} else {
;;;4262   			n |= 0xFFFFFF00;
;;;4263   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
;;;4264   			ST_DWORD(tbl + 4, 0xFFFFFFFF);
;;;4265   			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
;;;4266   		}
;;;4267   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4268   			return FR_DISK_ERR;
;;;4269   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;4270   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;4271   			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4272   				return FR_DISK_ERR;
;;;4273   		}
;;;4274   	}
;;;4275   
;;;4276   	/* Initialize root directory */
;;;4277   	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
;;;4278   	do {
;;;4279   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4280   			return FR_DISK_ERR;
;;;4281   	} while (--i);
;;;4282   
;;;4283   #if _USE_TRIM	/* Erase data area if needed */
;;;4284   	{
;;;4285   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;4286   		disk_ioctl(pdrv, CTRL_TRIM, eb);
;;;4287   	}
;;;4288   #endif
;;;4289   
;;;4290   	/* Create FSINFO if needed */
;;;4291   	if (fmt == FS_FAT32) {
;;;4292   		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
;;;4293   		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
;;;4294   		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;4295   		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
;;;4296   		ST_WORD(tbl + BS_55AA, 0xAA55);
;;;4297   		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
;;;4298   		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
;;;4299   	}
;;;4300   
;;;4301   	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;4302   }
000010  b013              ADD      sp,sp,#0x4c
000012  e8bd8ff0          POP      {r4-r11,pc}
                  |L22.22|
000016  a810              ADD      r0,sp,#0x40           ;4088
000018  f7fffffe          BL       get_ldnumber
00001c  900f              STR      r0,[sp,#0x3c]         ;4088
00001e  980f              LDR      r0,[sp,#0x3c]         ;4089
000020  2800              CMP      r0,#0                 ;4089
000022  da01              BGE      |L22.40|
000024  200b              MOVS     r0,#0xb               ;4089
000026  e7f3              B        |L22.16|
                  |L22.40|
000028  49fa              LDR      r1,|L22.1044|
00002a  980f              LDR      r0,[sp,#0x3c]         ;4090
00002c  f8515020          LDR      r5,[r1,r0,LSL #2]     ;4090
000030  b90d              CBNZ     r5,|L22.54|
000032  200c              MOVS     r0,#0xc               ;4091
000034  e7ec              B        |L22.16|
                  |L22.54|
000036  2000              MOVS     r0,#0                 ;4092
000038  7028              STRB     r0,[r5,#0]            ;4092
00003a  980f              LDR      r0,[sp,#0x3c]         ;4093
00003c  b2c0              UXTB     r0,r0                 ;4093
00003e  900c              STR      r0,[sp,#0x30]         ;4093
000040  2000              MOVS     r0,#0                 ;4094
000042  900b              STR      r0,[sp,#0x2c]         ;4094
000044  980c              LDR      r0,[sp,#0x30]         ;4097
000046  f7fffffe          BL       disk_initialize
00004a  9001              STR      r0,[sp,#4]            ;4097
00004c  9801              LDR      r0,[sp,#4]            ;4098
00004e  f0000001          AND      r0,r0,#1              ;4098
000052  b108              CBZ      r0,|L22.88|
000054  2003              MOVS     r0,#3                 ;4098
000056  e7db              B        |L22.16|
                  |L22.88|
000058  9801              LDR      r0,[sp,#4]            ;4099
00005a  f0000004          AND      r0,r0,#4              ;4099
00005e  b108              CBZ      r0,|L22.100|
000060  200a              MOVS     r0,#0xa               ;4099
000062  e7d5              B        |L22.16|
                  |L22.100|
000064  f105020a          ADD      r2,r5,#0xa            ;4101
000068  2102              MOVS     r1,#2                 ;4101
00006a  980c              LDR      r0,[sp,#0x30]         ;4101
00006c  f7fffffe          BL       disk_ioctl
000070  b938              CBNZ     r0,|L22.130|
000072  8968              LDRH     r0,[r5,#0xa]          ;4101
000074  f5b05f80          CMP      r0,#0x1000            ;4101
000078  dc03              BGT      |L22.130|
00007a  8968              LDRH     r0,[r5,#0xa]          ;4101
00007c  f5b07f00          CMP      r0,#0x200             ;4101
000080  da01              BGE      |L22.134|
                  |L22.130|
000082  2001              MOVS     r0,#1                 ;4102
000084  e7c4              B        |L22.16|
                  |L22.134|
000086  bf00              NOP                            ;4104
000088  aa04              ADD      r2,sp,#0x10           ;4114
00008a  2101              MOVS     r1,#1                 ;4114
00008c  980c              LDR      r0,[sp,#0x30]         ;4114
00008e  f7fffffe          BL       disk_ioctl
000092  b910              CBNZ     r0,|L22.154|
000094  9804              LDR      r0,[sp,#0x10]         ;4114
000096  2880              CMP      r0,#0x80              ;4114
000098  d201              BCS      |L22.158|
                  |L22.154|
00009a  2001              MOVS     r0,#1                 ;4115
00009c  e7b8              B        |L22.16|
                  |L22.158|
00009e  9811              LDR      r0,[sp,#0x44]         ;4116
0000a0  b108              CBZ      r0,|L22.166|
0000a2  2000              MOVS     r0,#0                 ;4116
0000a4  e000              B        |L22.168|
                  |L22.166|
0000a6  203f              MOVS     r0,#0x3f              ;4116
                  |L22.168|
0000a8  4682              MOV      r10,r0                ;4116
0000aa  9804              LDR      r0,[sp,#0x10]         ;4117
0000ac  eba0000a          SUB      r0,r0,r10             ;4117
0000b0  9004              STR      r0,[sp,#0x10]         ;4117
0000b2  f1a90001          SUB      r0,r9,#1              ;4120
0000b6  ea000009          AND      r0,r0,r9              ;4120
0000ba  b108              CBZ      r0,|L22.192|
0000bc  f04f0900          MOV      r9,#0                 ;4120
                  |L22.192|
0000c0  f1b90f00          CMP      r9,#0                 ;4121
0000c4  d11a              BNE      |L22.252|
0000c6  8968              LDRH     r0,[r5,#0xa]          ;4122
0000c8  17c1              ASRS     r1,r0,#31             ;4122
0000ca  eb0051d1          ADD      r1,r0,r1,LSR #23      ;4122
0000ce  1249              ASRS     r1,r1,#9              ;4122
0000d0  f44f62fa          MOV      r2,#0x7d0             ;4122
0000d4  fb92f1f1          SDIV     r1,r2,r1              ;4122
0000d8  9a04              LDR      r2,[sp,#0x10]         ;4122
0000da  fbb2f1f1          UDIV     r1,r2,r1              ;4122
0000de  910a              STR      r1,[sp,#0x28]         ;4122
0000e0  f04f0b00          MOV      r11,#0                ;4123
0000e4  e001              B        |L22.234|
                  |L22.230|
0000e6  f10b0b01          ADD      r11,r11,#1            ;4123
                  |L22.234|
0000ea  48cb              LDR      r0,|L22.1048|
0000ec  f830101b          LDRH     r1,[r0,r11,LSL #1]    ;4123
0000f0  980a              LDR      r0,[sp,#0x28]         ;4123
0000f2  4281              CMP      r1,r0                 ;4123
0000f4  d8f7              BHI      |L22.230|
0000f6  48c9              LDR      r0,|L22.1052|
0000f8  f830901b          LDRH     r9,[r0,r11,LSL #1]    ;4124
                  |L22.252|
0000fc  f5b97f00          CMP      r9,#0x200             ;4126
000100  d302              BCC      |L22.264|
000102  8968              LDRH     r0,[r5,#0xa]          ;4126
000104  fbb9f9f0          UDIV     r9,r9,r0              ;4126
                  |L22.264|
000108  f1b90f00          CMP      r9,#0                 ;4127
00010c  d101              BNE      |L22.274|
00010e  f04f0901          MOV      r9,#1                 ;4127
                  |L22.274|
000112  f1b90f80          CMP      r9,#0x80              ;4128
000116  d901              BLS      |L22.284|
000118  f04f0980          MOV      r9,#0x80              ;4128
                  |L22.284|
00011c  9804              LDR      r0,[sp,#0x10]         ;4131
00011e  fbb0f8f9          UDIV     r8,r0,r9              ;4131
000122  2601              MOVS     r6,#1                 ;4132
000124  f64070f6          MOV      r0,#0xff6             ;4133
000128  4580              CMP      r8,r0                 ;4133
00012a  d300              BCC      |L22.302|
00012c  2602              MOVS     r6,#2                 ;4133
                  |L22.302|
00012e  f64f70f6          MOV      r0,#0xfff6            ;4134
000132  4580              CMP      r8,r0                 ;4134
000134  d300              BCC      |L22.312|
000136  2603              MOVS     r6,#3                 ;4134
                  |L22.312|
000138  2e03              CMP      r6,#3                 ;4137
00013a  d10c              BNE      |L22.342|
00013c  2008              MOVS     r0,#8                 ;4138
00013e  eb000088          ADD      r0,r0,r8,LSL #2       ;4138
000142  8969              LDRH     r1,[r5,#0xa]          ;4138
000144  4408              ADD      r0,r0,r1              ;4138
000146  1e40              SUBS     r0,r0,#1              ;4138
000148  fbb0f7f1          UDIV     r7,r0,r1              ;4138
00014c  2020              MOVS     r0,#0x20              ;4139
00014e  9003              STR      r0,[sp,#0xc]          ;4139
000150  2000              MOVS     r0,#0                 ;4140
000152  9002              STR      r0,[sp,#8]            ;4140
000154  e019              B        |L22.394|
                  |L22.342|
000156  2e01              CMP      r6,#1                 ;4142
000158  d105              BNE      |L22.358|
00015a  eb080048          ADD      r0,r8,r8,LSL #1       ;4142
00015e  1c40              ADDS     r0,r0,#1              ;4142
000160  0840              LSRS     r0,r0,#1              ;4142
000162  1cc0              ADDS     r0,r0,#3              ;4142
000164  e002              B        |L22.364|
                  |L22.358|
000166  ea4f0048          LSL      r0,r8,#1              ;4142
00016a  1d00              ADDS     r0,r0,#4              ;4142
                  |L22.364|
00016c  4607              MOV      r7,r0                 ;4142
00016e  8968              LDRH     r0,[r5,#0xa]          ;4143
000170  4438              ADD      r0,r0,r7              ;4143
000172  1e40              SUBS     r0,r0,#1              ;4143
000174  8969              LDRH     r1,[r5,#0xa]          ;4143
000176  fbb0f7f1          UDIV     r7,r0,r1              ;4143
00017a  2001              MOVS     r0,#1                 ;4144
00017c  9003              STR      r0,[sp,#0xc]          ;4144
00017e  8968              LDRH     r0,[r5,#0xa]          ;4145
000180  f44f4180          MOV      r1,#0x4000            ;4145
000184  fbb1f0f0          UDIV     r0,r1,r0              ;4145
000188  9002              STR      r0,[sp,#8]            ;4145
                  |L22.394|
00018a  9803              LDR      r0,[sp,#0xc]          ;4147
00018c  4450              ADD      r0,r0,r10             ;4147
00018e  9007              STR      r0,[sp,#0x1c]         ;4147
000190  9807              LDR      r0,[sp,#0x1c]         ;4148
000192  4438              ADD      r0,r0,r7              ;4148
000194  9006              STR      r0,[sp,#0x18]         ;4148
000196  9902              LDR      r1,[sp,#8]            ;4149
000198  9806              LDR      r0,[sp,#0x18]         ;4149
00019a  4408              ADD      r0,r0,r1              ;4149
00019c  9005              STR      r0,[sp,#0x14]         ;4149
00019e  9805              LDR      r0,[sp,#0x14]         ;4150
0001a0  4448              ADD      r0,r0,r9              ;4150
0001a2  eba0000a          SUB      r0,r0,r10             ;4150
0001a6  9904              LDR      r1,[sp,#0x10]         ;4150
0001a8  4288              CMP      r0,r1                 ;4150
0001aa  d901              BLS      |L22.432|
0001ac  200e              MOVS     r0,#0xe               ;4150
0001ae  e72f              B        |L22.16|
                  |L22.432|
0001b0  aa09              ADD      r2,sp,#0x24           ;4153
0001b2  2103              MOVS     r1,#3                 ;4153
0001b4  980c              LDR      r0,[sp,#0x30]         ;4153
0001b6  f7fffffe          BL       disk_ioctl
0001ba  b928              CBNZ     r0,|L22.456|
0001bc  9809              LDR      r0,[sp,#0x24]         ;4153
0001be  b118              CBZ      r0,|L22.456|
0001c0  9809              LDR      r0,[sp,#0x24]         ;4153
0001c2  f5b04f00          CMP      r0,#0x8000            ;4153
0001c6  d901              BLS      |L22.460|
                  |L22.456|
0001c8  2001              MOVS     r0,#1                 ;4153
0001ca  9009              STR      r0,[sp,#0x24]         ;4153
                  |L22.460|
0001cc  9909              LDR      r1,[sp,#0x24]         ;4154
0001ce  9805              LDR      r0,[sp,#0x14]         ;4154
0001d0  4408              ADD      r0,r0,r1              ;4154
0001d2  1e40              SUBS     r0,r0,#1              ;4154
0001d4  1e49              SUBS     r1,r1,#1              ;4154
0001d6  4388              BICS     r0,r0,r1              ;4154
0001d8  9009              STR      r0,[sp,#0x24]         ;4154
0001da  9909              LDR      r1,[sp,#0x24]         ;4155
0001dc  9805              LDR      r0,[sp,#0x14]         ;4155
0001de  1a08              SUBS     r0,r1,r0              ;4155
0001e0  9009              STR      r0,[sp,#0x24]         ;4155
0001e2  2e03              CMP      r6,#3                 ;4156
0001e4  d108              BNE      |L22.504|
0001e6  9909              LDR      r1,[sp,#0x24]         ;4157
0001e8  9803              LDR      r0,[sp,#0xc]          ;4157
0001ea  4408              ADD      r0,r0,r1              ;4157
0001ec  9003              STR      r0,[sp,#0xc]          ;4157
0001ee  9909              LDR      r1,[sp,#0x24]         ;4158
0001f0  9807              LDR      r0,[sp,#0x1c]         ;4158
0001f2  4408              ADD      r0,r0,r1              ;4158
0001f4  9007              STR      r0,[sp,#0x1c]         ;4158
0001f6  e001              B        |L22.508|
                  |L22.504|
0001f8  9809              LDR      r0,[sp,#0x24]         ;4160
0001fa  4407              ADD      r7,r7,r0              ;4160
                  |L22.508|
0001fc  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;4164
000200  1a08              SUBS     r0,r1,r0              ;4164
000202  1bc1              SUBS     r1,r0,r7              ;4164
000204  9802              LDR      r0,[sp,#8]            ;4164
000206  1a08              SUBS     r0,r1,r0              ;4164
000208  fbb0f8f9          UDIV     r8,r0,r9              ;4164
00020c  2e02              CMP      r6,#2                 ;4165
00020e  d103              BNE      |L22.536|
000210  f64070f6          MOV      r0,#0xff6             ;4165
000214  4580              CMP      r8,r0                 ;4165
000216  d305              BCC      |L22.548|
                  |L22.536|
000218  2e03              CMP      r6,#3                 ;4166
00021a  d105              BNE      |L22.552|
00021c  f64f70f6          MOV      r0,#0xfff6            ;4166
000220  4580              CMP      r8,r0                 ;4166
000222  d201              BCS      |L22.552|
                  |L22.548|
000224  200e              MOVS     r0,#0xe               ;4167
000226  e6f3              B        |L22.16|
                  |L22.552|
000228  2e03              CMP      r6,#3                 ;4170
00022a  d102              BNE      |L22.562|
00022c  200c              MOVS     r0,#0xc               ;4171
00022e  900d              STR      r0,[sp,#0x34]         ;4171
000230  e010              B        |L22.596|
                  |L22.562|
000232  2e01              CMP      r6,#1                 ;4173
000234  d106              BNE      |L22.580|
000236  9804              LDR      r0,[sp,#0x10]         ;4173
000238  f5b03f80          CMP      r0,#0x10000           ;4173
00023c  d202              BCS      |L22.580|
00023e  2001              MOVS     r0,#1                 ;4174
000240  900d              STR      r0,[sp,#0x34]         ;4174
000242  e007              B        |L22.596|
                  |L22.580|
000244  9804              LDR      r0,[sp,#0x10]         ;4176
000246  f5b03f80          CMP      r0,#0x10000           ;4176
00024a  d201              BCS      |L22.592|
00024c  2004              MOVS     r0,#4                 ;4176
00024e  e000              B        |L22.594|
                  |L22.592|
000250  2006              MOVS     r0,#6                 ;4176
                  |L22.594|
000252  900d              STR      r0,[sp,#0x34]         ;4176
                  |L22.596|
000254  bf00              NOP                            ;4180
000256  9811              LDR      r0,[sp,#0x44]         ;4188
000258  b110              CBZ      r0,|L22.608|
00025a  20f0              MOVS     r0,#0xf0              ;4189
00025c  900e              STR      r0,[sp,#0x38]         ;4189
00025e  e043              B        |L22.744|
                  |L22.608|
000260  896a              LDRH     r2,[r5,#0xa]          ;4191
000262  2100              MOVS     r1,#0                 ;4191
000264  f1050030          ADD      r0,r5,#0x30           ;4191
000268  f7fffffe          BL       mem_set
00026c  f50574f7          ADD      r4,r5,#0x1ee          ;4192
000270  2001              MOVS     r0,#1                 ;4193
000272  7060              STRB     r0,[r4,#1]            ;4193
000274  70a0              STRB     r0,[r4,#2]            ;4194
000276  2000              MOVS     r0,#0                 ;4195
000278  70e0              STRB     r0,[r4,#3]            ;4195
00027a  980d              LDR      r0,[sp,#0x34]         ;4196
00027c  7120              STRB     r0,[r4,#4]            ;4196
00027e  20fe              MOVS     r0,#0xfe              ;4197
000280  7160              STRB     r0,[r4,#5]            ;4197
000282  9804              LDR      r0,[sp,#0x10]         ;4198
000284  4450              ADD      r0,r0,r10             ;4198
000286  213f              MOVS     r1,#0x3f              ;4198
000288  fbb0f0f1          UDIV     r0,r0,r1              ;4198
00028c  21ff              MOVS     r1,#0xff              ;4198
00028e  fbb0f0f1          UDIV     r0,r0,r1              ;4198
000292  9009              STR      r0,[sp,#0x24]         ;4198
000294  213f              MOVS     r1,#0x3f              ;4199
000296  9809              LDR      r0,[sp,#0x24]         ;4199
000298  ea410090          ORR      r0,r1,r0,LSR #2       ;4199
00029c  71a0              STRB     r0,[r4,#6]            ;4199
00029e  9809              LDR      r0,[sp,#0x24]         ;4200
0002a0  71e0              STRB     r0,[r4,#7]            ;4200
0002a2  203f              MOVS     r0,#0x3f              ;4201
0002a4  7220              STRB     r0,[r4,#8]            ;4201
0002a6  2100              MOVS     r1,#0                 ;4201
0002a8  7261              STRB     r1,[r4,#9]            ;4201
0002aa  72a1              STRB     r1,[r4,#0xa]          ;4201
0002ac  72e1              STRB     r1,[r4,#0xb]          ;4201
0002ae  9804              LDR      r0,[sp,#0x10]         ;4202
0002b0  7320              STRB     r0,[r4,#0xc]          ;4202
0002b2  9804              LDR      r0,[sp,#0x10]         ;4202
0002b4  0a01              LSRS     r1,r0,#8              ;4202
0002b6  7361              STRB     r1,[r4,#0xd]          ;4202
0002b8  9804              LDR      r0,[sp,#0x10]         ;4202
0002ba  0c01              LSRS     r1,r0,#16             ;4202
0002bc  73a1              STRB     r1,[r4,#0xe]          ;4202
0002be  9804              LDR      r0,[sp,#0x10]         ;4202
0002c0  0e01              LSRS     r1,r0,#24             ;4202
0002c2  73e1              STRB     r1,[r4,#0xf]          ;4202
0002c4  2155              MOVS     r1,#0x55              ;4203
0002c6  f885122e          STRB     r1,[r5,#0x22e]        ;4203
0002ca  21aa              MOVS     r1,#0xaa              ;4203
0002cc  f885122f          STRB     r1,[r5,#0x22f]        ;4203
0002d0  2301              MOVS     r3,#1                 ;4204
0002d2  2200              MOVS     r2,#0                 ;4204
0002d4  f1050130          ADD      r1,r5,#0x30           ;4204
0002d8  980c              LDR      r0,[sp,#0x30]         ;4204
0002da  f7fffffe          BL       disk_write
0002de  b108              CBZ      r0,|L22.740|
0002e0  2001              MOVS     r0,#1                 ;4205
0002e2  e695              B        |L22.16|
                  |L22.740|
0002e4  20f8              MOVS     r0,#0xf8              ;4206
0002e6  900e              STR      r0,[sp,#0x38]         ;4206
                  |L22.744|
0002e8  f1050430          ADD      r4,r5,#0x30           ;4211
0002ec  896a              LDRH     r2,[r5,#0xa]          ;4212
0002ee  2100              MOVS     r1,#0                 ;4212
0002f0  4620              MOV      r0,r4                 ;4212
0002f2  f7fffffe          BL       mem_set
0002f6  220b              MOVS     r2,#0xb               ;4213
0002f8  a149              ADR      r1,|L22.1056|
0002fa  4620              MOV      r0,r4                 ;4213
0002fc  f7fffffe          BL       mem_cpy
000300  f8b5b00a          LDRH     r11,[r5,#0xa]         ;4214
000304  f884b00b          STRB     r11,[r4,#0xb]         ;4215
000308  ea4f211b          LSR      r1,r11,#8             ;4215
00030c  7321              STRB     r1,[r4,#0xc]          ;4215
00030e  f884900d          STRB     r9,[r4,#0xd]          ;4216
000312  9803              LDR      r0,[sp,#0xc]          ;4217
000314  73a0              STRB     r0,[r4,#0xe]          ;4217
000316  9803              LDR      r0,[sp,#0xc]          ;4217
000318  0a01              LSRS     r1,r0,#8              ;4217
00031a  73e1              STRB     r1,[r4,#0xf]          ;4217
00031c  2001              MOVS     r0,#1                 ;4218
00031e  7420              STRB     r0,[r4,#0x10]         ;4218
000320  2e03              CMP      r6,#3                 ;4219
000322  d101              BNE      |L22.808|
000324  2000              MOVS     r0,#0                 ;4219
000326  e001              B        |L22.812|
                  |L22.808|
000328  f44f7000          MOV      r0,#0x200             ;4219
                  |L22.812|
00032c  4683              MOV      r11,r0                ;4219
00032e  f884b011          STRB     r11,[r4,#0x11]        ;4220
000332  ea4f211b          LSR      r1,r11,#8             ;4220
000336  74a1              STRB     r1,[r4,#0x12]         ;4220
000338  9804              LDR      r0,[sp,#0x10]         ;4221
00033a  f5b03f80          CMP      r0,#0x10000           ;4221
00033e  d205              BCS      |L22.844|
000340  9804              LDR      r0,[sp,#0x10]         ;4222
000342  74e0              STRB     r0,[r4,#0x13]         ;4222
000344  9804              LDR      r0,[sp,#0x10]         ;4222
000346  0a01              LSRS     r1,r0,#8              ;4222
000348  7521              STRB     r1,[r4,#0x14]         ;4222
00034a  e010              B        |L22.878|
                  |L22.844|
00034c  9804              LDR      r0,[sp,#0x10]         ;4224
00034e  f8840020          STRB     r0,[r4,#0x20]         ;4224
000352  9804              LDR      r0,[sp,#0x10]         ;4224
000354  f3c02107          UBFX     r1,r0,#8,#8           ;4224
000358  2021              MOVS     r0,#0x21              ;4224
00035a  5501              STRB     r1,[r0,r4]            ;4224
00035c  9804              LDR      r0,[sp,#0x10]         ;4224
00035e  f3c04107          UBFX     r1,r0,#16,#8          ;4224
000362  2022              MOVS     r0,#0x22              ;4224
000364  5501              STRB     r1,[r0,r4]            ;4224
000366  9804              LDR      r0,[sp,#0x10]         ;4224
000368  0e01              LSRS     r1,r0,#24             ;4224
00036a  2023              MOVS     r0,#0x23              ;4224
00036c  5501              STRB     r1,[r0,r4]            ;4224
                  |L22.878|
00036e  980e              LDR      r0,[sp,#0x38]         ;4226
000370  7560              STRB     r0,[r4,#0x15]         ;4226
000372  203f              MOVS     r0,#0x3f              ;4227
000374  7620              STRB     r0,[r4,#0x18]         ;4227
000376  2100              MOVS     r1,#0                 ;4227
000378  7661              STRB     r1,[r4,#0x19]         ;4227
00037a  20ff              MOVS     r0,#0xff              ;4228
00037c  76a0              STRB     r0,[r4,#0x1a]         ;4228
00037e  76e1              STRB     r1,[r4,#0x1b]         ;4228
000380  f884a01c          STRB     r10,[r4,#0x1c]        ;4229
000384  ea4f211a          LSR      r1,r10,#8             ;4229
000388  7761              STRB     r1,[r4,#0x1d]         ;4229
00038a  ea4f411a          LSR      r1,r10,#16            ;4229
00038e  77a1              STRB     r1,[r4,#0x1e]         ;4229
000390  ea4f611a          LSR      r1,r10,#24            ;4229
000394  77e1              STRB     r1,[r4,#0x1f]         ;4229
000396  f7fffffe          BL       get_fattime
00039a  9009              STR      r0,[sp,#0x24]         ;4230
00039c  2e03              CMP      r6,#3                 ;4231
00039e  d14b              BNE      |L22.1080|
0003a0  9809              LDR      r0,[sp,#0x24]         ;4232
0003a2  f8840043          STRB     r0,[r4,#0x43]         ;4232
0003a6  9809              LDR      r0,[sp,#0x24]         ;4232
0003a8  f3c02107          UBFX     r1,r0,#8,#8           ;4232
0003ac  2044              MOVS     r0,#0x44              ;4232
0003ae  5501              STRB     r1,[r0,r4]            ;4232
0003b0  9809              LDR      r0,[sp,#0x24]         ;4232
0003b2  f3c04107          UBFX     r1,r0,#16,#8          ;4232
0003b6  2045              MOVS     r0,#0x45              ;4232
0003b8  5501              STRB     r1,[r0,r4]            ;4232
0003ba  9809              LDR      r0,[sp,#0x24]         ;4232
0003bc  0e01              LSRS     r1,r0,#24             ;4232
0003be  2046              MOVS     r0,#0x46              ;4232
0003c0  5501              STRB     r1,[r0,r4]            ;4232
0003c2  f8847024          STRB     r7,[r4,#0x24]         ;4233
0003c6  f3c72107          UBFX     r1,r7,#8,#8           ;4233
0003ca  2025              MOVS     r0,#0x25              ;4233
0003cc  5501              STRB     r1,[r0,r4]            ;4233
0003ce  f3c74107          UBFX     r1,r7,#16,#8          ;4233
0003d2  2026              MOVS     r0,#0x26              ;4233
0003d4  5501              STRB     r1,[r0,r4]            ;4233
0003d6  0e39              LSRS     r1,r7,#24             ;4233
0003d8  2027              MOVS     r0,#0x27              ;4233
0003da  5501              STRB     r1,[r0,r4]            ;4233
0003dc  2002              MOVS     r0,#2                 ;4234
0003de  f884002c          STRB     r0,[r4,#0x2c]         ;4234
0003e2  2100              MOVS     r1,#0                 ;4234
0003e4  202d              MOVS     r0,#0x2d              ;4234
0003e6  5501              STRB     r1,[r0,r4]            ;4234
0003e8  202e              MOVS     r0,#0x2e              ;4234
0003ea  5501              STRB     r1,[r0,r4]            ;4234
0003ec  202f              MOVS     r0,#0x2f              ;4234
0003ee  5501              STRB     r1,[r0,r4]            ;4234
0003f0  2001              MOVS     r0,#1                 ;4235
0003f2  f8840030          STRB     r0,[r4,#0x30]         ;4235
0003f6  2031              MOVS     r0,#0x31              ;4235
0003f8  5501              STRB     r1,[r0,r4]            ;4235
0003fa  2006              MOVS     r0,#6                 ;4236
0003fc  f8840032          STRB     r0,[r4,#0x32]         ;4236
000400  2033              MOVS     r0,#0x33              ;4236
000402  5501              STRB     r1,[r0,r4]            ;4236
000404  2080              MOVS     r0,#0x80              ;4237
000406  f8840040          STRB     r0,[r4,#0x40]         ;4237
00040a  2029              MOVS     r0,#0x29              ;4238
00040c  f8840042          STRB     r0,[r4,#0x42]         ;4238
000410  2213              MOVS     r2,#0x13              ;4239
000412  e00b              B        |L22.1068|
                  |L22.1044|
                          DCD      FatFs
                  |L22.1048|
                          DCD      vst
                  |L22.1052|
                          DCD      ||cst||
                  |L22.1056|
000420  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
000424  53444f53
000428  352e3000
                  |L22.1068|
00042c  a18a              ADR      r1,|L22.1624|
00042e  f1040047          ADD      r0,r4,#0x47           ;4239
000432  f7fffffe          BL       mem_cpy
000436  e01f              B        |L22.1144|
                  |L22.1080|
000438  9809              LDR      r0,[sp,#0x24]         ;4241
00043a  f8840027          STRB     r0,[r4,#0x27]         ;4241
00043e  9809              LDR      r0,[sp,#0x24]         ;4241
000440  f3c02107          UBFX     r1,r0,#8,#8           ;4241
000444  2028              MOVS     r0,#0x28              ;4241
000446  5501              STRB     r1,[r0,r4]            ;4241
000448  9809              LDR      r0,[sp,#0x24]         ;4241
00044a  f3c04107          UBFX     r1,r0,#16,#8          ;4241
00044e  2029              MOVS     r0,#0x29              ;4241
000450  5501              STRB     r1,[r0,r4]            ;4241
000452  9809              LDR      r0,[sp,#0x24]         ;4241
000454  0e01              LSRS     r1,r0,#24             ;4241
000456  202a              MOVS     r0,#0x2a              ;4241
000458  5501              STRB     r1,[r0,r4]            ;4241
00045a  75a7              STRB     r7,[r4,#0x16]         ;4242
00045c  0a39              LSRS     r1,r7,#8              ;4242
00045e  75e1              STRB     r1,[r4,#0x17]         ;4242
000460  2080              MOVS     r0,#0x80              ;4243
000462  f8840024          STRB     r0,[r4,#0x24]         ;4243
000466  2029              MOVS     r0,#0x29              ;4244
000468  f8840026          STRB     r0,[r4,#0x26]         ;4244
00046c  2213              MOVS     r2,#0x13              ;4245
00046e  a17f              ADR      r1,|L22.1644|
000470  f104002b          ADD      r0,r4,#0x2b           ;4245
000474  f7fffffe          BL       mem_cpy
                  |L22.1144|
000478  2055              MOVS     r0,#0x55              ;4247
00047a  f88401fe          STRB     r0,[r4,#0x1fe]        ;4247
00047e  21aa              MOVS     r1,#0xaa              ;4247
000480  f24010ff          MOV      r0,#0x1ff             ;4247
000484  5501              STRB     r1,[r0,r4]            ;4247
000486  2301              MOVS     r3,#1                 ;4248
000488  4652              MOV      r2,r10                ;4248
00048a  4621              MOV      r1,r4                 ;4248
00048c  980c              LDR      r0,[sp,#0x30]         ;4248
00048e  f7fffffe          BL       disk_write
000492  b108              CBZ      r0,|L22.1176|
000494  2001              MOVS     r0,#1                 ;4249
000496  e5bb              B        |L22.16|
                  |L22.1176|
000498  2e03              CMP      r6,#3                 ;4250
00049a  d106              BNE      |L22.1194|
00049c  2301              MOVS     r3,#1                 ;4251
00049e  f10a0206          ADD      r2,r10,#6             ;4251
0004a2  4621              MOV      r1,r4                 ;4251
0004a4  980c              LDR      r0,[sp,#0x30]         ;4251
0004a6  f7fffffe          BL       disk_write
                  |L22.1194|
0004aa  9807              LDR      r0,[sp,#0x1c]         ;4254
0004ac  9008              STR      r0,[sp,#0x20]         ;4254
0004ae  f04f0b00          MOV      r11,#0                ;4255
0004b2  e05f              B        |L22.1396|
                  |L22.1204|
0004b4  896a              LDRH     r2,[r5,#0xa]          ;4256
0004b6  2100              MOVS     r1,#0                 ;4256
0004b8  4620              MOV      r0,r4                 ;4256
0004ba  f7fffffe          BL       mem_set
0004be  980e              LDR      r0,[sp,#0x38]         ;4257
0004c0  9009              STR      r0,[sp,#0x24]         ;4257
0004c2  2e03              CMP      r6,#3                 ;4258
0004c4  d014              BEQ      |L22.1264|
0004c6  2e01              CMP      r6,#1                 ;4259
0004c8  d101              BNE      |L22.1230|
0004ca  486d              LDR      r0,|L22.1664|
0004cc  e001              B        |L22.1234|
                  |L22.1230|
0004ce  f06f00ff          MVN      r0,#0xff              ;4259
                  |L22.1234|
0004d2  9909              LDR      r1,[sp,#0x24]         ;4259
0004d4  4308              ORRS     r0,r0,r1              ;4259
0004d6  9009              STR      r0,[sp,#0x24]         ;4259
0004d8  9809              LDR      r0,[sp,#0x24]         ;4260
0004da  7020              STRB     r0,[r4,#0]            ;4260
0004dc  9809              LDR      r0,[sp,#0x24]         ;4260
0004de  0a00              LSRS     r0,r0,#8              ;4260
0004e0  7060              STRB     r0,[r4,#1]            ;4260
0004e2  9809              LDR      r0,[sp,#0x24]         ;4260
0004e4  0c00              LSRS     r0,r0,#16             ;4260
0004e6  70a0              STRB     r0,[r4,#2]            ;4260
0004e8  9809              LDR      r0,[sp,#0x24]         ;4260
0004ea  0e00              LSRS     r0,r0,#24             ;4260
0004ec  70e0              STRB     r0,[r4,#3]            ;4260
0004ee  e019              B        |L22.1316|
                  |L22.1264|
0004f0  9809              LDR      r0,[sp,#0x24]         ;4262
0004f2  f06000ff          ORN      r0,r0,#0xff           ;4262
0004f6  9009              STR      r0,[sp,#0x24]         ;4262
0004f8  9809              LDR      r0,[sp,#0x24]         ;4263
0004fa  7020              STRB     r0,[r4,#0]            ;4263
0004fc  9809              LDR      r0,[sp,#0x24]         ;4263
0004fe  0a00              LSRS     r0,r0,#8              ;4263
000500  7060              STRB     r0,[r4,#1]            ;4263
000502  9809              LDR      r0,[sp,#0x24]         ;4263
000504  0c00              LSRS     r0,r0,#16             ;4263
000506  70a0              STRB     r0,[r4,#2]            ;4263
000508  9809              LDR      r0,[sp,#0x24]         ;4263
00050a  0e00              LSRS     r0,r0,#24             ;4263
00050c  70e0              STRB     r0,[r4,#3]            ;4263
00050e  20ff              MOVS     r0,#0xff              ;4264
000510  7120              STRB     r0,[r4,#4]            ;4264
000512  21ff              MOVS     r1,#0xff              ;4264
000514  7161              STRB     r1,[r4,#5]            ;4264
000516  71a1              STRB     r1,[r4,#6]            ;4264
000518  71e1              STRB     r1,[r4,#7]            ;4264
00051a  7220              STRB     r0,[r4,#8]            ;4265
00051c  7261              STRB     r1,[r4,#9]            ;4265
00051e  72a1              STRB     r1,[r4,#0xa]          ;4265
000520  210f              MOVS     r1,#0xf               ;4265
000522  72e1              STRB     r1,[r4,#0xb]          ;4265
                  |L22.1316|
000524  9808              LDR      r0,[sp,#0x20]         ;4267
000526  1c41              ADDS     r1,r0,#1              ;4267
000528  4602              MOV      r2,r0                 ;4267
00052a  2301              MOVS     r3,#1                 ;4267
00052c  9108              STR      r1,[sp,#0x20]         ;4267
00052e  4621              MOV      r1,r4                 ;4267
000530  980c              LDR      r0,[sp,#0x30]         ;4267
000532  f7fffffe          BL       disk_write
000536  b108              CBZ      r0,|L22.1340|
000538  2001              MOVS     r0,#1                 ;4268
00053a  e569              B        |L22.16|
                  |L22.1340|
00053c  896a              LDRH     r2,[r5,#0xa]          ;4269
00053e  2100              MOVS     r1,#0                 ;4269
000540  4620              MOV      r0,r4                 ;4269
000542  f7fffffe          BL       mem_set
000546  2001              MOVS     r0,#1                 ;4270
000548  9009              STR      r0,[sp,#0x24]         ;4270
00054a  e00e              B        |L22.1386|
                  |L22.1356|
00054c  9808              LDR      r0,[sp,#0x20]         ;4271
00054e  1c41              ADDS     r1,r0,#1              ;4271
000550  4602              MOV      r2,r0                 ;4271
000552  2301              MOVS     r3,#1                 ;4271
000554  9108              STR      r1,[sp,#0x20]         ;4271
000556  4621              MOV      r1,r4                 ;4271
000558  980c              LDR      r0,[sp,#0x30]         ;4271
00055a  f7fffffe          BL       disk_write
00055e  b108              CBZ      r0,|L22.1380|
000560  2001              MOVS     r0,#1                 ;4272
000562  e555              B        |L22.16|
                  |L22.1380|
000564  9809              LDR      r0,[sp,#0x24]         ;4270
000566  1c40              ADDS     r0,r0,#1              ;4270
000568  9009              STR      r0,[sp,#0x24]         ;4270
                  |L22.1386|
00056a  9809              LDR      r0,[sp,#0x24]         ;4270
00056c  42b8              CMP      r0,r7                 ;4270
00056e  d3ed              BCC      |L22.1356|
000570  f10b0b01          ADD      r11,r11,#1            ;4255
                  |L22.1396|
000574  f1bb0f00          CMP      r11,#0                ;4255
000578  d09c              BEQ      |L22.1204|
00057a  2e03              CMP      r6,#3                 ;4277
00057c  d101              BNE      |L22.1410|
00057e  4648              MOV      r0,r9                 ;4277
000580  e000              B        |L22.1412|
                  |L22.1410|
000582  9802              LDR      r0,[sp,#8]            ;4277
                  |L22.1412|
000584  4683              MOV      r11,r0                ;4277
000586  bf00              NOP                            ;4278
                  |L22.1416|
000588  9808              LDR      r0,[sp,#0x20]         ;4279
00058a  1c41              ADDS     r1,r0,#1              ;4279
00058c  4602              MOV      r2,r0                 ;4279
00058e  2301              MOVS     r3,#1                 ;4279
000590  9108              STR      r1,[sp,#0x20]         ;4279
000592  4621              MOV      r1,r4                 ;4279
000594  980c              LDR      r0,[sp,#0x30]         ;4279
000596  f7fffffe          BL       disk_write
00059a  b108              CBZ      r0,|L22.1440|
00059c  2001              MOVS     r0,#1                 ;4280
00059e  e537              B        |L22.16|
                  |L22.1440|
0005a0  f1ab0001          SUB      r0,r11,#1             ;4281
0005a4  f1b00b00          SUBS     r11,r0,#0             ;4281
0005a8  d1ee              BNE      |L22.1416|
0005aa  2e03              CMP      r6,#3                 ;4291
0005ac  d149              BNE      |L22.1602|
0005ae  2052              MOVS     r0,#0x52              ;4292
0005b0  7020              STRB     r0,[r4,#0]            ;4292
0005b2  7060              STRB     r0,[r4,#1]            ;4292
0005b4  2061              MOVS     r0,#0x61              ;4292
0005b6  70a0              STRB     r0,[r4,#2]            ;4292
0005b8  2041              MOVS     r0,#0x41              ;4292
0005ba  70e0              STRB     r0,[r4,#3]            ;4292
0005bc  2072              MOVS     r0,#0x72              ;4293
0005be  f88401e4          STRB     r0,[r4,#0x1e4]        ;4293
0005c2  2172              MOVS     r1,#0x72              ;4293
0005c4  f24010e5          MOV      r0,#0x1e5             ;4293
0005c8  5501              STRB     r1,[r0,r4]            ;4293
0005ca  2141              MOVS     r1,#0x41              ;4293
0005cc  1c40              ADDS     r0,r0,#1              ;4293
0005ce  5501              STRB     r1,[r0,r4]            ;4293
0005d0  2161              MOVS     r1,#0x61              ;4293
0005d2  1c40              ADDS     r0,r0,#1              ;4293
0005d4  5501              STRB     r1,[r0,r4]            ;4293
0005d6  f1a80001          SUB      r0,r8,#1              ;4294
0005da  f88401e8          STRB     r0,[r4,#0x1e8]        ;4294
0005de  f3c02107          UBFX     r1,r0,#8,#8           ;4294
0005e2  f24010e9          MOV      r0,#0x1e9             ;4294
0005e6  5501              STRB     r1,[r0,r4]            ;4294
0005e8  f1a80001          SUB      r0,r8,#1              ;4294
0005ec  f3c04107          UBFX     r1,r0,#16,#8          ;4294
0005f0  f44f70f5          MOV      r0,#0x1ea             ;4294
0005f4  5501              STRB     r1,[r0,r4]            ;4294
0005f6  f1a80001          SUB      r0,r8,#1              ;4294
0005fa  0e01              LSRS     r1,r0,#24             ;4294
0005fc  f24010eb          MOV      r0,#0x1eb             ;4294
000600  5501              STRB     r1,[r0,r4]            ;4294
000602  2002              MOVS     r0,#2                 ;4295
000604  f88401ec          STRB     r0,[r4,#0x1ec]        ;4295
000608  2100              MOVS     r1,#0                 ;4295
00060a  f24010ed          MOV      r0,#0x1ed             ;4295
00060e  5501              STRB     r1,[r0,r4]            ;4295
000610  1c40              ADDS     r0,r0,#1              ;4295
000612  5501              STRB     r1,[r0,r4]            ;4295
000614  1c40              ADDS     r0,r0,#1              ;4295
000616  5501              STRB     r1,[r0,r4]            ;4295
000618  2055              MOVS     r0,#0x55              ;4296
00061a  f88401fe          STRB     r0,[r4,#0x1fe]        ;4296
00061e  21aa              MOVS     r1,#0xaa              ;4296
000620  f24010ff          MOV      r0,#0x1ff             ;4296
000624  5501              STRB     r1,[r0,r4]            ;4296
000626  2301              MOVS     r3,#1                 ;4297
000628  f10a0201          ADD      r2,r10,#1             ;4297
00062c  4621              MOV      r1,r4                 ;4297
00062e  980c              LDR      r0,[sp,#0x30]         ;4297
000630  f7fffffe          BL       disk_write
000634  2301              MOVS     r3,#1                 ;4298
000636  f10a0207          ADD      r2,r10,#7             ;4298
00063a  4621              MOV      r1,r4                 ;4298
00063c  980c              LDR      r0,[sp,#0x30]         ;4298
00063e  f7fffffe          BL       disk_write
                  |L22.1602|
000642  2200              MOVS     r2,#0                 ;4301
000644  4611              MOV      r1,r2                 ;4301
000646  980c              LDR      r0,[sp,#0x30]         ;4301
000648  f7fffffe          BL       disk_ioctl
00064c  b108              CBZ      r0,|L22.1618|
00064e  2001              MOVS     r0,#1                 ;4301
000650  e4de              B        |L22.16|
                  |L22.1618|
000652  2000              MOVS     r0,#0                 ;4301
000654  e4dc              B        |L22.16|
;;;4303   
                          ENDP

000656  0000              DCW      0x0000
                  |L22.1624|
000658  4e4f204e          DCB      "NO NAME    FAT32   ",0
00065c  414d4520
000660  20202046
000664  41543332
000668  20202000
                  |L22.1644|
00066c  4e4f204e          DCB      "NO NAME    FAT     ",0
000670  414d4520
000674  20202046
000678  41542020
00067c  20202000
                  |L22.1664|
                          DCD      0x00ffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;2403   
;;;2404   FRESULT f_mount (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2405   	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
;;;2406   	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
;;;2407   	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
;;;2408   )
;;;2409   {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
;;;2410   	FATFS *cfs;
;;;2411   	int vol;
;;;2412   	FRESULT res;
;;;2413   	const TCHAR *rp = path;
000006  9803              LDR      r0,[sp,#0xc]
000008  9001              STR      r0,[sp,#4]
;;;2414   
;;;2415   
;;;2416   	vol = get_ldnumber(&rp);
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       get_ldnumber
000010  4605              MOV      r5,r0
;;;2417   	if (vol < 0) return FR_INVALID_DRIVE;
000012  2d00              CMP      r5,#0
000014  da02              BGE      |L23.28|
000016  200b              MOVS     r0,#0xb
                  |L23.24|
;;;2418   	cfs = FatFs[vol];					/* Pointer to fs object */
;;;2419   
;;;2420   	if (cfs) {
;;;2421   #if _FS_LOCK
;;;2422   		clear_lock(cfs);
;;;2423   #endif
;;;2424   #if _FS_REENTRANT						/* Discard sync object of the current volume */
;;;2425   		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
;;;2426   #endif
;;;2427   		cfs->fs_type = 0;				/* Clear old fs object */
;;;2428   	}
;;;2429   
;;;2430   	if (fs) {
;;;2431   		fs->fs_type = 0;				/* Clear new fs object */
;;;2432   #if _FS_REENTRANT						/* Create sync object for the new volume */
;;;2433   		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
;;;2434   #endif
;;;2435   	}
;;;2436   	FatFs[vol] = fs;					/* Register new fs object */
;;;2437   
;;;2438   	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
;;;2439   
;;;2440   	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
;;;2441   	LEAVE_FF(fs, res);
;;;2442   }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L23.28|
00001c  480e              LDR      r0,|L23.88|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]     ;2418
000022  b10c              CBZ      r4,|L23.40|
000024  2000              MOVS     r0,#0                 ;2427
000026  7020              STRB     r0,[r4,#0]            ;2427
                  |L23.40|
000028  9802              LDR      r0,[sp,#8]            ;2430
00002a  b110              CBZ      r0,|L23.50|
00002c  2000              MOVS     r0,#0                 ;2431
00002e  9902              LDR      r1,[sp,#8]            ;2431
000030  7008              STRB     r0,[r1,#0]            ;2431
                  |L23.50|
000032  4909              LDR      r1,|L23.88|
000034  9802              LDR      r0,[sp,#8]            ;2436
000036  f8410025          STR      r0,[r1,r5,LSL #2]     ;2436
00003a  9802              LDR      r0,[sp,#8]            ;2438
00003c  b108              CBZ      r0,|L23.66|
00003e  2e01              CMP      r6,#1                 ;2438
000040  d001              BEQ      |L23.70|
                  |L23.66|
000042  2000              MOVS     r0,#0                 ;2438
000044  e7e8              B        |L23.24|
                  |L23.70|
000046  2200              MOVS     r2,#0                 ;2440
000048  a903              ADD      r1,sp,#0xc            ;2440
00004a  a802              ADD      r0,sp,#8              ;2440
00004c  f7fffffe          BL       find_volume
000050  4607              MOV      r7,r0                 ;2440
000052  4638              MOV      r0,r7                 ;2441
000054  e7e0              B        |L23.24|
;;;2443   
                          ENDP

000056  0000              DCW      0x0000
                  |L23.88|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;2450   
;;;2451   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2452   	FIL* fp,			/* Pointer to the blank file object */
;;;2453   	const TCHAR* path,	/* Pointer to the file name */
;;;2454   	BYTE mode			/* Access mode and file open mode flags */
;;;2455   )
;;;2456   {
000004  f5ad7d0c          SUB      sp,sp,#0x230
000008  4605              MOV      r5,r0
00000a  4616              MOV      r6,r2
;;;2457   	FRESULT res;
;;;2458   	DIR dj;
;;;2459   	BYTE *dir;
;;;2460   	DEFINE_NAMEBUF;
;;;2461   #if !_FS_READONLY
;;;2462   	DWORD dw, cl;
;;;2463   #endif
;;;2464   
;;;2465   
;;;2466   	if (!fp) return FR_INVALID_OBJECT;
00000c  b925              CBNZ     r5,|L24.24|
00000e  2009              MOVS     r0,#9
                  |L24.16|
;;;2467   	fp->fs = 0;			/* Clear file object */
;;;2468   
;;;2469   	/* Get logical drive number */
;;;2470   #if !_FS_READONLY
;;;2471   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2472   	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
;;;2473   #else
;;;2474   	mode &= FA_READ;
;;;2475   	res = find_volume(&dj.fs, &path, 0);
;;;2476   #endif
;;;2477   	if (res == FR_OK) {
;;;2478   		INIT_BUF(dj);
;;;2479   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2480   		dir = dj.dir;
;;;2481   #if !_FS_READONLY	/* R/W configuration */
;;;2482   		if (res == FR_OK) {
;;;2483   			if (!dir)	/* Default directory itself */
;;;2484   				res = FR_INVALID_NAME;
;;;2485   #if _FS_LOCK
;;;2486   			else
;;;2487   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2488   #endif
;;;2489   		}
;;;2490   		/* Create or Open a file */
;;;2491   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2492   			if (res != FR_OK) {					/* No file, create new */
;;;2493   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2494   #if _FS_LOCK
;;;2495   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2496   #else
;;;2497   					res = dir_register(&dj);
;;;2498   #endif
;;;2499   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2500   				dir = dj.dir;					/* New entry */
;;;2501   			}
;;;2502   			else {								/* Any object is already existing */
;;;2503   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2504   					res = FR_DENIED;
;;;2505   				} else {
;;;2506   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2507   						res = FR_EXIST;
;;;2508   				}
;;;2509   			}
;;;2510   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2511   				dw = GET_FATTIME();
;;;2512   				ST_DWORD(dir + DIR_CrtTime, dw);/* Set created time */
;;;2513   				ST_DWORD(dir + DIR_WrtTime, dw);/* Set modified time */
;;;2514   				dir[DIR_Attr] = 0;				/* Reset attribute */
;;;2515   				ST_DWORD(dir + DIR_FileSize, 0);/* Reset file size */
;;;2516   				cl = ld_clust(dj.fs, dir);		/* Get cluster chain */
;;;2517   				st_clust(dir, 0);				/* Reset cluster */
;;;2518   				dj.fs->wflag = 1;
;;;2519   				if (cl) {						/* Remove the cluster chain if exist */
;;;2520   					dw = dj.fs->winsect;
;;;2521   					res = remove_chain(dj.fs, cl);
;;;2522   					if (res == FR_OK) {
;;;2523   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2524   						res = move_window(dj.fs, dw);
;;;2525   					}
;;;2526   				}
;;;2527   			}
;;;2528   		}
;;;2529   		else {	/* Open an existing file */
;;;2530   			if (res == FR_OK) {					/* Following succeeded */
;;;2531   				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
;;;2532   					res = FR_NO_FILE;
;;;2533   				} else {
;;;2534   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2535   						res = FR_DENIED;
;;;2536   				}
;;;2537   			}
;;;2538   		}
;;;2539   		if (res == FR_OK) {
;;;2540   			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
;;;2541   				mode |= FA__WRITTEN;
;;;2542   			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;2543   			fp->dir_ptr = dir;
;;;2544   #if _FS_LOCK
;;;2545   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2546   			if (!fp->lockid) res = FR_INT_ERR;
;;;2547   #endif
;;;2548   		}
;;;2549   
;;;2550   #else				/* R/O configuration */
;;;2551   		if (res == FR_OK) {					/* Follow succeeded */
;;;2552   			dir = dj.dir;
;;;2553   			if (!dir) {						/* Current directory itself */
;;;2554   				res = FR_INVALID_NAME;
;;;2555   			} else {
;;;2556   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2557   					res = FR_NO_FILE;
;;;2558   			}
;;;2559   		}
;;;2560   #endif
;;;2561   		FREE_BUF();
;;;2562   
;;;2563   		if (res == FR_OK) {
;;;2564   			fp->flag = mode;					/* File access mode */
;;;2565   			fp->err = 0;						/* Clear error flag */
;;;2566   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2567   			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
;;;2568   			fp->fptr = 0;						/* File pointer */
;;;2569   			fp->dsect = 0;
;;;2570   #if _USE_FASTSEEK
;;;2571   			fp->cltbl = 0;						/* Normal seek mode */
;;;2572   #endif
;;;2573   			fp->fs = dj.fs;	 					/* Validate file object */
;;;2574   			fp->id = fp->fs->id;
;;;2575   		}
;;;2576   	}
;;;2577   
;;;2578   	LEAVE_FF(dj.fs, res);
;;;2579   }
000010  f50d7d0f          ADD      sp,sp,#0x23c
000014  e8bd83f0          POP      {r4-r9,pc}
                  |L24.24|
000018  2000              MOVS     r0,#0                 ;2467
00001a  6028              STR      r0,[r5,#0]            ;2467
00001c  f006061f          AND      r6,r6,#0x1f           ;2471
000020  f0260201          BIC      r2,r6,#1              ;2472
000024  a98d              ADD      r1,sp,#0x234          ;2472
000026  a883              ADD      r0,sp,#0x20c          ;2472
000028  f7fffffe          BL       find_volume
00002c  4607              MOV      r7,r0                 ;2472
00002e  2f00              CMP      r7,#0                 ;2477
000030  d174              BNE      |L24.284|
000032  a880              ADD      r0,sp,#0x200          ;2478
000034  9089              STR      r0,[sp,#0x224]        ;2478
000036  f8cdd228          STR      sp,[sp,#0x228]        ;2478
00003a  a883              ADD      r0,sp,#0x20c          ;2479
00003c  998d              LDR      r1,[sp,#0x234]        ;2479
00003e  f7fffffe          BL       follow_path
000042  4607              MOV      r7,r0                 ;2479
000044  9c88              LDR      r4,[sp,#0x220]        ;2480
000046  b90f              CBNZ     r7,|L24.76|
000048  b904              CBNZ     r4,|L24.76|
00004a  2706              MOVS     r7,#6                 ;2484
                  |L24.76|
00004c  f006001c          AND      r0,r6,#0x1c           ;2491
000050  2800              CMP      r0,#0                 ;2491
000052  d05c              BEQ      |L24.270|
000054  b14f              CBZ      r7,|L24.106|
000056  2f04              CMP      r7,#4                 ;2493
000058  d103              BNE      |L24.98|
00005a  a883              ADD      r0,sp,#0x20c          ;2497
00005c  f7fffffe          BL       dir_register
000060  4607              MOV      r7,r0                 ;2497
                  |L24.98|
000062  f0460608          ORR      r6,r6,#8              ;2499
000066  9c88              LDR      r4,[sp,#0x220]        ;2500
000068  e009              B        |L24.126|
                  |L24.106|
00006a  7ae0              LDRB     r0,[r4,#0xb]          ;2503
00006c  f0000011          AND      r0,r0,#0x11           ;2503
000070  b108              CBZ      r0,|L24.118|
000072  2707              MOVS     r7,#7                 ;2504
000074  e003              B        |L24.126|
                  |L24.118|
000076  f0060004          AND      r0,r6,#4              ;2506
00007a  b100              CBZ      r0,|L24.126|
00007c  2708              MOVS     r7,#8                 ;2507
                  |L24.126|
00007e  2f00              CMP      r7,#0                 ;2510
000080  d155              BNE      |L24.302|
000082  f0060008          AND      r0,r6,#8              ;2510
000086  2800              CMP      r0,#0                 ;2510
000088  d051              BEQ      |L24.302|
00008a  f7fffffe          BL       get_fattime
00008e  4680              MOV      r8,r0                 ;2511
000090  f884800e          STRB     r8,[r4,#0xe]          ;2512
000094  ea4f2118          LSR      r1,r8,#8              ;2512
000098  73e1              STRB     r1,[r4,#0xf]          ;2512
00009a  ea4f4118          LSR      r1,r8,#16             ;2512
00009e  7421              STRB     r1,[r4,#0x10]         ;2512
0000a0  ea4f6118          LSR      r1,r8,#24             ;2512
0000a4  7461              STRB     r1,[r4,#0x11]         ;2512
0000a6  f8848016          STRB     r8,[r4,#0x16]         ;2513
0000aa  ea4f2118          LSR      r1,r8,#8              ;2513
0000ae  75e1              STRB     r1,[r4,#0x17]         ;2513
0000b0  ea4f4118          LSR      r1,r8,#16             ;2513
0000b4  7621              STRB     r1,[r4,#0x18]         ;2513
0000b6  ea4f6118          LSR      r1,r8,#24             ;2513
0000ba  7661              STRB     r1,[r4,#0x19]         ;2513
0000bc  2000              MOVS     r0,#0                 ;2514
0000be  72e0              STRB     r0,[r4,#0xb]          ;2514
0000c0  7720              STRB     r0,[r4,#0x1c]         ;2515
0000c2  2100              MOVS     r1,#0                 ;2515
0000c4  7761              STRB     r1,[r4,#0x1d]         ;2515
0000c6  77a1              STRB     r1,[r4,#0x1e]         ;2515
0000c8  77e1              STRB     r1,[r4,#0x1f]         ;2515
0000ca  4621              MOV      r1,r4                 ;2516
0000cc  9883              LDR      r0,[sp,#0x20c]        ;2516
0000ce  f7fffffe          BL       ld_clust
0000d2  4681              MOV      r9,r0                 ;2516
0000d4  2100              MOVS     r1,#0                 ;2517
0000d6  4620              MOV      r0,r4                 ;2517
0000d8  f7fffffe          BL       st_clust
0000dc  2001              MOVS     r0,#1                 ;2518
0000de  9983              LDR      r1,[sp,#0x20c]        ;2518
0000e0  7108              STRB     r0,[r1,#4]            ;2518
0000e2  f1b90f00          CMP      r9,#0                 ;2519
0000e6  d022              BEQ      |L24.302|
0000e8  9883              LDR      r0,[sp,#0x20c]        ;2520
0000ea  f8d0802c          LDR      r8,[r0,#0x2c]         ;2520
0000ee  4649              MOV      r1,r9                 ;2521
0000f0  9883              LDR      r0,[sp,#0x20c]        ;2521
0000f2  f7fffffe          BL       remove_chain
0000f6  4607              MOV      r7,r0                 ;2521
0000f8  b9cf              CBNZ     r7,|L24.302|
0000fa  f1a90001          SUB      r0,r9,#1              ;2523
0000fe  9983              LDR      r1,[sp,#0x20c]        ;2523
000100  60c8              STR      r0,[r1,#0xc]          ;2523
000102  4641              MOV      r1,r8                 ;2524
000104  9883              LDR      r0,[sp,#0x20c]        ;2524
000106  f7fffffe          BL       move_window
00010a  4607              MOV      r7,r0                 ;2524
00010c  e00f              B        |L24.302|
                  |L24.270|
00010e  b977              CBNZ     r7,|L24.302|
000110  7ae0              LDRB     r0,[r4,#0xb]          ;2531
000112  f0000010          AND      r0,r0,#0x10           ;2531
000116  b110              CBZ      r0,|L24.286|
000118  2704              MOVS     r7,#4                 ;2532
00011a  e008              B        |L24.302|
                  |L24.284|
00011c  e02d              B        |L24.378|
                  |L24.286|
00011e  f0060002          AND      r0,r6,#2              ;2534
000122  b120              CBZ      r0,|L24.302|
000124  7ae0              LDRB     r0,[r4,#0xb]          ;2534
000126  f0000001          AND      r0,r0,#1              ;2534
00012a  b100              CBZ      r0,|L24.302|
00012c  2707              MOVS     r7,#7                 ;2535
                  |L24.302|
00012e  b947              CBNZ     r7,|L24.322|
000130  f0060008          AND      r0,r6,#8              ;2540
000134  b108              CBZ      r0,|L24.314|
000136  f0460620          ORR      r6,r6,#0x20           ;2541
                  |L24.314|
00013a  9883              LDR      r0,[sp,#0x20c]        ;2542
00013c  6ac0              LDR      r0,[r0,#0x2c]         ;2542
00013e  61e8              STR      r0,[r5,#0x1c]         ;2542
000140  622c              STR      r4,[r5,#0x20]         ;2543
                  |L24.322|
000142  b9d7              CBNZ     r7,|L24.378|
000144  71ae              STRB     r6,[r5,#6]            ;2564
000146  2000              MOVS     r0,#0                 ;2565
000148  71e8              STRB     r0,[r5,#7]            ;2565
00014a  4621              MOV      r1,r4                 ;2566
00014c  9883              LDR      r0,[sp,#0x20c]        ;2566
00014e  f7fffffe          BL       ld_clust
000152  6128              STR      r0,[r5,#0x10]         ;2566
000154  7fe0              LDRB     r0,[r4,#0x1f]         ;2567
000156  0601              LSLS     r1,r0,#24             ;2567
000158  7fa0              LDRB     r0,[r4,#0x1e]         ;2567
00015a  ea414100          ORR      r1,r1,r0,LSL #16      ;2567
00015e  7f60              LDRB     r0,[r4,#0x1d]         ;2567
000160  ea412000          ORR      r0,r1,r0,LSL #8       ;2567
000164  7f21              LDRB     r1,[r4,#0x1c]         ;2567
000166  4308              ORRS     r0,r0,r1              ;2567
000168  60e8              STR      r0,[r5,#0xc]          ;2567
00016a  2000              MOVS     r0,#0                 ;2568
00016c  60a8              STR      r0,[r5,#8]            ;2568
00016e  61a8              STR      r0,[r5,#0x18]         ;2569
000170  9883              LDR      r0,[sp,#0x20c]        ;2573
000172  6028              STR      r0,[r5,#0]            ;2573
000174  6828              LDR      r0,[r5,#0]            ;2574
000176  88c0              LDRH     r0,[r0,#6]            ;2574
000178  80a8              STRH     r0,[r5,#4]            ;2574
                  |L24.378|
00017a  4638              MOV      r0,r7                 ;2578
00017c  e748              B        |L24.16|
;;;2580   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;3188   
;;;3189   FRESULT f_opendir (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3190   	DIR* dp,			/* Pointer to directory object to create */
;;;3191   	const TCHAR* path	/* Pointer to the directory path */
;;;3192   )
;;;3193   {
000002  f5ad7d05          SUB      sp,sp,#0x214
000006  4604              MOV      r4,r0
;;;3194   	FRESULT res;
;;;3195   	FATFS* fs;
;;;3196   	DEFINE_NAMEBUF;
;;;3197   
;;;3198   
;;;3199   	if (!dp) return FR_INVALID_OBJECT;
000008  b91c              CBNZ     r4,|L25.18|
00000a  2009              MOVS     r0,#9
                  |L25.12|
;;;3200   
;;;3201   	/* Get logical drive number */
;;;3202   	res = find_volume(&fs, &path, 0);
;;;3203   	if (res == FR_OK) {
;;;3204   		dp->fs = fs;
;;;3205   		INIT_BUF(*dp);
;;;3206   		res = follow_path(dp, path);			/* Follow the path to the directory */
;;;3207   		FREE_BUF();
;;;3208   		if (res == FR_OK) {						/* Follow completed */
;;;3209   			if (dp->dir) {						/* It is not the origin directory itself */
;;;3210   				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
;;;3211   					dp->sclust = ld_clust(fs, dp->dir);
;;;3212   				else							/* The object is a file */
;;;3213   					res = FR_NO_PATH;
;;;3214   			}
;;;3215   			if (res == FR_OK) {
;;;3216   				dp->id = fs->id;
;;;3217   				res = dir_sdi(dp, 0);			/* Rewind directory */
;;;3218   #if _FS_LOCK
;;;3219   				if (res == FR_OK) {
;;;3220   					if (dp->sclust) {
;;;3221   						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
;;;3222   						if (!dp->lockid)
;;;3223   							res = FR_TOO_MANY_OPEN_FILES;
;;;3224   					} else {
;;;3225   						dp->lockid = 0;	/* Root directory need not to be locked */
;;;3226   					}
;;;3227   				}
;;;3228   #endif
;;;3229   			}
;;;3230   		}
;;;3231   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3232   	}
;;;3233   	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
;;;3234   
;;;3235   	LEAVE_FF(fs, res);
;;;3236   }
00000c  f50d7d07          ADD      sp,sp,#0x21c
000010  bd30              POP      {r4,r5,pc}
                  |L25.18|
000012  2200              MOVS     r2,#0                 ;3202
000014  a986              ADD      r1,sp,#0x218          ;3202
000016  a884              ADD      r0,sp,#0x210          ;3202
000018  f7fffffe          BL       find_volume
00001c  4605              MOV      r5,r0                 ;3202
00001e  bb2d              CBNZ     r5,|L25.108|
000020  9884              LDR      r0,[sp,#0x210]        ;3204
000022  6020              STR      r0,[r4,#0]            ;3204
000024  a881              ADD      r0,sp,#0x204          ;3205
000026  61a0              STR      r0,[r4,#0x18]         ;3205
000028  a801              ADD      r0,sp,#4              ;3205
00002a  61e0              STR      r0,[r4,#0x1c]         ;3205
00002c  4620              MOV      r0,r4                 ;3206
00002e  9986              LDR      r1,[sp,#0x218]        ;3206
000030  f7fffffe          BL       follow_path
000034  4605              MOV      r5,r0                 ;3206
000036  b9b5              CBNZ     r5,|L25.102|
000038  6960              LDR      r0,[r4,#0x14]         ;3209
00003a  b158              CBZ      r0,|L25.84|
00003c  6960              LDR      r0,[r4,#0x14]         ;3210
00003e  7ac0              LDRB     r0,[r0,#0xb]          ;3210
000040  f0000010          AND      r0,r0,#0x10           ;3210
000044  b128              CBZ      r0,|L25.82|
000046  6961              LDR      r1,[r4,#0x14]         ;3211
000048  9884              LDR      r0,[sp,#0x210]        ;3211
00004a  f7fffffe          BL       ld_clust
00004e  60a0              STR      r0,[r4,#8]            ;3211
000050  e000              B        |L25.84|
                  |L25.82|
000052  2505              MOVS     r5,#5                 ;3213
                  |L25.84|
000054  b93d              CBNZ     r5,|L25.102|
000056  9884              LDR      r0,[sp,#0x210]        ;3216
000058  88c0              LDRH     r0,[r0,#6]            ;3216
00005a  80a0              STRH     r0,[r4,#4]            ;3216
00005c  2100              MOVS     r1,#0                 ;3217
00005e  4620              MOV      r0,r4                 ;3217
000060  f7fffffe          BL       dir_sdi
000064  4605              MOV      r5,r0                 ;3217
                  |L25.102|
000066  2d04              CMP      r5,#4                 ;3231
000068  d100              BNE      |L25.108|
00006a  2505              MOVS     r5,#5                 ;3231
                  |L25.108|
00006c  b10d              CBZ      r5,|L25.114|
00006e  2000              MOVS     r0,#0                 ;3233
000070  6020              STR      r0,[r4,#0]            ;3233
                  |L25.114|
000072  4628              MOV      r0,r5                 ;3235
000074  e7ca              B        |L25.12|
;;;3237   
                          ENDP


                          AREA ||i.f_printf||, CODE, READONLY, ALIGN=1

                  f_printf PROC
;;;4580   
;;;4581   int f_printf (
000000  b40f              PUSH     {r0-r3}
;;;4582   	FIL* fp,			/* Pointer to the file object */
;;;4583   	const TCHAR* fmt,	/* Pointer to the format string */
;;;4584   	...					/* Optional arguments... */
;;;4585   )
;;;4586   {
000002  e92d4ff0          PUSH     {r4-r11,lr}
000006  b09b              SUB      sp,sp,#0x6c
;;;4587   	va_list arp;
;;;4588   	BYTE f, r;
;;;4589   	UINT nw, i, j, w;
;;;4590   	DWORD v;
;;;4591   	TCHAR c, d, s[16], *p;
;;;4592   	putbuff pb;
;;;4593   
;;;4594   
;;;4595   	pb.fp = fp;				/* Initialize output buffer */
000008  9824              LDR      r0,[sp,#0x90]
00000a  9001              STR      r0,[sp,#4]
;;;4596   	pb.nchr = pb.idx = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
;;;4597   
;;;4598   	va_start(arp, fmt);
000012  a826              ADD      r0,sp,#0x98
000014  901a              STR      r0,[sp,#0x68]
;;;4599   
;;;4600   	for (;;) {
000016  bf00              NOP      
                  |L26.24|
;;;4601   		c = *fmt++;
000018  9825              LDR      r0,[sp,#0x94]
00001a  f8104b01          LDRB     r4,[r0],#1
00001e  9025              STR      r0,[sp,#0x94]
;;;4602   		if (c == 0) break;			/* End of string */
000020  b904              CBNZ     r4,|L26.36|
000022  e10d              B        |L26.576|
                  |L26.36|
;;;4603   		if (c != '%') {				/* Non escape character */
000024  2c25              CMP      r4,#0x25
000026  d004              BEQ      |L26.50|
;;;4604   			putc_bfd(&pb, c);
000028  4621              MOV      r1,r4
00002a  a801              ADD      r0,sp,#4
00002c  f7fffffe          BL       putc_bfd
;;;4605   			continue;
000030  e7f2              B        |L26.24|
                  |L26.50|
;;;4606   		}
;;;4607   		w = f = 0;
000032  2000              MOVS     r0,#0
000034  4606              MOV      r6,r0
000036  4681              MOV      r9,r0
;;;4608   		c = *fmt++;
000038  9825              LDR      r0,[sp,#0x94]
00003a  f8104b01          LDRB     r4,[r0],#1
00003e  9025              STR      r0,[sp,#0x94]
;;;4609   		if (c == '0') {				/* Flag: '0' padding */
000040  2c30              CMP      r4,#0x30
000042  d105              BNE      |L26.80|
;;;4610   			f = 1; c = *fmt++;
000044  2601              MOVS     r6,#1
000046  9825              LDR      r0,[sp,#0x94]
000048  f8104b01          LDRB     r4,[r0],#1
00004c  9025              STR      r0,[sp,#0x94]
00004e  e006              B        |L26.94|
                  |L26.80|
;;;4611   		} else {
;;;4612   			if (c == '-') {			/* Flag: left justified */
000050  2c2d              CMP      r4,#0x2d
000052  d104              BNE      |L26.94|
;;;4613   				f = 2; c = *fmt++;
000054  2602              MOVS     r6,#2
000056  9825              LDR      r0,[sp,#0x94]
000058  f8104b01          LDRB     r4,[r0],#1
00005c  9025              STR      r0,[sp,#0x94]
                  |L26.94|
;;;4614   			}
;;;4615   		}
;;;4616   		while (IsDigit(c)) {		/* Precision */
00005e  e009              B        |L26.116|
                  |L26.96|
;;;4617   			w = w * 10 + c - '0';
000060  eb090089          ADD      r0,r9,r9,LSL #2
000064  eb040040          ADD      r0,r4,r0,LSL #1
000068  f1a00930          SUB      r9,r0,#0x30
;;;4618   			c = *fmt++;
00006c  9825              LDR      r0,[sp,#0x94]
00006e  f8104b01          LDRB     r4,[r0],#1
000072  9025              STR      r0,[sp,#0x94]
                  |L26.116|
000074  2c30              CMP      r4,#0x30              ;4616
000076  db01              BLT      |L26.124|
000078  2c39              CMP      r4,#0x39              ;4616
00007a  ddf1              BLE      |L26.96|
                  |L26.124|
;;;4619   		}
;;;4620   		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
00007c  2c6c              CMP      r4,#0x6c
00007e  d001              BEQ      |L26.132|
000080  2c4c              CMP      r4,#0x4c
000082  d105              BNE      |L26.144|
                  |L26.132|
;;;4621   			f |= 4; c = *fmt++;
000084  f0460604          ORR      r6,r6,#4
000088  9825              LDR      r0,[sp,#0x94]
00008a  f8104b01          LDRB     r4,[r0],#1
00008e  9025              STR      r0,[sp,#0x94]
                  |L26.144|
;;;4622   		}
;;;4623   		if (!c) break;
000090  b904              CBNZ     r4,|L26.148|
000092  e0d5              B        |L26.576|
                  |L26.148|
;;;4624   		d = c;
000094  4625              MOV      r5,r4
;;;4625   		if (IsLower(d)) d -= 0x20;
000096  2d61              CMP      r5,#0x61
000098  db04              BLT      |L26.164|
00009a  2d7a              CMP      r5,#0x7a
00009c  dc02              BGT      |L26.164|
00009e  f1a50020          SUB      r0,r5,#0x20
0000a2  b2c5              UXTB     r5,r0
                  |L26.164|
;;;4626   		switch (d) {				/* Type is... */
0000a4  2d4f              CMP      r5,#0x4f
0000a6  d049              BEQ      |L26.316|
0000a8  dc06              BGT      |L26.184|
0000aa  2d42              CMP      r5,#0x42
0000ac  d043              BEQ      |L26.310|
0000ae  2d43              CMP      r5,#0x43
0000b0  d038              BEQ      |L26.292|
0000b2  2d44              CMP      r5,#0x44
0000b4  d14c              BNE      |L26.336|
0000b6  e044              B        |L26.322|
                  |L26.184|
0000b8  2d53              CMP      r5,#0x53
0000ba  d004              BEQ      |L26.198|
0000bc  2d55              CMP      r5,#0x55
0000be  d041              BEQ      |L26.324|
0000c0  2d58              CMP      r5,#0x58
0000c2  d145              BNE      |L26.336|
0000c4  e041              B        |L26.330|
                  |L26.198|
;;;4627   		case 'S' :					/* String */
;;;4628   			p = va_arg(arp, TCHAR*);
0000c6  981a              LDR      r0,[sp,#0x68]
0000c8  f850bb04          LDR      r11,[r0],#4
0000cc  901a              STR      r0,[sp,#0x68]
;;;4629   			for (j = 0; p[j]; j++) ;
0000ce  f04f0800          MOV      r8,#0
0000d2  e001              B        |L26.216|
                  |L26.212|
0000d4  f1080801          ADD      r8,r8,#1
                  |L26.216|
0000d8  f81b0008          LDRB     r0,[r11,r8]
0000dc  2800              CMP      r0,#0
0000de  d1f9              BNE      |L26.212|
;;;4630   			if (!(f & 2)) {
0000e0  f0060002          AND      r0,r6,#2
0000e4  b948              CBNZ     r0,|L26.250|
;;;4631   				while (j++ < w) putc_bfd(&pb, ' ');
0000e6  e003              B        |L26.240|
                  |L26.232|
0000e8  2120              MOVS     r1,#0x20
0000ea  a801              ADD      r0,sp,#4
0000ec  f7fffffe          BL       putc_bfd
                  |L26.240|
0000f0  4640              MOV      r0,r8
0000f2  f1080801          ADD      r8,r8,#1
0000f6  4548              CMP      r0,r9
0000f8  d3f6              BCC      |L26.232|
                  |L26.250|
;;;4632   			}
;;;4633   			while (*p) putc_bfd(&pb, *p++);
0000fa  e004              B        |L26.262|
                  |L26.252|
0000fc  f81b1b01          LDRB     r1,[r11],#1
000100  a801              ADD      r0,sp,#4
000102  f7fffffe          BL       putc_bfd
                  |L26.262|
000106  f89b0000          LDRB     r0,[r11,#0]
00010a  2800              CMP      r0,#0
00010c  d1f6              BNE      |L26.252|
;;;4634   			while (j++ < w) putc_bfd(&pb, ' ');
00010e  e003              B        |L26.280|
                  |L26.272|
000110  2120              MOVS     r1,#0x20
000112  a801              ADD      r0,sp,#4
000114  f7fffffe          BL       putc_bfd
                  |L26.280|
000118  4640              MOV      r0,r8
00011a  f1080801          ADD      r8,r8,#1
00011e  4548              CMP      r0,r9
000120  d3f6              BCC      |L26.272|
;;;4635   			continue;
000122  e779              B        |L26.24|
                  |L26.292|
;;;4636   		case 'C' :					/* Character */
;;;4637   			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
000124  981a              LDR      r0,[sp,#0x68]
000126  f8102b04          LDRB     r2,[r0],#4
00012a  b2d1              UXTB     r1,r2
00012c  901a              STR      r0,[sp,#0x68]
00012e  a801              ADD      r0,sp,#4
000130  f7fffffe          BL       putc_bfd
000134  e770              B        |L26.24|
                  |L26.310|
;;;4638   		case 'B' :					/* Binary */
;;;4639   			r = 2; break;
000136  2002              MOVS     r0,#2
000138  9019              STR      r0,[sp,#0x64]
00013a  e00e              B        |L26.346|
                  |L26.316|
;;;4640   		case 'O' :					/* Octal */
;;;4641   			r = 8; break;
00013c  2008              MOVS     r0,#8
00013e  9019              STR      r0,[sp,#0x64]
000140  e00b              B        |L26.346|
                  |L26.322|
;;;4642   		case 'D' :					/* Signed decimal */
;;;4643   		case 'U' :					/* Unsigned decimal */
000142  bf00              NOP      
                  |L26.324|
;;;4644   			r = 10; break;
000144  200a              MOVS     r0,#0xa
000146  9019              STR      r0,[sp,#0x64]
000148  e007              B        |L26.346|
                  |L26.330|
;;;4645   		case 'X' :					/* Hexdecimal */
;;;4646   			r = 16; break;
00014a  2010              MOVS     r0,#0x10
00014c  9019              STR      r0,[sp,#0x64]
00014e  e004              B        |L26.346|
                  |L26.336|
;;;4647   		default:					/* Unknown type (pass-through) */
;;;4648   			putc_bfd(&pb, c); continue;
000150  4621              MOV      r1,r4
000152  a801              ADD      r0,sp,#4
000154  f7fffffe          BL       putc_bfd
000158  e75e              B        |L26.24|
                  |L26.346|
00015a  bf00              NOP                            ;4639
;;;4649   		}
;;;4650   
;;;4651   		/* Get an argument and put it in numeral */
;;;4652   		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
00015c  f0060004          AND      r0,r6,#4
000160  b128              CBZ      r0,|L26.366|
000162  981a              LDR      r0,[sp,#0x68]
000164  6800              LDR      r0,[r0,#0]
000166  991a              LDR      r1,[sp,#0x68]
000168  1d09              ADDS     r1,r1,#4
00016a  911a              STR      r1,[sp,#0x68]
00016c  e00c              B        |L26.392|
                  |L26.366|
00016e  2d44              CMP      r5,#0x44
000170  d105              BNE      |L26.382|
000172  981a              LDR      r0,[sp,#0x68]
000174  6800              LDR      r0,[r0,#0]
000176  991a              LDR      r1,[sp,#0x68]
000178  1d09              ADDS     r1,r1,#4
00017a  911a              STR      r1,[sp,#0x68]
00017c  e004              B        |L26.392|
                  |L26.382|
00017e  981a              LDR      r0,[sp,#0x68]
000180  6800              LDR      r0,[r0,#0]
000182  991a              LDR      r1,[sp,#0x68]
000184  1d09              ADDS     r1,r1,#4
000186  911a              STR      r1,[sp,#0x68]
                  |L26.392|
000188  4682              MOV      r10,r0
;;;4653   		if (d == 'D' && (v & 0x80000000)) {
00018a  2d44              CMP      r5,#0x44
00018c  d106              BNE      |L26.412|
00018e  f00a4000          AND      r0,r10,#0x80000000
000192  b118              CBZ      r0,|L26.412|
;;;4654   			v = 0 - v;
000194  f1ca0a00          RSB      r10,r10,#0
;;;4655   			f |= 8;
000198  f0460608          ORR      r6,r6,#8
                  |L26.412|
;;;4656   		}
;;;4657   		i = 0;
00019c  2700              MOVS     r7,#0
;;;4658   		do {
00019e  bf00              NOP      
                  |L26.416|
;;;4659   			d = (TCHAR)(v % r); v /= r;
0001a0  9819              LDR      r0,[sp,#0x64]
0001a2  fbbaf1f0          UDIV     r1,r10,r0
0001a6  fb00a011          MLS      r0,r0,r1,r10
0001aa  b2c5              UXTB     r5,r0
0001ac  9819              LDR      r0,[sp,#0x64]
0001ae  fbbafaf0          UDIV     r10,r10,r0
;;;4660   			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
0001b2  2d09              CMP      r5,#9
0001b4  dd06              BLE      |L26.452|
0001b6  2c78              CMP      r4,#0x78
0001b8  d101              BNE      |L26.446|
0001ba  2027              MOVS     r0,#0x27
0001bc  e000              B        |L26.448|
                  |L26.446|
0001be  2007              MOVS     r0,#7
                  |L26.448|
0001c0  4428              ADD      r0,r0,r5
0001c2  b2c5              UXTB     r5,r0
                  |L26.452|
;;;4661   			s[i++] = d + '0';
0001c4  f1050030          ADD      r0,r5,#0x30
0001c8  b2c2              UXTB     r2,r0
0001ca  4638              MOV      r0,r7
0001cc  1c7f              ADDS     r7,r7,#1
0001ce  a914              ADD      r1,sp,#0x50
0001d0  540a              STRB     r2,[r1,r0]
;;;4662   		} while (v && i < sizeof s / sizeof s[0]);
0001d2  f1ba0f00          CMP      r10,#0
0001d6  d001              BEQ      |L26.476|
0001d8  2f10              CMP      r7,#0x10
0001da  d3e1              BCC      |L26.416|
                  |L26.476|
;;;4663   		if (f & 8) s[i++] = '-';
0001dc  f0060008          AND      r0,r6,#8
0001e0  b120              CBZ      r0,|L26.492|
0001e2  222d              MOVS     r2,#0x2d
0001e4  4638              MOV      r0,r7
0001e6  1c7f              ADDS     r7,r7,#1
0001e8  a914              ADD      r1,sp,#0x50
0001ea  540a              STRB     r2,[r1,r0]
                  |L26.492|
;;;4664   		j = i; d = (f & 1) ? '0' : ' ';
0001ec  46b8              MOV      r8,r7
0001ee  f0060001          AND      r0,r6,#1
0001f2  b108              CBZ      r0,|L26.504|
0001f4  2030              MOVS     r0,#0x30
0001f6  e000              B        |L26.506|
                  |L26.504|
0001f8  2020              MOVS     r0,#0x20
                  |L26.506|
0001fa  4605              MOV      r5,r0
;;;4665   		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
0001fc  e003              B        |L26.518|
                  |L26.510|
0001fe  4629              MOV      r1,r5
000200  a801              ADD      r0,sp,#4
000202  f7fffffe          BL       putc_bfd
                  |L26.518|
000206  f0060002          AND      r0,r6,#2
00020a  b920              CBNZ     r0,|L26.534|
00020c  4640              MOV      r0,r8
00020e  f1080801          ADD      r8,r8,#1
000212  4548              CMP      r0,r9
000214  d3f3              BCC      |L26.510|
                  |L26.534|
;;;4666   		do putc_bfd(&pb, s[--i]); while (i);
000216  bf00              NOP      
                  |L26.536|
000218  1e78              SUBS     r0,r7,#1
00021a  4607              MOV      r7,r0
00021c  aa14              ADD      r2,sp,#0x50
00021e  5c11              LDRB     r1,[r2,r0]
000220  a801              ADD      r0,sp,#4
000222  f7fffffe          BL       putc_bfd
000226  2f00              CMP      r7,#0
000228  d1f6              BNE      |L26.536|
;;;4667   		while (j++ < w) putc_bfd(&pb, d);
00022a  e003              B        |L26.564|
                  |L26.556|
00022c  4629              MOV      r1,r5
00022e  a801              ADD      r0,sp,#4
000230  f7fffffe          BL       putc_bfd
                  |L26.564|
000234  4640              MOV      r0,r8
000236  f1080801          ADD      r8,r8,#1
00023a  4548              CMP      r0,r9
00023c  d3f6              BCC      |L26.556|
00023e  e6eb              B        |L26.24|
                  |L26.576|
000240  bf00              NOP                            ;4602
;;;4668   	}
;;;4669   
;;;4670   	va_end(arp);
000242  2000              MOVS     r0,#0
000244  901a              STR      r0,[sp,#0x68]
;;;4671   
;;;4672   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
000246  9802              LDR      r0,[sp,#8]
000248  2800              CMP      r0,#0
00024a  db10              BLT      |L26.622|
;;;4673   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00024c  ab18              ADD      r3,sp,#0x60
00024e  a904              ADD      r1,sp,#0x10
000250  e9dd0201          LDRD     r0,r2,[sp,#4]
000254  f7fffffe          BL       f_write
000258  b948              CBNZ     r0,|L26.622|
;;;4674   		&& (UINT)pb.idx == nw) return pb.nchr;
00025a  9918              LDR      r1,[sp,#0x60]
00025c  9802              LDR      r0,[sp,#8]
00025e  4288              CMP      r0,r1
000260  d105              BNE      |L26.622|
000262  9803              LDR      r0,[sp,#0xc]
                  |L26.612|
;;;4675   	return EOF;
;;;4676   }
000264  b01b              ADD      sp,sp,#0x6c
000266  e8bd0ff0          POP      {r4-r11}
00026a  f85dfb14          LDR      pc,[sp],#0x14
                  |L26.622|
00026e  f04f30ff          MOV      r0,#0xffffffff        ;4675
000272  e7f7              B        |L26.612|
;;;4677   
                          ENDP


                          AREA ||i.f_putc||, CODE, READONLY, ALIGN=1

                  f_putc PROC
;;;4525   
;;;4526   int f_putc (
000000  b530              PUSH     {r4,r5,lr}
;;;4527   	TCHAR c,	/* A character to be output */
;;;4528   	FIL* fp		/* Pointer to the file object */
;;;4529   )
;;;4530   {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;4531   	putbuff pb;
;;;4532   	UINT nw;
;;;4533   
;;;4534   
;;;4535   	pb.fp = fp;			/* Initialize output buffer */
000008  9502              STR      r5,[sp,#8]
;;;4536   	pb.nchr = pb.idx = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  9004              STR      r0,[sp,#0x10]
;;;4537   
;;;4538   	putc_bfd(&pb, c);	/* Put a character */
000010  4621              MOV      r1,r4
000012  a802              ADD      r0,sp,#8
000014  f7fffffe          BL       putc_bfd
;;;4539   
;;;4540   	if (   pb.idx >= 0	/* Flush buffered characters to the file */
000018  9803              LDR      r0,[sp,#0xc]
00001a  2800              CMP      r0,#0
00001c  db0d              BLT      |L27.58|
;;;4541   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
00001e  ab01              ADD      r3,sp,#4
000020  a905              ADD      r1,sp,#0x14
000022  e9dd0202          LDRD     r0,r2,[sp,#8]
000026  f7fffffe          BL       f_write
00002a  b930              CBNZ     r0,|L27.58|
;;;4542   		&& (UINT)pb.idx == nw) return pb.nchr;
00002c  9901              LDR      r1,[sp,#4]
00002e  9803              LDR      r0,[sp,#0xc]
000030  4288              CMP      r0,r1
000032  d102              BNE      |L27.58|
000034  9804              LDR      r0,[sp,#0x10]
                  |L27.54|
;;;4543   	return EOF;
;;;4544   }
000036  b015              ADD      sp,sp,#0x54
000038  bd30              POP      {r4,r5,pc}
                  |L27.58|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;4543
00003e  e7fa              B        |L27.54|
;;;4545   
                          ENDP


                          AREA ||i.f_puts||, CODE, READONLY, ALIGN=1

                  f_puts PROC
;;;4552   
;;;4553   int f_puts (
000000  b530              PUSH     {r4,r5,lr}
;;;4554   	const TCHAR* str,	/* Pointer to the string to be output */
;;;4555   	FIL* fp				/* Pointer to the file object */
;;;4556   )
;;;4557   {
000002  b095              SUB      sp,sp,#0x54
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;4558   	putbuff pb;
;;;4559   	UINT nw;
;;;4560   
;;;4561   
;;;4562   	pb.fp = fp;				/* Initialize output buffer */
000008  9502              STR      r5,[sp,#8]
;;;4563   	pb.nchr = pb.idx = 0;
00000a  2000              MOVS     r0,#0
00000c  9003              STR      r0,[sp,#0xc]
00000e  9004              STR      r0,[sp,#0x10]
;;;4564   
;;;4565   	while (*str)			/* Put the string */
000010  e004              B        |L28.28|
                  |L28.18|
;;;4566   		putc_bfd(&pb, *str++);
000012  f8141b01          LDRB     r1,[r4],#1
000016  a802              ADD      r0,sp,#8
000018  f7fffffe          BL       putc_bfd
                  |L28.28|
00001c  7820              LDRB     r0,[r4,#0]            ;4565
00001e  2800              CMP      r0,#0                 ;4565
000020  d1f7              BNE      |L28.18|
;;;4567   
;;;4568   	if (   pb.idx >= 0		/* Flush buffered characters to the file */
000022  9803              LDR      r0,[sp,#0xc]
000024  2800              CMP      r0,#0
000026  db0d              BLT      |L28.68|
;;;4569   		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
000028  ab01              ADD      r3,sp,#4
00002a  a905              ADD      r1,sp,#0x14
00002c  e9dd0202          LDRD     r0,r2,[sp,#8]
000030  f7fffffe          BL       f_write
000034  b930              CBNZ     r0,|L28.68|
;;;4570   		&& (UINT)pb.idx == nw) return pb.nchr;
000036  9901              LDR      r1,[sp,#4]
000038  9803              LDR      r0,[sp,#0xc]
00003a  4288              CMP      r0,r1
00003c  d102              BNE      |L28.68|
00003e  9804              LDR      r0,[sp,#0x10]
                  |L28.64|
;;;4571   	return EOF;
;;;4572   }
000040  b015              ADD      sp,sp,#0x54
000042  bd30              POP      {r4,r5,pc}
                  |L28.68|
000044  f04f30ff          MOV      r0,#0xffffffff        ;4571
000048  e7fa              B        |L28.64|
;;;4573   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2587   
;;;2588   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2589   	FIL* fp, 		/* Pointer to the file object */
;;;2590   	void* buff,		/* Pointer to data buffer */
;;;2591   	UINT btr,		/* Number of bytes to read */
;;;2592   	UINT* br		/* Pointer to number of bytes read */
;;;2593   )
;;;2594   {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;2595   	FRESULT res;
;;;2596   	DWORD clst, sect, remain;
;;;2597   	UINT rcnt, cc;
;;;2598   	BYTE csect, *rbuff = (BYTE*)buff;
00000c  f8ddb018          LDR      r11,[sp,#0x18]
;;;2599   
;;;2600   
;;;2601   	*br = 0;	/* Clear read byte counter */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;2602   
;;;2603   	res = validate(fp);							/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9004              STR      r0,[sp,#0x10]
;;;2604   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9804              LDR      r0,[sp,#0x10]
000020  b118              CBZ      r0,|L29.42|
000022  9804              LDR      r0,[sp,#0x10]
                  |L29.36|
;;;2605   	if (fp->err)								/* Check error */
;;;2606   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2607   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2608   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2609   	remain = fp->fsize - fp->fptr;
;;;2610   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2611   
;;;2612   	for ( ;  btr;								/* Repeat until all data read */
;;;2613   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2614   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2615   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2616   			if (!csect) {						/* On the cluster boundary? */
;;;2617   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2618   					clst = fp->sclust;			/* Follow from the origin */
;;;2619   				} else {						/* Middle or end of the file */
;;;2620   #if _USE_FASTSEEK
;;;2621   					if (fp->cltbl)
;;;2622   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2623   					else
;;;2624   #endif
;;;2625   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2626   				}
;;;2627   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2628   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2629   				fp->clust = clst;				/* Update current cluster */
;;;2630   			}
;;;2631   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2632   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2633   			sect += csect;
;;;2634   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2635   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2636   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2637   					cc = fp->fs->csize - csect;
;;;2638   				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
;;;2639   					ABORT(fp->fs, FR_DISK_ERR);
;;;2640   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2641   #if _FS_TINY
;;;2642   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2643   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2644   #else
;;;2645   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2646   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2647   #endif
;;;2648   #endif
;;;2649   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2650   				continue;
;;;2651   			}
;;;2652   #if !_FS_TINY
;;;2653   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2654   #if !_FS_READONLY
;;;2655   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2656   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2657   						ABORT(fp->fs, FR_DISK_ERR);
;;;2658   					fp->flag &= ~FA__DIRTY;
;;;2659   				}
;;;2660   #endif
;;;2661   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2662   					ABORT(fp->fs, FR_DISK_ERR);
;;;2663   			}
;;;2664   #endif
;;;2665   			fp->dsect = sect;
;;;2666   		}
;;;2667   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2668   		if (rcnt > btr) rcnt = btr;
;;;2669   #if _FS_TINY
;;;2670   		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
;;;2671   			ABORT(fp->fs, FR_DISK_ERR);
;;;2672   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2673   #else
;;;2674   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2675   #endif
;;;2676   	}
;;;2677   
;;;2678   	LEAVE_FF(fp->fs, FR_OK);
;;;2679   }
000024  b009              ADD      sp,sp,#0x24
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L29.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2605
00002c  b108              CBZ      r0,|L29.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2606
000030  e7f8              B        |L29.36|
                  |L29.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2607
000034  f0000001          AND      r0,r0,#1              ;2607
000038  b908              CBNZ     r0,|L29.62|
00003a  2007              MOVS     r0,#7                 ;2608
00003c  e7f2              B        |L29.36|
                  |L29.62|
00003e  e9d41002          LDRD     r1,r0,[r4,#8]         ;2609
000042  1a40              SUBS     r0,r0,r1              ;2609
000044  9002              STR      r0,[sp,#8]            ;2609
000046  9802              LDR      r0,[sp,#8]            ;2610
000048  4285              CMP      r5,r0                 ;2610
00004a  d900              BLS      |L29.78|
00004c  9d02              LDR      r5,[sp,#8]            ;2610
                  |L29.78|
00004e  e0ba              B        |L29.454|
                  |L29.80|
000050  6821              LDR      r1,[r4,#0]            ;2614
000052  8949              LDRH     r1,[r1,#0xa]          ;2614
000054  68a0              LDR      r0,[r4,#8]            ;2614
000056  fbb0f2f1          UDIV     r2,r0,r1              ;2614
00005a  fb010012          MLS      r0,r1,r2,r0           ;2614
00005e  2800              CMP      r0,#0                 ;2614
000060  d177              BNE      |L29.338|
000062  6821              LDR      r1,[r4,#0]            ;2615
000064  8949              LDRH     r1,[r1,#0xa]          ;2615
000066  68a0              LDR      r0,[r4,#8]            ;2615
000068  fbb0f0f1          UDIV     r0,r0,r1              ;2615
00006c  6821              LDR      r1,[r4,#0]            ;2615
00006e  7889              LDRB     r1,[r1,#2]            ;2615
000070  1e49              SUBS     r1,r1,#1              ;2615
000072  4008              ANDS     r0,r0,r1              ;2615
000074  f00009ff          AND      r9,r0,#0xff           ;2615
000078  f1b90f00          CMP      r9,#0                 ;2616
00007c  d117              BNE      |L29.174|
00007e  68a0              LDR      r0,[r4,#8]            ;2617
000080  b910              CBNZ     r0,|L29.136|
000082  6920              LDR      r0,[r4,#0x10]         ;2618
000084  9003              STR      r0,[sp,#0xc]          ;2618
000086  e004              B        |L29.146|
                  |L29.136|
000088  6961              LDR      r1,[r4,#0x14]         ;2625
00008a  6820              LDR      r0,[r4,#0]            ;2625
00008c  f7fffffe          BL       get_fat
000090  9003              STR      r0,[sp,#0xc]          ;2625
                  |L29.146|
000092  9803              LDR      r0,[sp,#0xc]          ;2627
000094  2802              CMP      r0,#2                 ;2627
000096  d202              BCS      |L29.158|
000098  2002              MOVS     r0,#2                 ;2627
00009a  71e0              STRB     r0,[r4,#7]            ;2627
00009c  e7c2              B        |L29.36|
                  |L29.158|
00009e  9803              LDR      r0,[sp,#0xc]          ;2628
0000a0  1c40              ADDS     r0,r0,#1              ;2628
0000a2  b910              CBNZ     r0,|L29.170|
0000a4  2001              MOVS     r0,#1                 ;2628
0000a6  71e0              STRB     r0,[r4,#7]            ;2628
0000a8  e7bc              B        |L29.36|
                  |L29.170|
0000aa  9803              LDR      r0,[sp,#0xc]          ;2629
0000ac  6160              STR      r0,[r4,#0x14]         ;2629
                  |L29.174|
0000ae  6961              LDR      r1,[r4,#0x14]         ;2631
0000b0  6820              LDR      r0,[r4,#0]            ;2631
0000b2  f7fffffe          BL       clust2sect
0000b6  4606              MOV      r6,r0                 ;2631
0000b8  b916              CBNZ     r6,|L29.192|
0000ba  2002              MOVS     r0,#2                 ;2632
0000bc  71e0              STRB     r0,[r4,#7]            ;2632
0000be  e7b1              B        |L29.36|
                  |L29.192|
0000c0  444e              ADD      r6,r6,r9              ;2633
0000c2  6820              LDR      r0,[r4,#0]            ;2634
0000c4  8940              LDRH     r0,[r0,#0xa]          ;2634
0000c6  fbb5f8f0          UDIV     r8,r5,r0              ;2634
0000ca  f1b80f00          CMP      r8,#0                 ;2635
0000ce  d02d              BEQ      |L29.300|
0000d0  eb090008          ADD      r0,r9,r8              ;2636
0000d4  6821              LDR      r1,[r4,#0]            ;2636
0000d6  7889              LDRB     r1,[r1,#2]            ;2636
0000d8  4288              CMP      r0,r1                 ;2636
0000da  d903              BLS      |L29.228|
0000dc  6820              LDR      r0,[r4,#0]            ;2637
0000de  7880              LDRB     r0,[r0,#2]            ;2637
0000e0  eba00809          SUB      r8,r0,r9              ;2637
                  |L29.228|
0000e4  6821              LDR      r1,[r4,#0]            ;2638
0000e6  7848              LDRB     r0,[r1,#1]            ;2638
0000e8  4643              MOV      r3,r8                 ;2638
0000ea  4632              MOV      r2,r6                 ;2638
0000ec  4659              MOV      r1,r11                ;2638
0000ee  f7fffffe          BL       disk_read
0000f2  b110              CBZ      r0,|L29.250|
0000f4  2001              MOVS     r0,#1                 ;2639
0000f6  71e0              STRB     r0,[r4,#7]            ;2639
0000f8  e794              B        |L29.36|
                  |L29.250|
0000fa  79a0              LDRB     r0,[r4,#6]            ;2645
0000fc  f0000040          AND      r0,r0,#0x40           ;2645
000100  b178              CBZ      r0,|L29.290|
000102  69a0              LDR      r0,[r4,#0x18]         ;2645
000104  1b80              SUBS     r0,r0,r6              ;2645
000106  4540              CMP      r0,r8                 ;2645
000108  d20b              BCS      |L29.290|
00010a  69a1              LDR      r1,[r4,#0x18]         ;2646
00010c  1b89              SUBS     r1,r1,r6              ;2646
00010e  6823              LDR      r3,[r4,#0]            ;2646
000110  895b              LDRH     r3,[r3,#0xa]          ;2646
000112  fb01b003          MLA      r0,r1,r3,r11          ;2646
000116  6821              LDR      r1,[r4,#0]            ;2646
000118  894a              LDRH     r2,[r1,#0xa]          ;2646
00011a  f1040124          ADD      r1,r4,#0x24           ;2646
00011e  f7fffffe          BL       mem_cpy
                  |L29.290|
000122  6820              LDR      r0,[r4,#0]            ;2649
000124  8940              LDRH     r0,[r0,#0xa]          ;2649
000126  fb00f708          MUL      r7,r0,r8              ;2649
00012a  e042              B        |L29.434|
                  |L29.300|
00012c  69a0              LDR      r0,[r4,#0x18]         ;2653
00012e  42b0              CMP      r0,r6                 ;2653
000130  d020              BEQ      |L29.372|
000132  79a0              LDRB     r0,[r4,#6]            ;2655
000134  f0000040          AND      r0,r0,#0x40           ;2655
000138  b180              CBZ      r0,|L29.348|
00013a  6821              LDR      r1,[r4,#0]            ;2656
00013c  7848              LDRB     r0,[r1,#1]            ;2656
00013e  2301              MOVS     r3,#1                 ;2656
000140  f1040124          ADD      r1,r4,#0x24           ;2656
000144  69a2              LDR      r2,[r4,#0x18]         ;2656
000146  f7fffffe          BL       disk_write
00014a  b118              CBZ      r0,|L29.340|
00014c  2001              MOVS     r0,#1                 ;2657
00014e  71e0              STRB     r0,[r4,#7]            ;2657
000150  e768              B        |L29.36|
                  |L29.338|
000152  e010              B        |L29.374|
                  |L29.340|
000154  79a0              LDRB     r0,[r4,#6]            ;2658
000156  f0200040          BIC      r0,r0,#0x40           ;2658
00015a  71a0              STRB     r0,[r4,#6]            ;2658
                  |L29.348|
00015c  6821              LDR      r1,[r4,#0]            ;2661
00015e  7848              LDRB     r0,[r1,#1]            ;2661
000160  2301              MOVS     r3,#1                 ;2661
000162  4632              MOV      r2,r6                 ;2661
000164  f1040124          ADD      r1,r4,#0x24           ;2661
000168  f7fffffe          BL       disk_read
00016c  b110              CBZ      r0,|L29.372|
00016e  2001              MOVS     r0,#1                 ;2662
000170  71e0              STRB     r0,[r4,#7]            ;2662
000172  e757              B        |L29.36|
                  |L29.372|
000174  61a6              STR      r6,[r4,#0x18]         ;2665
                  |L29.374|
000176  6821              LDR      r1,[r4,#0]            ;2667
000178  8949              LDRH     r1,[r1,#0xa]          ;2667
00017a  68a0              LDR      r0,[r4,#8]            ;2667
00017c  fbb0f2f1          UDIV     r2,r0,r1              ;2667
000180  fb010012          MLS      r0,r1,r2,r0           ;2667
000184  6821              LDR      r1,[r4,#0]            ;2667
000186  8949              LDRH     r1,[r1,#0xa]          ;2667
000188  1a0f              SUBS     r7,r1,r0              ;2667
00018a  42af              CMP      r7,r5                 ;2668
00018c  d900              BLS      |L29.400|
00018e  462f              MOV      r7,r5                 ;2668
                  |L29.400|
000190  6821              LDR      r1,[r4,#0]            ;2674
000192  8949              LDRH     r1,[r1,#0xa]          ;2674
000194  68a0              LDR      r0,[r4,#8]            ;2674
000196  fbb0f2f1          UDIV     r2,r0,r1              ;2674
00019a  fb010112          MLS      r1,r1,r2,r0           ;2674
00019e  f1040024          ADD      r0,r4,#0x24           ;2674
0001a2  4408              ADD      r0,r0,r1              ;2674
0001a4  463a              MOV      r2,r7                 ;2674
0001a6  4601              MOV      r1,r0                 ;2674
0001a8  9001              STR      r0,[sp,#4]            ;2674
0001aa  4658              MOV      r0,r11                ;2674
0001ac  f7fffffe          BL       mem_cpy
0001b0  bf00              NOP                            ;2650
                  |L29.434|
0001b2  44bb              ADD      r11,r11,r7            ;2613
0001b4  68a0              LDR      r0,[r4,#8]            ;2613
0001b6  4438              ADD      r0,r0,r7              ;2613
0001b8  60a0              STR      r0,[r4,#8]            ;2613
0001ba  f8da0000          LDR      r0,[r10,#0]           ;2613
0001be  4438              ADD      r0,r0,r7              ;2613
0001c0  f8ca0000          STR      r0,[r10,#0]           ;2613
0001c4  1bed              SUBS     r5,r5,r7              ;2613
                  |L29.454|
0001c6  2d00              CMP      r5,#0                 ;2612
0001c8  f47faf42          BNE      |L29.80|
0001cc  2000              MOVS     r0,#0                 ;2678
0001ce  e729              B        |L29.36|
;;;2680   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;3276   
;;;3277   FRESULT f_readdir (
000000  b570              PUSH     {r4-r6,lr}
;;;3278   	DIR* dp,			/* Pointer to the open directory object */
;;;3279   	FILINFO* fno		/* Pointer to file information to return */
;;;3280   )
;;;3281   {
000002  f5ad7d04          SUB      sp,sp,#0x210
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
;;;3282   	FRESULT res;
;;;3283   	DEFINE_NAMEBUF;
;;;3284   
;;;3285   
;;;3286   	res = validate(dp);						/* Check validity of the object */
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       validate
000010  4605              MOV      r5,r0
;;;3287   	if (res == FR_OK) {
000012  bb1d              CBNZ     r5,|L30.92|
;;;3288   		if (!fno) {
000014  b92e              CBNZ     r6,|L30.34|
;;;3289   			res = dir_sdi(dp, 0);			/* Rewind the directory object */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       dir_sdi
00001e  4605              MOV      r5,r0
000020  e01c              B        |L30.92|
                  |L30.34|
;;;3290   		} else {
;;;3291   			INIT_BUF(*dp);
000022  a881              ADD      r0,sp,#0x204
000024  61a0              STR      r0,[r4,#0x18]
000026  a801              ADD      r0,sp,#4
000028  61e0              STR      r0,[r4,#0x1c]
;;;3292   			res = dir_read(dp, 0);			/* Read an item */
00002a  2100              MOVS     r1,#0
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dir_read
000032  4605              MOV      r5,r0
;;;3293   			if (res == FR_NO_FILE) {		/* Reached end of directory */
000034  2d04              CMP      r5,#4
000036  d102              BNE      |L30.62|
;;;3294   				dp->sect = 0;
000038  2000              MOVS     r0,#0
00003a  6120              STR      r0,[r4,#0x10]
;;;3295   				res = FR_OK;
00003c  2500              MOVS     r5,#0
                  |L30.62|
;;;3296   			}
;;;3297   			if (res == FR_OK) {				/* A valid entry is found */
00003e  b96d              CBNZ     r5,|L30.92|
;;;3298   				get_fileinfo(dp, fno);		/* Get the object information */
000040  4631              MOV      r1,r6
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fileinfo
;;;3299   				res = dir_next(dp, 0);		/* Increment index for next */
000048  2100              MOVS     r1,#0
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       dir_next
000050  4605              MOV      r5,r0
;;;3300   				if (res == FR_NO_FILE) {
000052  2d04              CMP      r5,#4
000054  d102              BNE      |L30.92|
;;;3301   					dp->sect = 0;
000056  2000              MOVS     r0,#0
000058  6120              STR      r0,[r4,#0x10]
;;;3302   					res = FR_OK;
00005a  2500              MOVS     r5,#0
                  |L30.92|
;;;3303   				}
;;;3304   			}
;;;3305   			FREE_BUF();
;;;3306   		}
;;;3307   	}
;;;3308   
;;;3309   	LEAVE_FF(dp->fs, res);
00005c  4628              MOV      r0,r5
;;;3310   }
00005e  f50d7d04          ADD      sp,sp,#0x210
000062  bd70              POP      {r4-r6,pc}
;;;3311   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;3712   
;;;3713   FRESULT f_rename (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;3714   	const TCHAR* path_old,	/* Pointer to the object to be renamed */
;;;3715   	const TCHAR* path_new	/* Pointer to the new name */
;;;3716   )
;;;3717   {
000002  f5ad7d1b          SUB      sp,sp,#0x26c
;;;3718   	FRESULT res;
;;;3719   	DIR djo, djn;
;;;3720   	BYTE buf[21], *dir;
;;;3721   	DWORD dw;
;;;3722   	DEFINE_NAMEBUF;
;;;3723   
;;;3724   
;;;3725   	/* Get logical drive number of the source object */
;;;3726   	res = find_volume(&djo.fs, &path_old, 1);
000006  2201              MOVS     r2,#1
000008  a99b              ADD      r1,sp,#0x26c
00000a  a892              ADD      r0,sp,#0x248
00000c  f7fffffe          BL       find_volume
000010  4604              MOV      r4,r0
;;;3727   	if (res == FR_OK) {
000012  2c00              CMP      r4,#0
000014  d175              BNE      |L31.258|
;;;3728   		djn.fs = djo.fs;
000016  9892              LDR      r0,[sp,#0x248]
000018  9089              STR      r0,[sp,#0x224]
;;;3729   		INIT_BUF(djo);
00001a  a880              ADD      r0,sp,#0x200
00001c  9098              STR      r0,[sp,#0x260]
00001e  f8cdd264          STR      sp,[sp,#0x264]
;;;3730   		res = follow_path(&djo, path_old);		/* Check old object */
000022  a892              ADD      r0,sp,#0x248
000024  999b              LDR      r1,[sp,#0x26c]
000026  f7fffffe          BL       follow_path
00002a  4604              MOV      r4,r0
;;;3731   		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
00002c  bf00              NOP      
;;;3732   			res = FR_INVALID_NAME;
;;;3733   #if _FS_LOCK
;;;3734   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3735   #endif
;;;3736   		if (res == FR_OK) {						/* Old object is found */
00002e  2c00              CMP      r4,#0
000030  d167              BNE      |L31.258|
;;;3737   			if (!djo.dir) {						/* Is root dir? */
000032  9897              LDR      r0,[sp,#0x25c]
000034  b908              CBNZ     r0,|L31.58|
;;;3738   				res = FR_NO_FILE;
000036  2404              MOVS     r4,#4
000038  e063              B        |L31.258|
                  |L31.58|
;;;3739   			} else {
;;;3740   				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
00003a  9897              LDR      r0,[sp,#0x25c]
00003c  f100010b          ADD      r1,r0,#0xb
000040  2215              MOVS     r2,#0x15
000042  a883              ADD      r0,sp,#0x20c
000044  f7fffffe          BL       mem_cpy
;;;3741   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
000048  2224              MOVS     r2,#0x24
00004a  a992              ADD      r1,sp,#0x248
00004c  a889              ADD      r0,sp,#0x224
00004e  f7fffffe          BL       mem_cpy
;;;3742   				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
000052  a89c              ADD      r0,sp,#0x270
000054  f7fffffe          BL       get_ldnumber
000058  2800              CMP      r0,#0
00005a  db05              BLT      |L31.104|
;;;3743   					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
00005c  a889              ADD      r0,sp,#0x224
00005e  999c              LDR      r1,[sp,#0x270]
000060  f7fffffe          BL       follow_path
000064  4604              MOV      r4,r0
000066  e000              B        |L31.106|
                  |L31.104|
;;;3744   				else
;;;3745   					res = FR_INVALID_DRIVE;
000068  240b              MOVS     r4,#0xb
                  |L31.106|
;;;3746   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
00006a  b904              CBNZ     r4,|L31.110|
00006c  2408              MOVS     r4,#8
                  |L31.110|
;;;3747   				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
00006e  2c04              CMP      r4,#4
000070  d147              BNE      |L31.258|
;;;3748   					res = dir_register(&djn);			/* Register the new entry */
000072  a889              ADD      r0,sp,#0x224
000074  f7fffffe          BL       dir_register
000078  4604              MOV      r4,r0
;;;3749   					if (res == FR_OK) {
00007a  2c00              CMP      r4,#0
00007c  d141              BNE      |L31.258|
;;;3750   /* Start of critical section where any interruption can cause a cross-link */
;;;3751   						dir = djn.dir;					/* Copy information about object except name */
00007e  9d8e              LDR      r5,[sp,#0x238]
;;;3752   						mem_cpy(dir + 13, buf + 2, 19);
000080  2213              MOVS     r2,#0x13
000082  f20d210e          ADD      r1,sp,#0x20e
000086  f105000d          ADD      r0,r5,#0xd
00008a  f7fffffe          BL       mem_cpy
;;;3753   						dir[DIR_Attr] = buf[0] | AM_ARC;
00008e  f89d020c          LDRB     r0,[sp,#0x20c]
000092  f0400020          ORR      r0,r0,#0x20
000096  72e8              STRB     r0,[r5,#0xb]
;;;3754   						djo.fs->wflag = 1;
000098  2001              MOVS     r0,#1
00009a  9992              LDR      r1,[sp,#0x248]
00009c  7108              STRB     r0,[r1,#4]
;;;3755   						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-directory if needed */
00009e  7ae8              LDRB     r0,[r5,#0xb]
0000a0  f0000010          AND      r0,r0,#0x10
0000a4  b318              CBZ      r0,|L31.238|
0000a6  998b              LDR      r1,[sp,#0x22c]
0000a8  9894              LDR      r0,[sp,#0x250]
0000aa  4288              CMP      r0,r1
0000ac  d01f              BEQ      |L31.238|
;;;3756   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
0000ae  4629              MOV      r1,r5
0000b0  9892              LDR      r0,[sp,#0x248]
0000b2  f7fffffe          BL       ld_clust
0000b6  4607              MOV      r7,r0
0000b8  4639              MOV      r1,r7
0000ba  9892              LDR      r0,[sp,#0x248]
0000bc  f7fffffe          BL       clust2sect
0000c0  4606              MOV      r6,r0
;;;3757   							if (!dw) {
0000c2  b90e              CBNZ     r6,|L31.200|
;;;3758   								res = FR_INT_ERR;
0000c4  2402              MOVS     r4,#2
0000c6  e012              B        |L31.238|
                  |L31.200|
;;;3759   							} else {
;;;3760   								res = move_window(djo.fs, dw);
0000c8  4631              MOV      r1,r6
0000ca  9892              LDR      r0,[sp,#0x248]
0000cc  f7fffffe          BL       move_window
0000d0  4604              MOV      r4,r0
;;;3761   								dir = djo.fs->win + SZ_DIRE * 1;	/* Ptr to .. entry */
0000d2  9892              LDR      r0,[sp,#0x248]
0000d4  f1000550          ADD      r5,r0,#0x50
;;;3762   								if (res == FR_OK && dir[1] == '.') {
0000d8  b94c              CBNZ     r4,|L31.238|
0000da  7868              LDRB     r0,[r5,#1]
0000dc  282e              CMP      r0,#0x2e
0000de  d106              BNE      |L31.238|
;;;3763   									st_clust(dir, djn.sclust);
0000e0  4628              MOV      r0,r5
0000e2  998b              LDR      r1,[sp,#0x22c]
0000e4  f7fffffe          BL       st_clust
;;;3764   									djo.fs->wflag = 1;
0000e8  2001              MOVS     r0,#1
0000ea  9992              LDR      r1,[sp,#0x248]
0000ec  7108              STRB     r0,[r1,#4]
                  |L31.238|
;;;3765   								}
;;;3766   							}
;;;3767   						}
;;;3768   						if (res == FR_OK) {
0000ee  b944              CBNZ     r4,|L31.258|
;;;3769   							res = dir_remove(&djo);		/* Remove old entry */
0000f0  a892              ADD      r0,sp,#0x248
0000f2  f7fffffe          BL       dir_remove
0000f6  4604              MOV      r4,r0
;;;3770   							if (res == FR_OK)
0000f8  b91c              CBNZ     r4,|L31.258|
;;;3771   								res = sync_fs(djo.fs);
0000fa  9892              LDR      r0,[sp,#0x248]
0000fc  f7fffffe          BL       sync_fs
000100  4604              MOV      r4,r0
                  |L31.258|
;;;3772   						}
;;;3773   /* End of critical section */
;;;3774   					}
;;;3775   				}
;;;3776   			}
;;;3777   		}
;;;3778   		FREE_BUF();
;;;3779   	}
;;;3780   
;;;3781   	LEAVE_FF(djo.fs, res);
000102  4620              MOV      r0,r4
;;;3782   }
000104  f50d7d1d          ADD      sp,sp,#0x274
000108  bdf0              POP      {r4-r7,pc}
;;;3783   
                          ENDP


                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;3370   
;;;3371   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3372   	const TCHAR* path,	/* Pointer to the file path */
;;;3373   	FILINFO* fno		/* Pointer to file information to return */
;;;3374   )
;;;3375   {
000002  f5ad7d0d          SUB      sp,sp,#0x234
000006  460d              MOV      r5,r1
;;;3376   	FRESULT res;
;;;3377   	DIR dj;
;;;3378   	DEFINE_NAMEBUF;
;;;3379   
;;;3380   
;;;3381   	/* Get logical drive number */
;;;3382   	res = find_volume(&dj.fs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  a98d              ADD      r1,sp,#0x234
00000c  a884              ADD      r0,sp,#0x210
00000e  f7fffffe          BL       find_volume
000012  4604              MOV      r4,r0
;;;3383   	if (res == FR_OK) {
000014  b994              CBNZ     r4,|L32.60|
;;;3384   		INIT_BUF(dj);
000016  a881              ADD      r0,sp,#0x204
000018  908a              STR      r0,[sp,#0x228]
00001a  a801              ADD      r0,sp,#4
00001c  908b              STR      r0,[sp,#0x22c]
;;;3385   		res = follow_path(&dj, path);	/* Follow the file path */
00001e  a884              ADD      r0,sp,#0x210
000020  998d              LDR      r1,[sp,#0x234]
000022  f7fffffe          BL       follow_path
000026  4604              MOV      r4,r0
;;;3386   		if (res == FR_OK) {				/* Follow completed */
000028  b944              CBNZ     r4,|L32.60|
;;;3387   			if (dj.dir) {		/* Found an object */
00002a  9889              LDR      r0,[sp,#0x224]
00002c  b128              CBZ      r0,|L32.58|
;;;3388   				if (fno) get_fileinfo(&dj, fno);
00002e  b12d              CBZ      r5,|L32.60|
000030  4629              MOV      r1,r5
000032  a884              ADD      r0,sp,#0x210
000034  f7fffffe          BL       get_fileinfo
000038  e000              B        |L32.60|
                  |L32.58|
;;;3389   			} else {			/* It is root directory */
;;;3390   				res = FR_INVALID_NAME;
00003a  2406              MOVS     r4,#6
                  |L32.60|
;;;3391   			}
;;;3392   		}
;;;3393   		FREE_BUF();
;;;3394   	}
;;;3395   
;;;3396   	LEAVE_FF(dj.fs, res);
00003c  4620              MOV      r0,r4
;;;3397   }
00003e  f50d7d0f          ADD      sp,sp,#0x23c
000042  bd30              POP      {r4,r5,pc}
;;;3398   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2810   
;;;2811   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2812   	FIL* fp		/* Pointer to the file object */
;;;2813   )
;;;2814   {
000004  4604              MOV      r4,r0
;;;2815   	FRESULT res;
;;;2816   	DWORD tm;
;;;2817   	BYTE *dir;
;;;2818   
;;;2819   
;;;2820   	res = validate(fp);					/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2821   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d14c              BNE      |L33.172|
;;;2822   		if (fp->flag & FA__WRITTEN) {	/* Is there any change to the file? */
000012  79a0              LDRB     r0,[r4,#6]
000014  f0000020          AND      r0,r0,#0x20
000018  2800              CMP      r0,#0
00001a  d047              BEQ      |L33.172|
;;;2823   #if !_FS_TINY
;;;2824   			if (fp->flag & FA__DIRTY) {	/* Write-back cached data if needed */
00001c  79a0              LDRB     r0,[r4,#6]
00001e  f0000040          AND      r0,r0,#0x40
000022  b178              CBZ      r0,|L33.68|
;;;2825   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
000024  6821              LDR      r1,[r4,#0]
000026  7848              LDRB     r0,[r1,#1]
000028  2301              MOVS     r3,#1
00002a  f1040124          ADD      r1,r4,#0x24
00002e  69a2              LDR      r2,[r4,#0x18]
000030  f7fffffe          BL       disk_write
000034  b110              CBZ      r0,|L33.60|
;;;2826   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000036  2001              MOVS     r0,#1
                  |L33.56|
;;;2827   				fp->flag &= ~FA__DIRTY;
;;;2828   			}
;;;2829   #endif
;;;2830   			/* Update the directory entry */
;;;2831   			res = move_window(fp->fs, fp->dir_sect);
;;;2832   			if (res == FR_OK) {
;;;2833   				dir = fp->dir_ptr;
;;;2834   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2835   				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
;;;2836   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2837   				tm = GET_FATTIME();							/* Update modified time */
;;;2838   				ST_DWORD(dir + DIR_WrtTime, tm);
;;;2839   				ST_WORD(dir + DIR_LstAccDate, 0);
;;;2840   				fp->flag &= ~FA__WRITTEN;
;;;2841   				fp->fs->wflag = 1;
;;;2842   				res = sync_fs(fp->fs);
;;;2843   			}
;;;2844   		}
;;;2845   	}
;;;2846   
;;;2847   	LEAVE_FF(fp->fs, res);
;;;2848   }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L33.60|
00003c  79a0              LDRB     r0,[r4,#6]            ;2827
00003e  f0200040          BIC      r0,r0,#0x40           ;2827
000042  71a0              STRB     r0,[r4,#6]            ;2827
                  |L33.68|
000044  69e1              LDR      r1,[r4,#0x1c]         ;2831
000046  6820              LDR      r0,[r4,#0]            ;2831
000048  f7fffffe          BL       move_window
00004c  4607              MOV      r7,r0                 ;2831
00004e  2f00              CMP      r7,#0                 ;2832
000050  d12c              BNE      |L33.172|
000052  6a25              LDR      r5,[r4,#0x20]         ;2833
000054  7ae8              LDRB     r0,[r5,#0xb]          ;2834
000056  f0400020          ORR      r0,r0,#0x20           ;2834
00005a  72e8              STRB     r0,[r5,#0xb]          ;2834
00005c  7b20              LDRB     r0,[r4,#0xc]          ;2835
00005e  7728              STRB     r0,[r5,#0x1c]         ;2835
000060  89a0              LDRH     r0,[r4,#0xc]          ;2835
000062  0a01              LSRS     r1,r0,#8              ;2835
000064  7769              STRB     r1,[r5,#0x1d]         ;2835
000066  68e0              LDR      r0,[r4,#0xc]          ;2835
000068  0c01              LSRS     r1,r0,#16             ;2835
00006a  77a9              STRB     r1,[r5,#0x1e]         ;2835
00006c  68e0              LDR      r0,[r4,#0xc]          ;2835
00006e  0e01              LSRS     r1,r0,#24             ;2835
000070  77e9              STRB     r1,[r5,#0x1f]         ;2835
000072  4628              MOV      r0,r5                 ;2836
000074  6921              LDR      r1,[r4,#0x10]         ;2836
000076  f7fffffe          BL       st_clust
00007a  f7fffffe          BL       get_fattime
00007e  4606              MOV      r6,r0                 ;2837
000080  75ae              STRB     r6,[r5,#0x16]         ;2838
000082  0a31              LSRS     r1,r6,#8              ;2838
000084  75e9              STRB     r1,[r5,#0x17]         ;2838
000086  0c31              LSRS     r1,r6,#16             ;2838
000088  7629              STRB     r1,[r5,#0x18]         ;2838
00008a  0e31              LSRS     r1,r6,#24             ;2838
00008c  7669              STRB     r1,[r5,#0x19]         ;2838
00008e  2000              MOVS     r0,#0                 ;2839
000090  74a8              STRB     r0,[r5,#0x12]         ;2839
000092  2100              MOVS     r1,#0                 ;2839
000094  74e9              STRB     r1,[r5,#0x13]         ;2839
000096  79a0              LDRB     r0,[r4,#6]            ;2840
000098  f0200020          BIC      r0,r0,#0x20           ;2840
00009c  71a0              STRB     r0,[r4,#6]            ;2840
00009e  2001              MOVS     r0,#1                 ;2841
0000a0  6821              LDR      r1,[r4,#0]            ;2841
0000a2  7108              STRB     r0,[r1,#4]            ;2841
0000a4  6820              LDR      r0,[r4,#0]            ;2842
0000a6  f7fffffe          BL       sync_fs
0000aa  4607              MOV      r7,r0                 ;2842
                  |L33.172|
0000ac  4638              MOV      r0,r7                 ;2847
0000ae  e7c3              B        |L33.56|
;;;2849   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;3471   
;;;3472   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;3473   	FIL* fp		/* Pointer to the file object */
;;;3474   )
;;;3475   {
000002  4604              MOV      r4,r0
;;;3476   	FRESULT res;
;;;3477   	DWORD ncl;
;;;3478   
;;;3479   
;;;3480   	res = validate(fp);						/* Check validity of the object */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3481   	if (res == FR_OK) {
00000c  b945              CBNZ     r5,|L34.32|
;;;3482   		if (fp->err) {						/* Check error */
00000e  79e0              LDRB     r0,[r4,#7]
000010  b108              CBZ      r0,|L34.22|
;;;3483   			res = (FRESULT)fp->err;
000012  79e5              LDRB     r5,[r4,#7]
000014  e004              B        |L34.32|
                  |L34.22|
;;;3484   		} else {
;;;3485   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
000016  79a0              LDRB     r0,[r4,#6]
000018  f0000002          AND      r0,r0,#2
00001c  b900              CBNZ     r0,|L34.32|
;;;3486   				res = FR_DENIED;
00001e  2507              MOVS     r5,#7
                  |L34.32|
;;;3487   		}
;;;3488   	}
;;;3489   	if (res == FR_OK) {
000020  2d00              CMP      r5,#0
000022  d147              BNE      |L34.180|
;;;3490   		if (fp->fsize > fp->fptr) {
000024  e9d41002          LDRD     r1,r0,[r4,#8]
000028  4288              CMP      r0,r1
00002a  d941              BLS      |L34.176|
;;;3491   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
00002c  68a0              LDR      r0,[r4,#8]
00002e  60e0              STR      r0,[r4,#0xc]
;;;3492   			fp->flag |= FA__WRITTEN;
000030  79a0              LDRB     r0,[r4,#6]
000032  f0400020          ORR      r0,r0,#0x20
000036  71a0              STRB     r0,[r4,#6]
;;;3493   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
000038  68a0              LDR      r0,[r4,#8]
00003a  b938              CBNZ     r0,|L34.76|
;;;3494   				res = remove_chain(fp->fs, fp->sclust);
00003c  6921              LDR      r1,[r4,#0x10]
00003e  6820              LDR      r0,[r4,#0]
000040  f7fffffe          BL       remove_chain
000044  4605              MOV      r5,r0
;;;3495   				fp->sclust = 0;
000046  2000              MOVS     r0,#0
000048  6120              STR      r0,[r4,#0x10]
00004a  e01d              B        |L34.136|
                  |L34.76|
;;;3496   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3497   				ncl = get_fat(fp->fs, fp->clust);
00004c  6961              LDR      r1,[r4,#0x14]
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       get_fat
000054  4606              MOV      r6,r0
;;;3498   				res = FR_OK;
000056  2500              MOVS     r5,#0
;;;3499   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
000058  1c70              ADDS     r0,r6,#1
00005a  b900              CBNZ     r0,|L34.94|
00005c  2501              MOVS     r5,#1
                  |L34.94|
;;;3500   				if (ncl == 1) res = FR_INT_ERR;
00005e  2e01              CMP      r6,#1
000060  d100              BNE      |L34.100|
000062  2502              MOVS     r5,#2
                  |L34.100|
;;;3501   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000064  b985              CBNZ     r5,|L34.136|
000066  6820              LDR      r0,[r4,#0]
000068  6940              LDR      r0,[r0,#0x14]
00006a  42b0              CMP      r0,r6
00006c  d90c              BLS      |L34.136|
;;;3502   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
00006e  f06f4270          MVN      r2,#0xf0000000
000072  6961              LDR      r1,[r4,#0x14]
000074  6820              LDR      r0,[r4,#0]
000076  f7fffffe          BL       put_fat
00007a  4605              MOV      r5,r0
;;;3503   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
00007c  b925              CBNZ     r5,|L34.136|
00007e  4631              MOV      r1,r6
000080  6820              LDR      r0,[r4,#0]
000082  f7fffffe          BL       remove_chain
000086  4605              MOV      r5,r0
                  |L34.136|
;;;3504   				}
;;;3505   			}
;;;3506   #if !_FS_TINY
;;;3507   			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
000088  b995              CBNZ     r5,|L34.176|
00008a  79a0              LDRB     r0,[r4,#6]
00008c  f0000040          AND      r0,r0,#0x40
000090  b170              CBZ      r0,|L34.176|
;;;3508   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
000092  6821              LDR      r1,[r4,#0]
000094  7848              LDRB     r0,[r1,#1]
000096  2301              MOVS     r3,#1
000098  f1040124          ADD      r1,r4,#0x24
00009c  69a2              LDR      r2,[r4,#0x18]
00009e  f7fffffe          BL       disk_write
0000a2  b108              CBZ      r0,|L34.168|
;;;3509   					res = FR_DISK_ERR;
0000a4  2501              MOVS     r5,#1
0000a6  e003              B        |L34.176|
                  |L34.168|
;;;3510   				else
;;;3511   					fp->flag &= ~FA__DIRTY;
0000a8  79a0              LDRB     r0,[r4,#6]
0000aa  f0200040          BIC      r0,r0,#0x40
0000ae  71a0              STRB     r0,[r4,#6]
                  |L34.176|
;;;3512   			}
;;;3513   #endif
;;;3514   		}
;;;3515   		if (res != FR_OK) fp->err = (FRESULT)res;
0000b0  b105              CBZ      r5,|L34.180|
0000b2  71e5              STRB     r5,[r4,#7]
                  |L34.180|
;;;3516   	}
;;;3517   
;;;3518   	LEAVE_FF(fp->fs, res);
0000b4  4628              MOV      r0,r5
;;;3519   }
0000b6  bd70              POP      {r4-r6,pc}
;;;3520   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;3527   
;;;3528   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;3529   	const TCHAR* path		/* Pointer to the file or directory path */
;;;3530   )
;;;3531   {
000002  f5ad7d15          SUB      sp,sp,#0x254
;;;3532   	FRESULT res;
;;;3533   	DIR dj, sdj;
;;;3534   	BYTE *dir;
;;;3535   	DWORD dclst = 0;
000006  2600              MOVS     r6,#0
;;;3536   	DEFINE_NAMEBUF;
;;;3537   
;;;3538   
;;;3539   	/* Get logical drive number */
;;;3540   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  a995              ADD      r1,sp,#0x254
00000c  a88c              ADD      r0,sp,#0x230
00000e  f7fffffe          BL       find_volume
000012  4604              MOV      r4,r0
;;;3541   	if (res == FR_OK) {
000014  2c00              CMP      r4,#0
000016  d146              BNE      |L35.166|
;;;3542   		INIT_BUF(dj);
000018  a880              ADD      r0,sp,#0x200
00001a  9092              STR      r0,[sp,#0x248]
00001c  f8cdd24c          STR      sp,[sp,#0x24c]
;;;3543   		res = follow_path(&dj, path);		/* Follow the file path */
000020  a88c              ADD      r0,sp,#0x230
000022  9995              LDR      r1,[sp,#0x254]
000024  f7fffffe          BL       follow_path
000028  4604              MOV      r4,r0
;;;3544   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
00002a  bf00              NOP      
;;;3545   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3546   #if _FS_LOCK
;;;3547   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
;;;3548   #endif
;;;3549   		if (res == FR_OK) {					/* The object is accessible */
00002c  2c00              CMP      r4,#0
00002e  d13a              BNE      |L35.166|
;;;3550   			dir = dj.dir;
000030  9d91              LDR      r5,[sp,#0x244]
;;;3551   			if (!dir) {
000032  b90d              CBNZ     r5,|L35.56|
;;;3552   				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
000034  2406              MOVS     r4,#6
000036  e004              B        |L35.66|
                  |L35.56|
;;;3553   			} else {
;;;3554   				if (dir[DIR_Attr] & AM_RDO)
000038  7ae8              LDRB     r0,[r5,#0xb]
00003a  f0000001          AND      r0,r0,#1
00003e  b100              CBZ      r0,|L35.66|
;;;3555   					res = FR_DENIED;		/* Cannot remove R/O object */
000040  2407              MOVS     r4,#7
                  |L35.66|
;;;3556   			}
;;;3557   			if (res == FR_OK) {
000042  b9fc              CBNZ     r4,|L35.132|
;;;3558   				dclst = ld_clust(dj.fs, dir);
000044  4629              MOV      r1,r5
000046  988c              LDR      r0,[sp,#0x230]
000048  f7fffffe          BL       ld_clust
00004c  4606              MOV      r6,r0
;;;3559   				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
00004e  b1ce              CBZ      r6,|L35.132|
000050  7ae8              LDRB     r0,[r5,#0xb]
000052  f0000010          AND      r0,r0,#0x10
000056  b1a8              CBZ      r0,|L35.132|
;;;3560   #if _FS_RPATH
;;;3561   					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
;;;3562   						res = FR_DENIED;
;;;3563   					} else
;;;3564   #endif
;;;3565   					{
;;;3566   						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
000058  2224              MOVS     r2,#0x24
00005a  a98c              ADD      r1,sp,#0x230
00005c  a883              ADD      r0,sp,#0x20c
00005e  f7fffffe          BL       mem_cpy
;;;3567   						sdj.sclust = dclst;
000062  9685              STR      r6,[sp,#0x214]
;;;3568   						res = dir_sdi(&sdj, 2);
000064  2102              MOVS     r1,#2
000066  a883              ADD      r0,sp,#0x20c
000068  f7fffffe          BL       dir_sdi
00006c  4604              MOV      r4,r0
;;;3569   						if (res == FR_OK) {
00006e  b94c              CBNZ     r4,|L35.132|
;;;3570   							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
000070  2100              MOVS     r1,#0
000072  a883              ADD      r0,sp,#0x20c
000074  f7fffffe          BL       dir_read
000078  4604              MOV      r4,r0
;;;3571   							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
00007a  b904              CBNZ     r4,|L35.126|
00007c  2407              MOVS     r4,#7
                  |L35.126|
;;;3572   							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
00007e  2c04              CMP      r4,#4
000080  d100              BNE      |L35.132|
000082  2400              MOVS     r4,#0
                  |L35.132|
;;;3573   						}
;;;3574   					}
;;;3575   				}
;;;3576   			}
;;;3577   			if (res == FR_OK) {
000084  b97c              CBNZ     r4,|L35.166|
;;;3578   				res = dir_remove(&dj);		/* Remove the directory entry */
000086  a88c              ADD      r0,sp,#0x230
000088  f7fffffe          BL       dir_remove
00008c  4604              MOV      r4,r0
;;;3579   				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
00008e  b92c              CBNZ     r4,|L35.156|
000090  b126              CBZ      r6,|L35.156|
;;;3580   					res = remove_chain(dj.fs, dclst);
000092  4631              MOV      r1,r6
000094  988c              LDR      r0,[sp,#0x230]
000096  f7fffffe          BL       remove_chain
00009a  4604              MOV      r4,r0
                  |L35.156|
;;;3581   				if (res == FR_OK) res = sync_fs(dj.fs);
00009c  b91c              CBNZ     r4,|L35.166|
00009e  988c              LDR      r0,[sp,#0x230]
0000a0  f7fffffe          BL       sync_fs
0000a4  4604              MOV      r4,r0
                  |L35.166|
;;;3582   			}
;;;3583   		}
;;;3584   		FREE_BUF();
;;;3585   	}
;;;3586   
;;;3587   	LEAVE_FF(dj.fs, res);
0000a6  4620              MOV      r0,r4
;;;3588   }
0000a8  f50d7d16          ADD      sp,sp,#0x258
0000ac  bd70              POP      {r4-r6,pc}
;;;3589   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;3790   
;;;3791   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3792   	const TCHAR* path,	/* Pointer to the file/directory name */
;;;3793   	const FILINFO* fno	/* Pointer to the time stamp to be set */
;;;3794   )
;;;3795   {
000002  f5ad7d0c          SUB      sp,sp,#0x230
000006  460d              MOV      r5,r1
;;;3796   	FRESULT res;
;;;3797   	DIR dj;
;;;3798   	BYTE *dir;
;;;3799   	DEFINE_NAMEBUF;
;;;3800   
;;;3801   
;;;3802   	/* Get logical drive number */
;;;3803   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  a98c              ADD      r1,sp,#0x230
00000c  a883              ADD      r0,sp,#0x20c
00000e  f7fffffe          BL       find_volume
000012  4606              MOV      r6,r0
;;;3804   	if (res == FR_OK) {
000014  b9fe              CBNZ     r6,|L36.86|
;;;3805   		INIT_BUF(dj);
000016  a880              ADD      r0,sp,#0x200
000018  9089              STR      r0,[sp,#0x224]
00001a  f8cdd228          STR      sp,[sp,#0x228]
;;;3806   		res = follow_path(&dj, path);	/* Follow the file path */
00001e  a883              ADD      r0,sp,#0x20c
000020  998c              LDR      r1,[sp,#0x230]
000022  f7fffffe          BL       follow_path
000026  4606              MOV      r6,r0
;;;3807   		FREE_BUF();
;;;3808   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
000028  bf00              NOP      
;;;3809   			res = FR_INVALID_NAME;
;;;3810   		if (res == FR_OK) {
00002a  b9a6              CBNZ     r6,|L36.86|
;;;3811   			dir = dj.dir;
00002c  9c88              LDR      r4,[sp,#0x220]
;;;3812   			if (!dir) {					/* Root directory */
00002e  b90c              CBNZ     r4,|L36.52|
;;;3813   				res = FR_INVALID_NAME;
000030  2606              MOVS     r6,#6
000032  e010              B        |L36.86|
                  |L36.52|
;;;3814   			} else {					/* File or sub-directory */
;;;3815   				ST_WORD(dir + DIR_WrtTime, fno->ftime);
000034  79a8              LDRB     r0,[r5,#6]
000036  75a0              STRB     r0,[r4,#0x16]
000038  88e8              LDRH     r0,[r5,#6]
00003a  1201              ASRS     r1,r0,#8
00003c  75e1              STRB     r1,[r4,#0x17]
;;;3816   				ST_WORD(dir + DIR_WrtDate, fno->fdate);
00003e  7928              LDRB     r0,[r5,#4]
000040  7620              STRB     r0,[r4,#0x18]
000042  88a8              LDRH     r0,[r5,#4]
000044  1201              ASRS     r1,r0,#8
000046  7661              STRB     r1,[r4,#0x19]
;;;3817   				dj.fs->wflag = 1;
000048  2001              MOVS     r0,#1
00004a  9983              LDR      r1,[sp,#0x20c]
00004c  7108              STRB     r0,[r1,#4]
;;;3818   				res = sync_fs(dj.fs);
00004e  9883              LDR      r0,[sp,#0x20c]
000050  f7fffffe          BL       sync_fs
000054  4606              MOV      r6,r0
                  |L36.86|
;;;3819   			}
;;;3820   		}
;;;3821   	}
;;;3822   
;;;3823   	LEAVE_FF(dj.fs, res);
000056  4630              MOV      r0,r6
;;;3824   }
000058  f50d7d0e          ADD      sp,sp,#0x238
00005c  bd70              POP      {r4-r6,pc}
;;;3825   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2688   
;;;2689   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2690   	FIL* fp,			/* Pointer to the file object */
;;;2691   	const void *buff,	/* Pointer to the data to be written */
;;;2692   	UINT btw,			/* Number of bytes to write */
;;;2693   	UINT* bw			/* Pointer to number of bytes written */
;;;2694   )
;;;2695   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;2696   	FRESULT res;
;;;2697   	DWORD clst, sect;
;;;2698   	UINT wcnt, cc;
;;;2699   	const BYTE *wbuff = (const BYTE*)buff;
00000c  9804              LDR      r0,[sp,#0x10]
00000e  9001              STR      r0,[sp,#4]
;;;2700   	BYTE csect;
;;;2701   
;;;2702   
;;;2703   	*bw = 0;	/* Clear write byte counter */
000010  2000              MOVS     r0,#0
000012  f8cb0000          STR      r0,[r11,#0]
;;;2704   
;;;2705   	res = validate(fp);						/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2706   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L37.42|
000022  9802              LDR      r0,[sp,#8]
                  |L37.36|
;;;2707   	if (fp->err)							/* Check error */
;;;2708   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2709   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2710   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2711   	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
;;;2712   
;;;2713   	for ( ;  btw;							/* Repeat until all data written */
;;;2714   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2715   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2716   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2717   			if (!csect) {					/* On the cluster boundary? */
;;;2718   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2719   					clst = fp->sclust;		/* Follow from the origin */
;;;2720   					if (clst == 0)			/* When no cluster is allocated, */
;;;2721   						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2722   				} else {					/* Middle or end of the file */
;;;2723   #if _USE_FASTSEEK
;;;2724   					if (fp->cltbl)
;;;2725   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2726   					else
;;;2727   #endif
;;;2728   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2729   				}
;;;2730   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2731   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2732   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2733   				fp->clust = clst;			/* Update current cluster */
;;;2734   				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
;;;2735   			}
;;;2736   #if _FS_TINY
;;;2737   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2738   				ABORT(fp->fs, FR_DISK_ERR);
;;;2739   #else
;;;2740   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2741   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2742   					ABORT(fp->fs, FR_DISK_ERR);
;;;2743   				fp->flag &= ~FA__DIRTY;
;;;2744   			}
;;;2745   #endif
;;;2746   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2747   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2748   			sect += csect;
;;;2749   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2750   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2751   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2752   					cc = fp->fs->csize - csect;
;;;2753   				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
;;;2754   					ABORT(fp->fs, FR_DISK_ERR);
;;;2755   #if _FS_MINIMIZE <= 2
;;;2756   #if _FS_TINY
;;;2757   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2758   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2759   					fp->fs->wflag = 0;
;;;2760   				}
;;;2761   #else
;;;2762   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2763   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2764   					fp->flag &= ~FA__DIRTY;
;;;2765   				}
;;;2766   #endif
;;;2767   #endif
;;;2768   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2769   				continue;
;;;2770   			}
;;;2771   #if _FS_TINY
;;;2772   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2773   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2774   				fp->fs->winsect = sect;
;;;2775   			}
;;;2776   #else
;;;2777   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2778   				if (fp->fptr < fp->fsize &&
;;;2779   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2780   						ABORT(fp->fs, FR_DISK_ERR);
;;;2781   			}
;;;2782   #endif
;;;2783   			fp->dsect = sect;
;;;2784   		}
;;;2785   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2786   		if (wcnt > btw) wcnt = btw;
;;;2787   #if _FS_TINY
;;;2788   		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
;;;2789   			ABORT(fp->fs, FR_DISK_ERR);
;;;2790   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2791   		fp->fs->wflag = 1;
;;;2792   #else
;;;2793   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2794   		fp->flag |= FA__DIRTY;
;;;2795   #endif
;;;2796   	}
;;;2797   
;;;2798   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2799   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2800   
;;;2801   	LEAVE_FF(fp->fs, FR_OK);
;;;2802   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L37.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2707
00002c  b108              CBZ      r0,|L37.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2708
000030  e7f8              B        |L37.36|
                  |L37.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2709
000034  f0000002          AND      r0,r0,#2              ;2709
000038  b908              CBNZ     r0,|L37.62|
00003a  2007              MOVS     r0,#7                 ;2710
00003c  e7f2              B        |L37.36|
                  |L37.62|
00003e  68a0              LDR      r0,[r4,#8]            ;2711
000040  4428              ADD      r0,r0,r5              ;2711
000042  68a1              LDR      r1,[r4,#8]            ;2711
000044  4288              CMP      r0,r1                 ;2711
000046  d200              BCS      |L37.74|
000048  2500              MOVS     r5,#0                 ;2711
                  |L37.74|
00004a  e0cf              B        |L37.492|
                  |L37.76|
00004c  6821              LDR      r1,[r4,#0]            ;2715
00004e  8949              LDRH     r1,[r1,#0xa]          ;2715
000050  68a0              LDR      r0,[r4,#8]            ;2715
000052  fbb0f2f1          UDIV     r2,r0,r1              ;2715
000056  fb010012          MLS      r0,r1,r2,r0           ;2715
00005a  2800              CMP      r0,#0                 ;2715
00005c  d17e              BNE      |L37.348|
00005e  6821              LDR      r1,[r4,#0]            ;2716
000060  8949              LDRH     r1,[r1,#0xa]          ;2716
000062  68a0              LDR      r0,[r4,#8]            ;2716
000064  fbb0f0f1          UDIV     r0,r0,r1              ;2716
000068  6821              LDR      r1,[r4,#0]            ;2716
00006a  7889              LDRB     r1,[r1,#2]            ;2716
00006c  1e49              SUBS     r1,r1,#1              ;2716
00006e  4008              ANDS     r0,r0,r1              ;2716
000070  f0000aff          AND      r10,r0,#0xff          ;2716
000074  f1ba0f00          CMP      r10,#0                ;2717
000078  d11e              BNE      |L37.184|
00007a  68a0              LDR      r0,[r4,#8]            ;2718
00007c  b938              CBNZ     r0,|L37.142|
00007e  6927              LDR      r7,[r4,#0x10]         ;2719
000080  b957              CBNZ     r7,|L37.152|
000082  2100              MOVS     r1,#0                 ;2721
000084  6820              LDR      r0,[r4,#0]            ;2721
000086  f7fffffe          BL       create_chain
00008a  4607              MOV      r7,r0                 ;2721
00008c  e004              B        |L37.152|
                  |L37.142|
00008e  6961              LDR      r1,[r4,#0x14]         ;2728
000090  6820              LDR      r0,[r4,#0]            ;2728
000092  f7fffffe          BL       create_chain
000096  4607              MOV      r7,r0                 ;2728
                  |L37.152|
000098  b907              CBNZ     r7,|L37.156|
00009a  e0aa              B        |L37.498|
                  |L37.156|
00009c  2f01              CMP      r7,#1                 ;2731
00009e  d102              BNE      |L37.166|
0000a0  2002              MOVS     r0,#2                 ;2731
0000a2  71e0              STRB     r0,[r4,#7]            ;2731
0000a4  e7be              B        |L37.36|
                  |L37.166|
0000a6  1c78              ADDS     r0,r7,#1              ;2732
0000a8  b910              CBNZ     r0,|L37.176|
0000aa  2001              MOVS     r0,#1                 ;2732
0000ac  71e0              STRB     r0,[r4,#7]            ;2732
0000ae  e7b9              B        |L37.36|
                  |L37.176|
0000b0  6167              STR      r7,[r4,#0x14]         ;2733
0000b2  6920              LDR      r0,[r4,#0x10]         ;2734
0000b4  b900              CBNZ     r0,|L37.184|
0000b6  6127              STR      r7,[r4,#0x10]         ;2734
                  |L37.184|
0000b8  79a0              LDRB     r0,[r4,#6]            ;2740
0000ba  f0000040          AND      r0,r0,#0x40           ;2740
0000be  b178              CBZ      r0,|L37.224|
0000c0  6821              LDR      r1,[r4,#0]            ;2741
0000c2  7848              LDRB     r0,[r1,#1]            ;2741
0000c4  2301              MOVS     r3,#1                 ;2741
0000c6  f1040124          ADD      r1,r4,#0x24           ;2741
0000ca  69a2              LDR      r2,[r4,#0x18]         ;2741
0000cc  f7fffffe          BL       disk_write
0000d0  b110              CBZ      r0,|L37.216|
0000d2  2001              MOVS     r0,#1                 ;2742
0000d4  71e0              STRB     r0,[r4,#7]            ;2742
0000d6  e7a5              B        |L37.36|
                  |L37.216|
0000d8  79a0              LDRB     r0,[r4,#6]            ;2743
0000da  f0200040          BIC      r0,r0,#0x40           ;2743
0000de  71a0              STRB     r0,[r4,#6]            ;2743
                  |L37.224|
0000e0  6961              LDR      r1,[r4,#0x14]         ;2746
0000e2  6820              LDR      r0,[r4,#0]            ;2746
0000e4  f7fffffe          BL       clust2sect
0000e8  4606              MOV      r6,r0                 ;2746
0000ea  b916              CBNZ     r6,|L37.242|
0000ec  2002              MOVS     r0,#2                 ;2747
0000ee  71e0              STRB     r0,[r4,#7]            ;2747
0000f0  e798              B        |L37.36|
                  |L37.242|
0000f2  4456              ADD      r6,r6,r10             ;2748
0000f4  6820              LDR      r0,[r4,#0]            ;2749
0000f6  8940              LDRH     r0,[r0,#0xa]          ;2749
0000f8  fbb5f9f0          UDIV     r9,r5,r0              ;2749
0000fc  f1b90f00          CMP      r9,#0                 ;2750
000100  d031              BEQ      |L37.358|
000102  eb0a0009          ADD      r0,r10,r9             ;2751
000106  6821              LDR      r1,[r4,#0]            ;2751
000108  7889              LDRB     r1,[r1,#2]            ;2751
00010a  4288              CMP      r0,r1                 ;2751
00010c  d903              BLS      |L37.278|
00010e  6820              LDR      r0,[r4,#0]            ;2752
000110  7880              LDRB     r0,[r0,#2]            ;2752
000112  eba0090a          SUB      r9,r0,r10             ;2752
                  |L37.278|
000116  6821              LDR      r1,[r4,#0]            ;2753
000118  7848              LDRB     r0,[r1,#1]            ;2753
00011a  464b              MOV      r3,r9                 ;2753
00011c  4632              MOV      r2,r6                 ;2753
00011e  9901              LDR      r1,[sp,#4]            ;2753
000120  f7fffffe          BL       disk_write
000124  b110              CBZ      r0,|L37.300|
000126  2001              MOVS     r0,#1                 ;2754
000128  71e0              STRB     r0,[r4,#7]            ;2754
00012a  e77b              B        |L37.36|
                  |L37.300|
00012c  69a0              LDR      r0,[r4,#0x18]         ;2762
00012e  1b80              SUBS     r0,r0,r6              ;2762
000130  4548              CMP      r0,r9                 ;2762
000132  d211              BCS      |L37.344|
000134  69a0              LDR      r0,[r4,#0x18]         ;2763
000136  1b83              SUBS     r3,r0,r6              ;2763
000138  6820              LDR      r0,[r4,#0]            ;2763
00013a  f8b0c00a          LDRH     r12,[r0,#0xa]         ;2763
00013e  9801              LDR      r0,[sp,#4]            ;2763
000140  fb03010c          MLA      r1,r3,r12,r0          ;2763
000144  6820              LDR      r0,[r4,#0]            ;2763
000146  8942              LDRH     r2,[r0,#0xa]          ;2763
000148  f1040024          ADD      r0,r4,#0x24           ;2763
00014c  f7fffffe          BL       mem_cpy
000150  79a0              LDRB     r0,[r4,#6]            ;2764
000152  f0200040          BIC      r0,r0,#0x40           ;2764
000156  71a0              STRB     r0,[r4,#6]            ;2764
                  |L37.344|
000158  6820              LDR      r0,[r4,#0]            ;2768
00015a  e000              B        |L37.350|
                  |L37.348|
00015c  e017              B        |L37.398|
                  |L37.350|
00015e  8940              LDRH     r0,[r0,#0xa]          ;2768
000160  fb00f809          MUL      r8,r0,r9              ;2768
000164  e035              B        |L37.466|
                  |L37.358|
000166  69a0              LDR      r0,[r4,#0x18]         ;2777
000168  42b0              CMP      r0,r6                 ;2777
00016a  d00f              BEQ      |L37.396|
00016c  e9d40102          LDRD     r0,r1,[r4,#8]         ;2778
000170  4288              CMP      r0,r1                 ;2778
000172  d20b              BCS      |L37.396|
000174  6821              LDR      r1,[r4,#0]            ;2779
000176  7848              LDRB     r0,[r1,#1]            ;2779
000178  2301              MOVS     r3,#1                 ;2779
00017a  4632              MOV      r2,r6                 ;2779
00017c  f1040124          ADD      r1,r4,#0x24           ;2779
000180  f7fffffe          BL       disk_read
000184  b110              CBZ      r0,|L37.396|
000186  2001              MOVS     r0,#1                 ;2780
000188  71e0              STRB     r0,[r4,#7]            ;2780
00018a  e74b              B        |L37.36|
                  |L37.396|
00018c  61a6              STR      r6,[r4,#0x18]         ;2783
                  |L37.398|
00018e  6821              LDR      r1,[r4,#0]            ;2785
000190  8949              LDRH     r1,[r1,#0xa]          ;2785
000192  68a0              LDR      r0,[r4,#8]            ;2785
000194  fbb0f2f1          UDIV     r2,r0,r1              ;2785
000198  fb010012          MLS      r0,r1,r2,r0           ;2785
00019c  6821              LDR      r1,[r4,#0]            ;2785
00019e  8949              LDRH     r1,[r1,#0xa]          ;2785
0001a0  eba10800          SUB      r8,r1,r0              ;2785
0001a4  45a8              CMP      r8,r5                 ;2786
0001a6  d900              BLS      |L37.426|
0001a8  46a8              MOV      r8,r5                 ;2786
                  |L37.426|
0001aa  6821              LDR      r1,[r4,#0]            ;2793
0001ac  8949              LDRH     r1,[r1,#0xa]          ;2793
0001ae  68a0              LDR      r0,[r4,#8]            ;2793
0001b0  fbb0f2f1          UDIV     r2,r0,r1              ;2793
0001b4  fb010112          MLS      r1,r1,r2,r0           ;2793
0001b8  f1040024          ADD      r0,r4,#0x24           ;2793
0001bc  4408              ADD      r0,r0,r1              ;2793
0001be  4642              MOV      r2,r8                 ;2793
0001c0  9000              STR      r0,[sp,#0]            ;2793
0001c2  9901              LDR      r1,[sp,#4]            ;2793
0001c4  f7fffffe          BL       mem_cpy
0001c8  79a0              LDRB     r0,[r4,#6]            ;2794
0001ca  f0400040          ORR      r0,r0,#0x40           ;2794
0001ce  71a0              STRB     r0,[r4,#6]            ;2794
0001d0  bf00              NOP                            ;2769
                  |L37.466|
0001d2  9801              LDR      r0,[sp,#4]            ;2714
0001d4  4440              ADD      r0,r0,r8              ;2714
0001d6  9001              STR      r0,[sp,#4]            ;2714
0001d8  68a0              LDR      r0,[r4,#8]            ;2714
0001da  4440              ADD      r0,r0,r8              ;2714
0001dc  60a0              STR      r0,[r4,#8]            ;2714
0001de  f8db0000          LDR      r0,[r11,#0]           ;2714
0001e2  4440              ADD      r0,r0,r8              ;2714
0001e4  f8cb0000          STR      r0,[r11,#0]           ;2714
0001e8  eba50508          SUB      r5,r5,r8              ;2714
                  |L37.492|
0001ec  2d00              CMP      r5,#0                 ;2713
0001ee  f47faf2d          BNE      |L37.76|
                  |L37.498|
0001f2  bf00              NOP                            ;2730
0001f4  e9d40102          LDRD     r0,r1,[r4,#8]         ;2798
0001f8  4288              CMP      r0,r1                 ;2798
0001fa  d901              BLS      |L37.512|
0001fc  68a0              LDR      r0,[r4,#8]            ;2798
0001fe  60e0              STR      r0,[r4,#0xc]          ;2798
                  |L37.512|
000200  79a0              LDRB     r0,[r4,#6]            ;2799
000202  f0400020          ORR      r0,r0,#0x20           ;2799
000206  71a0              STRB     r0,[r4,#6]            ;2799
000208  2000              MOVS     r0,#0                 ;2801
00020a  e70b              B        |L37.36|
;;;2803   
                          ENDP


                          AREA ||i.find_volume||, CODE, READONLY, ALIGN=2

                  find_volume PROC
;;;2204   static
;;;2205   FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2206   	FATFS** rfs,		/* Pointer to pointer to the found file system object */
;;;2207   	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
;;;2208   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2209   )
;;;2210   {
000004  b08a              SUB      sp,sp,#0x28
;;;2211   	BYTE fmt, *pt;
;;;2212   	int vol;
;;;2213   	DSTATUS stat;
;;;2214   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
;;;2215   	WORD nrsv;
;;;2216   	FATFS *fs;
;;;2217   	UINT i;
;;;2218   
;;;2219   
;;;2220   	/* Get logical drive number from the path name */
;;;2221   	*rfs = 0;
000006  2100              MOVS     r1,#0
000008  980a              LDR      r0,[sp,#0x28]
00000a  6001              STR      r1,[r0,#0]
;;;2222   	vol = get_ldnumber(path);
00000c  980b              LDR      r0,[sp,#0x2c]
00000e  f7fffffe          BL       get_ldnumber
000012  9009              STR      r0,[sp,#0x24]
;;;2223   	if (vol < 0) return FR_INVALID_DRIVE;
000014  9809              LDR      r0,[sp,#0x24]
000016  2800              CMP      r0,#0
000018  da03              BGE      |L38.34|
00001a  200b              MOVS     r0,#0xb
                  |L38.28|
;;;2224   
;;;2225   	/* Check if the file system object is valid or not */
;;;2226   	fs = FatFs[vol];					/* Get pointer to the file system object */
;;;2227   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2228   
;;;2229   	ENTER_FF(fs);						/* Lock the volume */
;;;2230   	*rfs = fs;							/* Return pointer to the file system object */
;;;2231   
;;;2232   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2233   		stat = disk_status(fs->drv);
;;;2234   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
;;;2235   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2236   				return FR_WRITE_PROTECTED;
;;;2237   			return FR_OK;				/* The file system object is valid */
;;;2238   		}
;;;2239   	}
;;;2240   
;;;2241   	/* The file system object is not valid. */
;;;2242   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2243   
;;;2244   	fs->fs_type = 0;					/* Clear the file system object */
;;;2245   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2246   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2247   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2248   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2249   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2250   		return FR_WRITE_PROTECTED;
;;;2251   #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
;;;2252   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2253   		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
;;;2254   #endif
;;;2255   	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
;;;2256   	bsect = 0;
;;;2257   	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
;;;2258   	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
;;;2259   		for (i = 0; i < 4; i++) {			/* Get partition offset */
;;;2260   			pt = fs->win + MBR_Table + i * SZ_PTE;
;;;2261   			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
;;;2262   		}
;;;2263   		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
;;;2264   		if (i) i--;
;;;2265   		do {								/* Find an FAT volume */
;;;2266   			bsect = br[i];
;;;2267   			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
;;;2268   		} while (!LD2PT(vol) && fmt && ++i < 4);
;;;2269   	}
;;;2270   	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
;;;2271   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2272   
;;;2273   	/* An FAT volume is found. Following code initializes the file system object */
;;;2274   
;;;2275   	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2276   		return FR_NO_FILESYSTEM;
;;;2277   
;;;2278   	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
;;;2279   	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
;;;2280   	fs->fsize = fasize;
;;;2281   
;;;2282   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;2283   	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
;;;2284   		return FR_NO_FILESYSTEM;
;;;2285   	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
;;;2286   
;;;2287   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;2288   	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
;;;2289   		return FR_NO_FILESYSTEM;
;;;2290   
;;;2291   	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
;;;2292   	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
;;;2293   		return FR_NO_FILESYSTEM;
;;;2294   
;;;2295   	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
;;;2296   	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
;;;2297   
;;;2298   	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
;;;2299   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
;;;2300   
;;;2301   	/* Determine the FAT sub type */
;;;2302   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
;;;2303   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2304   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2305   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2306   	fmt = FS_FAT12;
;;;2307   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2308   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2309   
;;;2310   	/* Boundaries and Limits */
;;;2311   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2312   	fs->volbase = bsect;								/* Volume start sector */
;;;2313   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2314   	fs->database = bsect + sysect;						/* Data start sector */
;;;2315   	if (fmt == FS_FAT32) {
;;;2316   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2317   		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
;;;2318   		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
;;;2319   	} else {
;;;2320   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2321   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2322   		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
;;;2323   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2324   	}
;;;2325   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
;;;2326   		return FR_NO_FILESYSTEM;
;;;2327   
;;;2328   #if !_FS_READONLY
;;;2329   	/* Initialize cluster allocation information */
;;;2330   	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
;;;2331   
;;;2332   	/* Get fsinfo if available */
;;;2333   	fs->fsi_flag = 0x80;
;;;2334   #if (_FS_NOFSINFO & 3) != 3
;;;2335   	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo == 1 */
;;;2336   		&& LD_WORD(fs->win + BPB_FSInfo) == 1
;;;2337   		&& move_window(fs, bsect + 1) == FR_OK)
;;;2338   	{
;;;2339   		fs->fsi_flag = 0;
;;;2340   		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
;;;2341   			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
;;;2342   			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
;;;2343   		{
;;;2344   #if (_FS_NOFSINFO & 1) == 0
;;;2345   			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
;;;2346   #endif
;;;2347   #if (_FS_NOFSINFO & 2) == 0
;;;2348   			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
;;;2349   #endif
;;;2350   		}
;;;2351   	}
;;;2352   #endif
;;;2353   #endif
;;;2354   	fs->fs_type = fmt;	/* FAT sub-type */
;;;2355   	fs->id = ++Fsid;	/* File system mount ID */
;;;2356   #if _FS_RPATH
;;;2357   	fs->cdir = 0;		/* Set current directory to root */
;;;2358   #endif
;;;2359   #if _FS_LOCK			/* Clear file lock semaphores */
;;;2360   	clear_lock(fs);
;;;2361   #endif
;;;2362   
;;;2363   	return FR_OK;
;;;2364   }
00001c  b00d              ADD      sp,sp,#0x34
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L38.34|
000022  49e9              LDR      r1,|L38.968|
000024  9809              LDR      r0,[sp,#0x24]         ;2226
000026  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2226
00002a  b90c              CBNZ     r4,|L38.48|
00002c  200c              MOVS     r0,#0xc               ;2227
00002e  e7f5              B        |L38.28|
                  |L38.48|
000030  980a              LDR      r0,[sp,#0x28]         ;2230
000032  6004              STR      r4,[r0,#0]            ;2230
000034  7820              LDRB     r0,[r4,#0]            ;2232
000036  b178              CBZ      r0,|L38.88|
000038  7860              LDRB     r0,[r4,#1]            ;2233
00003a  f7fffffe          BL       disk_status
00003e  4681              MOV      r9,r0                 ;2233
000040  f0090001          AND      r0,r9,#1              ;2234
000044  b940              CBNZ     r0,|L38.88|
000046  980c              LDR      r0,[sp,#0x30]         ;2235
000048  b120              CBZ      r0,|L38.84|
00004a  f0090004          AND      r0,r9,#4              ;2235
00004e  b108              CBZ      r0,|L38.84|
000050  200a              MOVS     r0,#0xa               ;2236
000052  e7e3              B        |L38.28|
                  |L38.84|
000054  2000              MOVS     r0,#0                 ;2237
000056  e7e1              B        |L38.28|
                  |L38.88|
000058  2000              MOVS     r0,#0                 ;2244
00005a  7020              STRB     r0,[r4,#0]            ;2244
00005c  9809              LDR      r0,[sp,#0x24]         ;2245
00005e  7060              STRB     r0,[r4,#1]            ;2245
000060  7860              LDRB     r0,[r4,#1]            ;2246
000062  f7fffffe          BL       disk_initialize
000066  4681              MOV      r9,r0                 ;2246
000068  f0090001          AND      r0,r9,#1              ;2247
00006c  b108              CBZ      r0,|L38.114|
00006e  2003              MOVS     r0,#3                 ;2248
000070  e7d4              B        |L38.28|
                  |L38.114|
000072  980c              LDR      r0,[sp,#0x30]         ;2249
000074  b120              CBZ      r0,|L38.128|
000076  f0090004          AND      r0,r9,#4              ;2249
00007a  b108              CBZ      r0,|L38.128|
00007c  200a              MOVS     r0,#0xa               ;2250
00007e  e7cd              B        |L38.28|
                  |L38.128|
000080  7860              LDRB     r0,[r4,#1]            ;2252
000082  f104020a          ADD      r2,r4,#0xa            ;2252
000086  2102              MOVS     r1,#2                 ;2252
000088  f7fffffe          BL       disk_ioctl
00008c  b938              CBNZ     r0,|L38.158|
00008e  8960              LDRH     r0,[r4,#0xa]          ;2253
000090  f5b07f00          CMP      r0,#0x200             ;2253
000094  db03              BLT      |L38.158|
000096  8960              LDRH     r0,[r4,#0xa]          ;2253
000098  f5b05f80          CMP      r0,#0x1000            ;2253
00009c  dd01              BLE      |L38.162|
                  |L38.158|
00009e  2001              MOVS     r0,#1                 ;2253
0000a0  e7bc              B        |L38.28|
                  |L38.162|
0000a2  2700              MOVS     r7,#0                 ;2256
0000a4  4639              MOV      r1,r7                 ;2257
0000a6  4620              MOV      r0,r4                 ;2257
0000a8  f7fffffe          BL       check_fs
0000ac  4605              MOV      r5,r0                 ;2257
0000ae  2d01              CMP      r5,#1                 ;2258
0000b0  d001              BEQ      |L38.182|
0000b2  bb9d              CBNZ     r5,|L38.284|
0000b4  e032              B        |L38.284|
                  |L38.182|
0000b6  2600              MOVS     r6,#0                 ;2259
0000b8  e01a              B        |L38.240|
                  |L38.186|
0000ba  f50470f7          ADD      r0,r4,#0x1ee          ;2260
0000be  eb001806          ADD      r8,r0,r6,LSL #4       ;2260
0000c2  f8980004          LDRB     r0,[r8,#4]            ;2261
0000c6  b170              CBZ      r0,|L38.230|
0000c8  f898000b          LDRB     r0,[r8,#0xb]          ;2261
0000cc  0601              LSLS     r1,r0,#24             ;2261
0000ce  f898000a          LDRB     r0,[r8,#0xa]          ;2261
0000d2  ea414100          ORR      r1,r1,r0,LSL #16      ;2261
0000d6  f8980009          LDRB     r0,[r8,#9]            ;2261
0000da  ea412000          ORR      r0,r1,r0,LSL #8       ;2261
0000de  f8981008          LDRB     r1,[r8,#8]            ;2261
0000e2  4308              ORRS     r0,r0,r1              ;2261
0000e4  e000              B        |L38.232|
                  |L38.230|
0000e6  2000              MOVS     r0,#0                 ;2261
                  |L38.232|
0000e8  a902              ADD      r1,sp,#8              ;2261
0000ea  f8410026          STR      r0,[r1,r6,LSL #2]     ;2261
0000ee  1c76              ADDS     r6,r6,#1              ;2259
                  |L38.240|
0000f0  2e04              CMP      r6,#4                 ;2259
0000f2  d3e2              BCC      |L38.186|
0000f4  2600              MOVS     r6,#0                 ;2263
0000f6  b106              CBZ      r6,|L38.250|
0000f8  1e76              SUBS     r6,r6,#1              ;2264
                  |L38.250|
0000fa  bf00              NOP                            ;2265
                  |L38.252|
0000fc  a802              ADD      r0,sp,#8              ;2266
0000fe  f8507026          LDR      r7,[r0,r6,LSL #2]     ;2266
000102  b127              CBZ      r7,|L38.270|
000104  4639              MOV      r1,r7                 ;2267
000106  4620              MOV      r0,r4                 ;2267
000108  f7fffffe          BL       check_fs
00010c  e000              B        |L38.272|
                  |L38.270|
00010e  2002              MOVS     r0,#2                 ;2267
                  |L38.272|
000110  4605              MOV      r5,r0                 ;2267
000112  b11d              CBZ      r5,|L38.284|
000114  1c70              ADDS     r0,r6,#1              ;2268
000116  4606              MOV      r6,r0                 ;2268
000118  2804              CMP      r0,#4                 ;2268
00011a  d3ef              BCC      |L38.252|
                  |L38.284|
00011c  2d03              CMP      r5,#3                 ;2270
00011e  d101              BNE      |L38.292|
000120  2001              MOVS     r0,#1                 ;2270
000122  e77b              B        |L38.28|
                  |L38.292|
000124  b10d              CBZ      r5,|L38.298|
000126  200d              MOVS     r0,#0xd               ;2271
000128  e778              B        |L38.28|
                  |L38.298|
00012a  203b              MOVS     r0,#0x3b              ;2275
00012c  5d01              LDRB     r1,[r0,r4]            ;2275
00012e  f894003c          LDRB     r0,[r4,#0x3c]         ;2275
000132  ea412000          ORR      r0,r1,r0,LSL #8       ;2275
000136  8961              LDRH     r1,[r4,#0xa]          ;2275
000138  4288              CMP      r0,r1                 ;2275
00013a  d001              BEQ      |L38.320|
00013c  200d              MOVS     r0,#0xd               ;2276
00013e  e76d              B        |L38.28|
                  |L38.320|
000140  2046              MOVS     r0,#0x46              ;2278
000142  5d01              LDRB     r1,[r0,r4]            ;2278
000144  f8940047          LDRB     r0,[r4,#0x47]         ;2278
000148  ea412a00          ORR      r10,r1,r0,LSL #8      ;2278
00014c  f1ba0f00          CMP      r10,#0                ;2279
000150  d10e              BNE      |L38.368|
000152  f8940057          LDRB     r0,[r4,#0x57]         ;2279
000156  0601              LSLS     r1,r0,#24             ;2279
000158  f8940056          LDRB     r0,[r4,#0x56]         ;2279
00015c  ea414100          ORR      r1,r1,r0,LSL #16      ;2279
000160  f8940055          LDRB     r0,[r4,#0x55]         ;2279
000164  ea412000          ORR      r0,r1,r0,LSL #8       ;2279
000168  f8941054          LDRB     r1,[r4,#0x54]         ;2279
00016c  ea400a01          ORR      r10,r0,r1             ;2279
                  |L38.368|
000170  f8c4a018          STR      r10,[r4,#0x18]        ;2280
000174  2040              MOVS     r0,#0x40              ;2282
000176  5d00              LDRB     r0,[r0,r4]            ;2282
000178  70e0              STRB     r0,[r4,#3]            ;2282
00017a  78e0              LDRB     r0,[r4,#3]            ;2283
00017c  2801              CMP      r0,#1                 ;2283
00017e  d004              BEQ      |L38.394|
000180  78e0              LDRB     r0,[r4,#3]            ;2283
000182  2802              CMP      r0,#2                 ;2283
000184  d001              BEQ      |L38.394|
000186  200d              MOVS     r0,#0xd               ;2284
000188  e748              B        |L38.28|
                  |L38.394|
00018a  78e0              LDRB     r0,[r4,#3]            ;2285
00018c  fb0afa00          MUL      r10,r10,r0            ;2285
000190  203d              MOVS     r0,#0x3d              ;2287
000192  5d00              LDRB     r0,[r0,r4]            ;2287
000194  70a0              STRB     r0,[r4,#2]            ;2287
000196  78a0              LDRB     r0,[r4,#2]            ;2288
000198  b118              CBZ      r0,|L38.418|
00019a  78a0              LDRB     r0,[r4,#2]            ;2288
00019c  1e41              SUBS     r1,r0,#1              ;2288
00019e  4008              ANDS     r0,r0,r1              ;2288
0001a0  b108              CBZ      r0,|L38.422|
                  |L38.418|
0001a2  200d              MOVS     r0,#0xd               ;2289
0001a4  e73a              B        |L38.28|
                  |L38.422|
0001a6  2041              MOVS     r0,#0x41              ;2291
0001a8  5d01              LDRB     r1,[r0,r4]            ;2291
0001aa  f8940042          LDRB     r0,[r4,#0x42]         ;2291
0001ae  ea412000          ORR      r0,r1,r0,LSL #8       ;2291
0001b2  8120              STRH     r0,[r4,#8]            ;2291
0001b4  8960              LDRH     r0,[r4,#0xa]          ;2292
0001b6  17c1              ASRS     r1,r0,#31             ;2292
0001b8  eb0061d1          ADD      r1,r0,r1,LSR #27      ;2292
0001bc  1149              ASRS     r1,r1,#5              ;2292
0001be  8922              LDRH     r2,[r4,#8]            ;2292
0001c0  fb92f3f1          SDIV     r3,r2,r1              ;2292
0001c4  fb012113          MLS      r1,r1,r3,r2           ;2292
0001c8  b109              CBZ      r1,|L38.462|
0001ca  200d              MOVS     r0,#0xd               ;2293
0001cc  e726              B        |L38.28|
                  |L38.462|
0001ce  2043              MOVS     r0,#0x43              ;2295
0001d0  5d01              LDRB     r1,[r0,r4]            ;2295
0001d2  f8940044          LDRB     r0,[r4,#0x44]         ;2295
0001d6  ea412000          ORR      r0,r1,r0,LSL #8       ;2295
0001da  9008              STR      r0,[sp,#0x20]         ;2295
0001dc  9808              LDR      r0,[sp,#0x20]         ;2296
0001de  b970              CBNZ     r0,|L38.510|
0001e0  f8940053          LDRB     r0,[r4,#0x53]         ;2296
0001e4  0601              LSLS     r1,r0,#24             ;2296
0001e6  f8940052          LDRB     r0,[r4,#0x52]         ;2296
0001ea  ea414100          ORR      r1,r1,r0,LSL #16      ;2296
0001ee  f8940051          LDRB     r0,[r4,#0x51]         ;2296
0001f2  ea412000          ORR      r0,r1,r0,LSL #8       ;2296
0001f6  f8941050          LDRB     r1,[r4,#0x50]         ;2296
0001fa  4308              ORRS     r0,r0,r1              ;2296
0001fc  9008              STR      r0,[sp,#0x20]         ;2296
                  |L38.510|
0001fe  203e              MOVS     r0,#0x3e              ;2298
000200  5d01              LDRB     r1,[r0,r4]            ;2298
000202  f894003f          LDRB     r0,[r4,#0x3f]         ;2298
000206  ea412000          ORR      r0,r1,r0,LSL #8       ;2298
00020a  9001              STR      r0,[sp,#4]            ;2298
00020c  9801              LDR      r0,[sp,#4]            ;2299
00020e  b908              CBNZ     r0,|L38.532|
000210  200d              MOVS     r0,#0xd               ;2299
000212  e703              B        |L38.28|
                  |L38.532|
000214  8960              LDRH     r0,[r4,#0xa]          ;2302
000216  17c1              ASRS     r1,r0,#31             ;2302
000218  eb0061d1          ADD      r1,r0,r1,LSR #27      ;2302
00021c  1149              ASRS     r1,r1,#5              ;2302
00021e  8922              LDRH     r2,[r4,#8]            ;2302
000220  fb92f2f1          SDIV     r2,r2,r1              ;2302
000224  9901              LDR      r1,[sp,#4]            ;2302
000226  4451              ADD      r1,r1,r10             ;2302
000228  4411              ADD      r1,r1,r2              ;2302
00022a  9107              STR      r1,[sp,#0x1c]         ;2302
00022c  e9dd1007          LDRD     r1,r0,[sp,#0x1c]      ;2303
000230  4288              CMP      r0,r1                 ;2303
000232  d201              BCS      |L38.568|
000234  200d              MOVS     r0,#0xd               ;2303
000236  e6f1              B        |L38.28|
                  |L38.568|
000238  e9dd1007          LDRD     r1,r0,[sp,#0x1c]      ;2304
00023c  1a40              SUBS     r0,r0,r1              ;2304
00023e  78a1              LDRB     r1,[r4,#2]            ;2304
000240  fbb0fbf1          UDIV     r11,r0,r1             ;2304
000244  f1bb0f00          CMP      r11,#0                ;2305
000248  d101              BNE      |L38.590|
00024a  200d              MOVS     r0,#0xd               ;2305
00024c  e6e6              B        |L38.28|
                  |L38.590|
00024e  2501              MOVS     r5,#1                 ;2306
000250  f64070f6          MOV      r0,#0xff6             ;2307
000254  4583              CMP      r11,r0                ;2307
000256  d300              BCC      |L38.602|
000258  2502              MOVS     r5,#2                 ;2307
                  |L38.602|
00025a  f64f70f6          MOV      r0,#0xfff6            ;2308
00025e  4583              CMP      r11,r0                ;2308
000260  d300              BCC      |L38.612|
000262  2503              MOVS     r5,#3                 ;2308
                  |L38.612|
000264  f10b0002          ADD      r0,r11,#2             ;2311
000268  6160              STR      r0,[r4,#0x14]         ;2311
00026a  61e7              STR      r7,[r4,#0x1c]         ;2312
00026c  9801              LDR      r0,[sp,#4]            ;2313
00026e  4438              ADD      r0,r0,r7              ;2313
000270  6220              STR      r0,[r4,#0x20]         ;2313
000272  9807              LDR      r0,[sp,#0x1c]         ;2314
000274  4438              ADD      r0,r0,r7              ;2314
000276  62a0              STR      r0,[r4,#0x28]         ;2314
000278  2d03              CMP      r5,#3                 ;2315
00027a  d116              BNE      |L38.682|
00027c  8920              LDRH     r0,[r4,#8]            ;2316
00027e  b108              CBZ      r0,|L38.644|
000280  200d              MOVS     r0,#0xd               ;2316
000282  e6cb              B        |L38.28|
                  |L38.644|
000284  f894005f          LDRB     r0,[r4,#0x5f]         ;2317
000288  0601              LSLS     r1,r0,#24             ;2317
00028a  f894005e          LDRB     r0,[r4,#0x5e]         ;2317
00028e  ea414100          ORR      r1,r1,r0,LSL #16      ;2317
000292  f894005d          LDRB     r0,[r4,#0x5d]         ;2317
000296  ea412000          ORR      r0,r1,r0,LSL #8       ;2317
00029a  f894105c          LDRB     r1,[r4,#0x5c]         ;2317
00029e  4308              ORRS     r0,r0,r1              ;2317
0002a0  6260              STR      r0,[r4,#0x24]         ;2317
0002a2  6960              LDR      r0,[r4,#0x14]         ;2318
0002a4  0080              LSLS     r0,r0,#2              ;2318
0002a6  9006              STR      r0,[sp,#0x18]         ;2318
0002a8  e014              B        |L38.724|
                  |L38.682|
0002aa  8920              LDRH     r0,[r4,#8]            ;2320
0002ac  b908              CBNZ     r0,|L38.690|
0002ae  200d              MOVS     r0,#0xd               ;2320
0002b0  e6b4              B        |L38.28|
                  |L38.690|
0002b2  6a20              LDR      r0,[r4,#0x20]         ;2321
0002b4  4450              ADD      r0,r0,r10             ;2321
0002b6  6260              STR      r0,[r4,#0x24]         ;2321
0002b8  2d02              CMP      r5,#2                 ;2322
0002ba  d102              BNE      |L38.706|
0002bc  6960              LDR      r0,[r4,#0x14]         ;2323
0002be  0040              LSLS     r0,r0,#1              ;2323
0002c0  e007              B        |L38.722|
                  |L38.706|
0002c2  7d20              LDRB     r0,[r4,#0x14]         ;2323
0002c4  f0000001          AND      r0,r0,#1              ;2323
0002c8  6961              LDR      r1,[r4,#0x14]         ;2323
0002ca  eb010141          ADD      r1,r1,r1,LSL #1       ;2323
0002ce  eb000051          ADD      r0,r0,r1,LSR #1       ;2323
                  |L38.722|
0002d2  9006              STR      r0,[sp,#0x18]         ;2323
                  |L38.724|
0002d4  8960              LDRH     r0,[r4,#0xa]          ;2325
0002d6  1e40              SUBS     r0,r0,#1              ;2325
0002d8  9906              LDR      r1,[sp,#0x18]         ;2325
0002da  4408              ADD      r0,r0,r1              ;2325
0002dc  8961              LDRH     r1,[r4,#0xa]          ;2325
0002de  fbb0f0f1          UDIV     r0,r0,r1              ;2325
0002e2  69a1              LDR      r1,[r4,#0x18]         ;2325
0002e4  4288              CMP      r0,r1                 ;2325
0002e6  d901              BLS      |L38.748|
0002e8  200d              MOVS     r0,#0xd               ;2326
0002ea  e697              B        |L38.28|
                  |L38.748|
0002ec  f04f30ff          MOV      r0,#0xffffffff        ;2330
0002f0  6120              STR      r0,[r4,#0x10]         ;2330
0002f2  60e0              STR      r0,[r4,#0xc]          ;2330
0002f4  2080              MOVS     r0,#0x80              ;2333
0002f6  7160              STRB     r0,[r4,#5]            ;2333
0002f8  2d03              CMP      r5,#3                 ;2335
0002fa  d15a              BNE      |L38.946|
0002fc  f8941060          LDRB     r1,[r4,#0x60]         ;2336
000300  f8940061          LDRB     r0,[r4,#0x61]         ;2336
000304  ea412000          ORR      r0,r1,r0,LSL #8       ;2336
000308  2801              CMP      r0,#1                 ;2336
00030a  d152              BNE      |L38.946|
00030c  1c79              ADDS     r1,r7,#1              ;2337
00030e  4620              MOV      r0,r4                 ;2337
000310  f7fffffe          BL       move_window
000314  bbe8              CBNZ     r0,|L38.914|
000316  2000              MOVS     r0,#0                 ;2339
000318  7160              STRB     r0,[r4,#5]            ;2339
00031a  f894122e          LDRB     r1,[r4,#0x22e]        ;2340
00031e  f894022f          LDRB     r0,[r4,#0x22f]        ;2340
000322  ea412000          ORR      r0,r1,r0,LSL #8       ;2340
000326  f64a2155          MOV      r1,#0xaa55            ;2340
00032a  4288              CMP      r0,r1                 ;2340
00032c  d141              BNE      |L38.946|
00032e  2033              MOVS     r0,#0x33              ;2341
000330  5d00              LDRB     r0,[r0,r4]            ;2341
000332  0601              LSLS     r1,r0,#24             ;2341
000334  2032              MOVS     r0,#0x32              ;2341
000336  5d00              LDRB     r0,[r0,r4]            ;2341
000338  ea414100          ORR      r1,r1,r0,LSL #16      ;2341
00033c  2031              MOVS     r0,#0x31              ;2341
00033e  5d00              LDRB     r0,[r0,r4]            ;2341
000340  ea412000          ORR      r0,r1,r0,LSL #8       ;2341
000344  f8941030          LDRB     r1,[r4,#0x30]         ;2341
000348  4308              ORRS     r0,r0,r1              ;2341
00034a  4920              LDR      r1,|L38.972|
00034c  4288              CMP      r0,r1                 ;2341
00034e  d130              BNE      |L38.946|
000350  f8940217          LDRB     r0,[r4,#0x217]        ;2342
000354  0601              LSLS     r1,r0,#24             ;2342
000356  f8940216          LDRB     r0,[r4,#0x216]        ;2342
00035a  ea414100          ORR      r1,r1,r0,LSL #16      ;2342
00035e  f8940215          LDRB     r0,[r4,#0x215]        ;2342
000362  ea412000          ORR      r0,r1,r0,LSL #8       ;2342
000366  f8941214          LDRB     r1,[r4,#0x214]        ;2342
00036a  4308              ORRS     r0,r0,r1              ;2342
00036c  4918              LDR      r1,|L38.976|
00036e  4288              CMP      r0,r1                 ;2342
000370  d11f              BNE      |L38.946|
000372  f894021b          LDRB     r0,[r4,#0x21b]        ;2345
000376  0601              LSLS     r1,r0,#24             ;2345
000378  f894021a          LDRB     r0,[r4,#0x21a]        ;2345
00037c  ea414100          ORR      r1,r1,r0,LSL #16      ;2345
000380  f8940219          LDRB     r0,[r4,#0x219]        ;2345
000384  ea412000          ORR      r0,r1,r0,LSL #8       ;2345
000388  f8941218          LDRB     r1,[r4,#0x218]        ;2345
00038c  4308              ORRS     r0,r0,r1              ;2345
00038e  6120              STR      r0,[r4,#0x10]         ;2345
000390  e000              B        |L38.916|
                  |L38.914|
000392  e00e              B        |L38.946|
                  |L38.916|
000394  f894021f          LDRB     r0,[r4,#0x21f]        ;2348
000398  0601              LSLS     r1,r0,#24             ;2348
00039a  f894021e          LDRB     r0,[r4,#0x21e]        ;2348
00039e  ea414100          ORR      r1,r1,r0,LSL #16      ;2348
0003a2  f894021d          LDRB     r0,[r4,#0x21d]        ;2348
0003a6  ea412000          ORR      r0,r1,r0,LSL #8       ;2348
0003aa  f894121c          LDRB     r1,[r4,#0x21c]        ;2348
0003ae  4308              ORRS     r0,r0,r1              ;2348
0003b0  60e0              STR      r0,[r4,#0xc]          ;2348
                  |L38.946|
0003b2  7025              STRB     r5,[r4,#0]            ;2354
0003b4  4807              LDR      r0,|L38.980|
0003b6  8800              LDRH     r0,[r0,#0]            ;2355  ; Fsid
0003b8  1c40              ADDS     r0,r0,#1              ;2355
0003ba  b280              UXTH     r0,r0                 ;2355
0003bc  4905              LDR      r1,|L38.980|
0003be  8008              STRH     r0,[r1,#0]            ;2355
0003c0  80e0              STRH     r0,[r4,#6]            ;2355
0003c2  2000              MOVS     r0,#0                 ;2363
0003c4  e62a              B        |L38.28|
;;;2365   
                          ENDP

0003c6  0000              DCW      0x0000
                  |L38.968|
                          DCD      FatFs
                  |L38.972|
                          DCD      0x41615252
                  |L38.976|
                          DCD      0x61417272
                  |L38.980|
                          DCD      Fsid

                          AREA ||i.fit_lfn||, CODE, READONLY, ALIGN=2

                  fit_lfn PROC
;;;1342   static
;;;1343   void fit_lfn (
000000  b5f0              PUSH     {r4-r7,lr}
;;;1344   	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer */
;;;1345   	BYTE* dir,				/* Pointer to the LFN entry to be processed */
;;;1346   	BYTE ord,				/* LFN order (1-20) */
;;;1347   	BYTE sum				/* Checksum of the corresponding SFN */
;;;1348   )
;;;1349   {
000002  4604              MOV      r4,r0
000004  461d              MOV      r5,r3
;;;1350   	UINT i, s;
;;;1351   	WCHAR wc;
;;;1352   
;;;1353   
;;;1354   	dir[LDIR_Chksum] = sum;			/* Set checksum */
000006  734d              STRB     r5,[r1,#0xd]
;;;1355   	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
000008  270f              MOVS     r7,#0xf
00000a  72cf              STRB     r7,[r1,#0xb]
;;;1356   	dir[LDIR_Type] = 0;
00000c  2700              MOVS     r7,#0
00000e  730f              STRB     r7,[r1,#0xc]
;;;1357   	ST_WORD(dir + LDIR_FstClusLO, 0);
000010  768f              STRB     r7,[r1,#0x1a]
000012  46bc              MOV      r12,r7
000014  f881c01b          STRB     r12,[r1,#0x1b]
;;;1358   
;;;1359   	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
000018  1e57              SUBS     r7,r2,#1
00001a  eb070c87          ADD      r12,r7,r7,LSL #2
00001e  eb0c06c7          ADD      r6,r12,r7,LSL #3
;;;1360   	s = wc = 0;
000022  2700              MOVS     r7,#0
000024  4638              MOV      r0,r7
000026  463b              MOV      r3,r7
;;;1361   	do {
000028  bf00              NOP      
                  |L39.42|
;;;1362   		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
00002a  f64f77ff          MOV      r7,#0xffff
00002e  42b8              CMP      r0,r7
000030  d003              BEQ      |L39.58|
000032  4637              MOV      r7,r6
000034  1c76              ADDS     r6,r6,#1
000036  f8340017          LDRH     r0,[r4,r7,LSL #1]
                  |L39.58|
;;;1363   		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
00003a  f8dfc040          LDR      r12,|L39.124|
00003e  f81cc003          LDRB     r12,[r12,r3]
000042  f801000c          STRB     r0,[r1,r12]
000046  1207              ASRS     r7,r0,#8
000048  f8dfc030          LDR      r12,|L39.124|
00004c  f81cc003          LDRB     r12,[r12,r3]
000050  448c              ADD      r12,r12,r1
000052  f88c7001          STRB     r7,[r12,#1]
;;;1364   		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
000056  b908              CBNZ     r0,|L39.92|
000058  f64f70ff          MOV      r0,#0xffff
                  |L39.92|
;;;1365   	} while (++s < 13);
00005c  1c5f              ADDS     r7,r3,#1
00005e  463b              MOV      r3,r7
000060  2f0d              CMP      r7,#0xd
000062  d3e2              BCC      |L39.42|
;;;1366   	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
000064  f64f77ff          MOV      r7,#0xffff
000068  42b8              CMP      r0,r7
00006a  d002              BEQ      |L39.114|
00006c  f8347016          LDRH     r7,[r4,r6,LSL #1]
000070  b90f              CBNZ     r7,|L39.118|
                  |L39.114|
000072  f0420240          ORR      r2,r2,#0x40
                  |L39.118|
;;;1367   	dir[LDIR_Ord] = ord;			/* Set the LFN order */
000076  700a              STRB     r2,[r1,#0]
;;;1368   }
000078  bdf0              POP      {r4-r7,pc}
;;;1369   
                          ENDP

00007a  0000              DCW      0x0000
                  |L39.124|
                          DCD      LfnOfs

                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;2053   static
;;;2054   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;2055   	DIR* dp,			/* Directory object to return last directory and found object */
;;;2056   	const TCHAR* path	/* Full-path string to find a file or directory */
;;;2057   )
;;;2058   {
000004  4604              MOV      r4,r0
;;;2059   	FRESULT res;
;;;2060   	BYTE *dir, ns;
;;;2061   
;;;2062   
;;;2063   #if _FS_RPATH
;;;2064   	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
;;;2065   		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
;;;2066   	} else {								/* No heading separator */
;;;2067   		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
;;;2068   	}
;;;2069   #else
;;;2070   	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
000006  9801              LDR      r0,[sp,#4]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L40.22|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d102              BNE      |L40.28|
                  |L40.22|
;;;2071   		path++;
000016  9801              LDR      r0,[sp,#4]
000018  1c40              ADDS     r0,r0,#1
00001a  9001              STR      r0,[sp,#4]
                  |L40.28|
;;;2072   	dp->sclust = 0;							/* Always start from the root directory */
00001c  2000              MOVS     r0,#0
00001e  60a0              STR      r0,[r4,#8]
;;;2073   #endif
;;;2074   
;;;2075   	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
000020  9801              LDR      r0,[sp,#4]
000022  7800              LDRB     r0,[r0,#0]
000024  2820              CMP      r0,#0x20
000026  d207              BCS      |L40.56|
;;;2076   		res = dir_sdi(dp, 0);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dir_sdi
000030  4605              MOV      r5,r0
;;;2077   		dp->dir = 0;
000032  2000              MOVS     r0,#0
000034  6160              STR      r0,[r4,#0x14]
000036  e028              B        |L40.138|
                  |L40.56|
;;;2078   	} else {								/* Follow path */
;;;2079   		for (;;) {
000038  bf00              NOP      
                  |L40.58|
;;;2080   			res = create_name(dp, &path);	/* Get a segment name of the path */
00003a  a901              ADD      r1,sp,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       create_name
000042  4605              MOV      r5,r0
;;;2081   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L40.72|
000046  e01f              B        |L40.136|
                  |L40.72|
;;;2082   			res = dir_find(dp);				/* Find an object with the sagment name */
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_find
00004e  4605              MOV      r5,r0
;;;2083   			ns = dp->fn[NSFLAG];
000050  69a0              LDR      r0,[r4,#0x18]
000052  7ac6              LDRB     r6,[r0,#0xb]
;;;2084   			if (res != FR_OK) {				/* Failed to find the object */
000054  b13d              CBZ      r5,|L40.102|
;;;2085   				if (res == FR_NO_FILE) {	/* Object is not found */
000056  2d04              CMP      r5,#4
000058  d104              BNE      |L40.100|
;;;2086   					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
00005a  bf00              NOP      
;;;2087   						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
;;;2088   						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
;;;2089   						res = FR_OK;					/* Ended at the root directroy. Function completed. */
;;;2090   					} else {							/* Could not find the object */
;;;2091   						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
00005c  f0060004          AND      r0,r6,#4
000060  b900              CBNZ     r0,|L40.100|
000062  2505              MOVS     r5,#5
                  |L40.100|
;;;2092   					}
;;;2093   				}
;;;2094   				break;
000064  e010              B        |L40.136|
                  |L40.102|
;;;2095   			}
;;;2096   			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
000066  f0060004          AND      r0,r6,#4
00006a  b100              CBZ      r0,|L40.110|
00006c  e00c              B        |L40.136|
                  |L40.110|
;;;2097   			dir = dp->dir;						/* Follow the sub-directory */
00006e  6967              LDR      r7,[r4,#0x14]
;;;2098   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
000070  7af8              LDRB     r0,[r7,#0xb]
000072  f0000010          AND      r0,r0,#0x10
000076  b908              CBNZ     r0,|L40.124|
;;;2099   				res = FR_NO_PATH; break;
000078  2505              MOVS     r5,#5
00007a  e005              B        |L40.136|
                  |L40.124|
;;;2100   			}
;;;2101   			dp->sclust = ld_clust(dp->fs, dir);
00007c  4639              MOV      r1,r7
00007e  6820              LDR      r0,[r4,#0]
000080  f7fffffe          BL       ld_clust
000084  60a0              STR      r0,[r4,#8]
000086  e7d8              B        |L40.58|
                  |L40.136|
000088  bf00              NOP                            ;2081
                  |L40.138|
;;;2102   		}
;;;2103   	}
;;;2104   
;;;2105   	return res;
00008a  4628              MOV      r0,r5
;;;2106   }
00008c  e8bd81fc          POP      {r2-r8,pc}
;;;2107   
                          ENDP


                          AREA ||i.gen_numname||, CODE, READONLY, ALIGN=2

                  gen_numname PROC
;;;1380   static
;;;1381   void gen_numname (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1382   	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
;;;1383   	const BYTE* src,	/* Pointer to SFN */
;;;1384   	const WCHAR* lfn,	/* Pointer to LFN */
;;;1385   	UINT seq			/* Sequence number */
;;;1386   )
;;;1387   {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;1388   	BYTE ns[8], c;
;;;1389   	UINT i, j;
;;;1390   	WCHAR wc;
;;;1391   	DWORD sr;
;;;1392   
;;;1393   
;;;1394   	mem_cpy(dst, src, 11);
00000c  220b              MOVS     r2,#0xb
00000e  4648              MOV      r0,r9
000010  9904              LDR      r1,[sp,#0x10]
000012  f7fffffe          BL       mem_cpy
;;;1395   
;;;1396   	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
000016  2d05              CMP      r5,#5
000018  d918              BLS      |L41.76|
;;;1397   		sr = seq;
00001a  462f              MOV      r7,r5
;;;1398   		while (*lfn) {	/* Create a CRC */
00001c  e011              B        |L41.66|
                  |L41.30|
;;;1399   			wc = *lfn++;
00001e  f838bb02          LDRH     r11,[r8],#2
;;;1400   			for (i = 0; i < 16; i++) {
000022  2400              MOVS     r4,#0
000024  e00b              B        |L41.62|
                  |L41.38|
;;;1401   				sr = (sr << 1) + (wc & 1);
000026  4658              MOV      r0,r11
000028  f367005f          BFI      r0,r7,#1,#31
00002c  4607              MOV      r7,r0
;;;1402   				wc >>= 1;
00002e  ea4f0b6b          ASR      r11,r11,#1
;;;1403   				if (sr & 0x10000) sr ^= 0x11021;
000032  f4073080          AND      r0,r7,#0x10000
000036  b108              CBZ      r0,|L41.60|
000038  481d              LDR      r0,|L41.176|
00003a  4047              EORS     r7,r7,r0
                  |L41.60|
00003c  1c64              ADDS     r4,r4,#1              ;1400
                  |L41.62|
00003e  2c10              CMP      r4,#0x10              ;1400
000040  d3f1              BCC      |L41.38|
                  |L41.66|
000042  f8b80000          LDRH     r0,[r8,#0]            ;1398
000046  2800              CMP      r0,#0                 ;1398
000048  d1e9              BNE      |L41.30|
;;;1404   			}
;;;1405   		}
;;;1406   		seq = (UINT)sr;
00004a  463d              MOV      r5,r7
                  |L41.76|
;;;1407   	}
;;;1408   
;;;1409   	/* itoa (hexdecimal) */
;;;1410   	i = 7;
00004c  2407              MOVS     r4,#7
;;;1411   	do {
00004e  bf00              NOP      
                  |L41.80|
;;;1412   		c = (seq % 16) + '0';
000050  f005000f          AND      r0,r5,#0xf
000054  f1000a30          ADD      r10,r0,#0x30
;;;1413   		if (c > '9') c += 7;
000058  f1ba0f39          CMP      r10,#0x39
00005c  dd03              BLE      |L41.102|
00005e  f10a0007          ADD      r0,r10,#7
000062  f0000aff          AND      r10,r0,#0xff
                  |L41.102|
;;;1414   		ns[i--] = c;
000066  4620              MOV      r0,r4
000068  1e64              SUBS     r4,r4,#1
00006a  a901              ADD      r1,sp,#4
00006c  f801a000          STRB     r10,[r1,r0]
;;;1415   		seq /= 16;
000070  092d              LSRS     r5,r5,#4
;;;1416   	} while (seq);
000072  2d00              CMP      r5,#0
000074  d1ec              BNE      |L41.80|
;;;1417   	ns[i] = '~';
000076  207e              MOVS     r0,#0x7e
000078  5508              STRB     r0,[r1,r4]
;;;1418   
;;;1419   	/* Append the number */
;;;1420   	for (j = 0; j < i && dst[j] != ' '; j++) {
00007a  2600              MOVS     r6,#0
00007c  e000              B        |L41.128|
                  |L41.126|
00007e  1c76              ADDS     r6,r6,#1
                  |L41.128|
000080  42a6              CMP      r6,r4
000082  d203              BCS      |L41.140|
000084  f8190006          LDRB     r0,[r9,r6]
000088  2820              CMP      r0,#0x20
00008a  d1f8              BNE      |L41.126|
                  |L41.140|
;;;1421   		if (IsDBCS1(dst[j])) {
;;;1422   			if (j == i - 1) break;
;;;1423   			j++;
;;;1424   		}
;;;1425   	}
;;;1426   	do {
00008c  bf00              NOP      
                  |L41.142|
;;;1427   		dst[j++] = (i < 8) ? ns[i++] : ' ';
00008e  2c08              CMP      r4,#8
000090  d204              BCS      |L41.156|
000092  4620              MOV      r0,r4
000094  1c64              ADDS     r4,r4,#1
000096  a901              ADD      r1,sp,#4
000098  5c08              LDRB     r0,[r1,r0]
00009a  e000              B        |L41.158|
                  |L41.156|
00009c  2020              MOVS     r0,#0x20
                  |L41.158|
00009e  4631              MOV      r1,r6
0000a0  1c76              ADDS     r6,r6,#1
0000a2  f8090001          STRB     r0,[r9,r1]
;;;1428   	} while (j < 8);
0000a6  2e08              CMP      r6,#8
0000a8  d3f1              BCC      |L41.142|
;;;1429   }
0000aa  b007              ADD      sp,sp,#0x1c
0000ac  e8bd8ff0          POP      {r4-r11,pc}
;;;1430   #endif
                          ENDP

                  |L41.176|
                          DCD      0x00011021

                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;819    
;;;820    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;821    	FATFS* fs,	/* File system object */
;;;822    	DWORD clst	/* FAT index number (cluster number) to get the value */
;;;823    )
;;;824    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;825    	UINT wc, bc;
;;;826    	BYTE *p;
;;;827    	DWORD val;
;;;828    
;;;829    
;;;830    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
000008  2d02              CMP      r5,#2
00000a  d302              BCC      |L42.18|
00000c  6960              LDR      r0,[r4,#0x14]
00000e  42a8              CMP      r0,r5
000010  d802              BHI      |L42.24|
                  |L42.18|
;;;831    		val = 1;	/* Internal error */
000012  f04f0901          MOV      r9,#1
000016  e08f              B        |L42.312|
                  |L42.24|
;;;832    
;;;833    	} else {
;;;834    		val = 0xFFFFFFFF;	/* Default value falls on disk error */
000018  f04f39ff          MOV      r9,#0xffffffff
;;;835    
;;;836    		switch (fs->fs_type) {
00001c  7820              LDRB     r0,[r4,#0]
00001e  2801              CMP      r0,#1
000020  d004              BEQ      |L42.44|
000022  2802              CMP      r0,#2
000024  d03c              BEQ      |L42.160|
000026  2803              CMP      r0,#3
000028  d17e              BNE      |L42.296|
00002a  e057              B        |L42.220|
                  |L42.44|
;;;837    		case FS_FAT12 :
;;;838    			bc = (UINT)clst; bc += bc / 2;
00002c  462f              MOV      r7,r5
00002e  eb070757          ADD      r7,r7,r7,LSR #1
;;;839    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
000032  8960              LDRH     r0,[r4,#0xa]
000034  fbb7f0f0          UDIV     r0,r7,r0
000038  6a21              LDR      r1,[r4,#0x20]
00003a  eb000a01          ADD      r10,r0,r1
00003e  4651              MOV      r1,r10
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       move_window
000046  b100              CBZ      r0,|L42.74|
000048  e075              B        |L42.310|
                  |L42.74|
;;;840    			wc = fs->win[bc++ % SS(fs)];
00004a  4638              MOV      r0,r7
00004c  1c7f              ADDS     r7,r7,#1
00004e  8961              LDRH     r1,[r4,#0xa]
000050  fbb0f2f1          UDIV     r2,r0,r1
000054  fb010112          MLS      r1,r1,r2,r0
000058  f1040030          ADD      r0,r4,#0x30
00005c  f8108001          LDRB     r8,[r0,r1]
;;;841    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
000060  8960              LDRH     r0,[r4,#0xa]
000062  fbb7f0f0          UDIV     r0,r7,r0
000066  6a21              LDR      r1,[r4,#0x20]
000068  eb000a01          ADD      r10,r0,r1
00006c  4651              MOV      r1,r10
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       move_window
000074  b100              CBZ      r0,|L42.120|
000076  e05e              B        |L42.310|
                  |L42.120|
;;;842    			wc |= fs->win[bc % SS(fs)] << 8;
000078  8960              LDRH     r0,[r4,#0xa]
00007a  fbb7f1f0          UDIV     r1,r7,r0
00007e  fb007111          MLS      r1,r0,r1,r7
000082  f1040030          ADD      r0,r4,#0x30
000086  5c40              LDRB     r0,[r0,r1]
000088  ea482800          ORR      r8,r8,r0,LSL #8
;;;843    			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
00008c  f0050001          AND      r0,r5,#1
000090  b110              CBZ      r0,|L42.152|
000092  ea4f1018          LSR      r0,r8,#4
000096  e001              B        |L42.156|
                  |L42.152|
000098  f3c8000b          UBFX     r0,r8,#0,#12
                  |L42.156|
00009c  4681              MOV      r9,r0
;;;844    			break;
00009e  e04a              B        |L42.310|
                  |L42.160|
;;;845    
;;;846    		case FS_FAT16 :
;;;847    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
0000a0  f8b4a00a          LDRH     r10,[r4,#0xa]
0000a4  eb0a70da          ADD      r0,r10,r10,LSR #31
0000a8  1040              ASRS     r0,r0,#1
0000aa  fbb5f0f0          UDIV     r0,r5,r0
0000ae  6a21              LDR      r1,[r4,#0x20]
0000b0  eb000b01          ADD      r11,r0,r1
0000b4  4659              MOV      r1,r11
0000b6  4620              MOV      r0,r4
0000b8  f7fffffe          BL       move_window
0000bc  b100              CBZ      r0,|L42.192|
0000be  e03a              B        |L42.310|
                  |L42.192|
;;;848    			p = &fs->win[clst * 2 % SS(fs)];
0000c0  0068              LSLS     r0,r5,#1
0000c2  8961              LDRH     r1,[r4,#0xa]
0000c4  fbb0f2f1          UDIV     r2,r0,r1
0000c8  fb010112          MLS      r1,r1,r2,r0
0000cc  f1040030          ADD      r0,r4,#0x30
0000d0  180e              ADDS     r6,r1,r0
;;;849    			val = LD_WORD(p);
0000d2  7830              LDRB     r0,[r6,#0]
0000d4  7871              LDRB     r1,[r6,#1]
0000d6  ea402901          ORR      r9,r0,r1,LSL #8
;;;850    			break;
0000da  e02c              B        |L42.310|
                  |L42.220|
;;;851    
;;;852    		case FS_FAT32 :
;;;853    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
0000dc  f8b4a00a          LDRH     r10,[r4,#0xa]
0000e0  ea4f70ea          ASR      r0,r10,#31
0000e4  eb0a7090          ADD      r0,r10,r0,LSR #30
0000e8  1080              ASRS     r0,r0,#2
0000ea  fbb5f0f0          UDIV     r0,r5,r0
0000ee  6a21              LDR      r1,[r4,#0x20]
0000f0  eb000b01          ADD      r11,r0,r1
0000f4  4659              MOV      r1,r11
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       move_window
0000fc  b100              CBZ      r0,|L42.256|
0000fe  e01a              B        |L42.310|
                  |L42.256|
;;;854    			p = &fs->win[clst * 4 % SS(fs)];
000100  00a8              LSLS     r0,r5,#2
000102  8961              LDRH     r1,[r4,#0xa]
000104  fbb0f2f1          UDIV     r2,r0,r1
000108  fb010112          MLS      r1,r1,r2,r0
00010c  f1040030          ADD      r0,r4,#0x30
000110  180e              ADDS     r6,r1,r0
;;;855    			val = LD_DWORD(p) & 0x0FFFFFFF;
000112  78f0              LDRB     r0,[r6,#3]
000114  0600              LSLS     r0,r0,#24
000116  78b1              LDRB     r1,[r6,#2]
000118  ea404001          ORR      r0,r0,r1,LSL #16
00011c  7871              LDRB     r1,[r6,#1]
00011e  ea402001          ORR      r0,r0,r1,LSL #8
000122  7831              LDRB     r1,[r6,#0]
000124  4308              ORRS     r0,r0,r1
000126  e000              B        |L42.298|
                  |L42.296|
000128  e002              B        |L42.304|
                  |L42.298|
00012a  f0204970          BIC      r9,r0,#0xf0000000
;;;856    			break;
00012e  e002              B        |L42.310|
                  |L42.304|
;;;857    
;;;858    		default:
;;;859    			val = 1;	/* Internal error */
000130  f04f0901          MOV      r9,#1
000134  bf00              NOP                            ;836
                  |L42.310|
000136  bf00              NOP                            ;839
                  |L42.312|
;;;860    		}
;;;861    	}
;;;862    
;;;863    	return val;
000138  4648              MOV      r0,r9
;;;864    }
00013a  e8bd9ff0          POP      {r4-r12,pc}
;;;865    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1704   static
;;;1705   void get_fileinfo (		/* No return code */
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1706   	DIR* dp,			/* Pointer to the directory object */
;;;1707   	FILINFO* fno	 	/* Pointer to the file information to be filled */
;;;1708   )
;;;1709   {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;1710   	UINT i;
;;;1711   	TCHAR *p, c;
;;;1712   	BYTE *dir;
;;;1713   #if _USE_LFN
;;;1714   	WCHAR w, *lfn;
;;;1715   #endif
;;;1716   
;;;1717   	p = fno->fname;
000008  f1050709          ADD      r7,r5,#9
;;;1718   	if (dp->sect) {		/* Get SFN */
00000c  f8d80010          LDR      r0,[r8,#0x10]
000010  2800              CMP      r0,#0
000012  d043              BEQ      |L43.156|
;;;1719   		dir = dp->dir;
000014  f8d84014          LDR      r4,[r8,#0x14]
;;;1720   		i = 0;
000018  2600              MOVS     r6,#0
;;;1721   		while (i < 11) {		/* Copy name body and extension */
00001a  e026              B        |L43.106|
                  |L43.28|
;;;1722   			c = (TCHAR)dir[i++];
00001c  4630              MOV      r0,r6
00001e  1c76              ADDS     r6,r6,#1
000020  f8149000          LDRB     r9,[r4,r0]
;;;1723   			if (c == ' ') continue;				/* Skip padding spaces */
000024  f1b90f20          CMP      r9,#0x20
000028  d100              BNE      |L43.44|
00002a  e01e              B        |L43.106|
                  |L43.44|
;;;1724   			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
00002c  f1b90f05          CMP      r9,#5
000030  d101              BNE      |L43.54|
000032  f04f09e5          MOV      r9,#0xe5
                  |L43.54|
;;;1725   			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
000036  2e09              CMP      r6,#9
000038  d102              BNE      |L43.64|
00003a  202e              MOVS     r0,#0x2e
00003c  f8070b01          STRB     r0,[r7],#1
                  |L43.64|
;;;1726   #if _USE_LFN
;;;1727   			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
000040  f1b90f41          CMP      r9,#0x41
000044  db0e              BLT      |L43.100|
000046  f1b90f5a          CMP      r9,#0x5a
00004a  dc0b              BGT      |L43.100|
00004c  7b20              LDRB     r0,[r4,#0xc]
00004e  2e09              CMP      r6,#9
000050  d301              BCC      |L43.86|
000052  2110              MOVS     r1,#0x10
000054  e000              B        |L43.88|
                  |L43.86|
000056  2108              MOVS     r1,#8
                  |L43.88|
000058  4008              ANDS     r0,r0,r1
00005a  b118              CBZ      r0,|L43.100|
;;;1728   				c += 0x20;			/* To lower */
00005c  f1090020          ADD      r0,r9,#0x20
000060  f00009ff          AND      r9,r0,#0xff
                  |L43.100|
;;;1729   #if _LFN_UNICODE
;;;1730   			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
;;;1731   				c = c << 8 | dir[i++];
;;;1732   			c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;1733   			if (!c) c = '?';
;;;1734   #endif
;;;1735   #endif
;;;1736   			*p++ = c;
000064  f8079b01          STRB     r9,[r7],#1
000068  bf00              NOP                            ;1723
                  |L43.106|
00006a  2e0b              CMP      r6,#0xb               ;1721
00006c  d3d6              BCC      |L43.28|
;;;1737   		}
;;;1738   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00006e  7ae0              LDRB     r0,[r4,#0xb]
000070  7228              STRB     r0,[r5,#8]
;;;1739   		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
000072  7fe0              LDRB     r0,[r4,#0x1f]
000074  0601              LSLS     r1,r0,#24
000076  7fa0              LDRB     r0,[r4,#0x1e]
000078  ea414100          ORR      r1,r1,r0,LSL #16
00007c  7f60              LDRB     r0,[r4,#0x1d]
00007e  ea412000          ORR      r0,r1,r0,LSL #8
000082  7f21              LDRB     r1,[r4,#0x1c]
000084  4308              ORRS     r0,r0,r1
000086  6028              STR      r0,[r5,#0]
;;;1740   		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
000088  7e21              LDRB     r1,[r4,#0x18]
00008a  7e60              LDRB     r0,[r4,#0x19]
00008c  ea412000          ORR      r0,r1,r0,LSL #8
000090  80a8              STRH     r0,[r5,#4]
;;;1741   		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
000092  7da1              LDRB     r1,[r4,#0x16]
000094  7de0              LDRB     r0,[r4,#0x17]
000096  ea412000          ORR      r0,r1,r0,LSL #8
00009a  80e8              STRH     r0,[r5,#6]
                  |L43.156|
;;;1742   	}
;;;1743   	*p = 0;		/* Terminate SFN string by a \0 */
00009c  2000              MOVS     r0,#0
00009e  7038              STRB     r0,[r7,#0]
;;;1744   
;;;1745   #if _USE_LFN
;;;1746   	if (fno->lfname) {
0000a0  69a8              LDR      r0,[r5,#0x18]
0000a2  b360              CBZ      r0,|L43.254|
;;;1747   		i = 0; p = fno->lfname;
0000a4  2600              MOVS     r6,#0
0000a6  69af              LDR      r7,[r5,#0x18]
;;;1748   		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
0000a8  f8d80010          LDR      r0,[r8,#0x10]
0000ac  b328              CBZ      r0,|L43.250|
0000ae  69e8              LDR      r0,[r5,#0x1c]
0000b0  b318              CBZ      r0,|L43.250|
0000b2  f8b80020          LDRH     r0,[r8,#0x20]
0000b6  f64f71ff          MOV      r1,#0xffff
0000ba  4288              CMP      r0,r1
0000bc  d01d              BEQ      |L43.250|
;;;1749   			lfn = dp->lfn;
0000be  f8d8b01c          LDR      r11,[r8,#0x1c]
;;;1750   			while ((w = *lfn++) != 0) {		/* Get an LFN character */
0000c2  e014              B        |L43.238|
                  |L43.196|
;;;1751   #if !_LFN_UNICODE
;;;1752   				w = ff_convert(w, 0);		/* Unicode -> OEM */
0000c4  2100              MOVS     r1,#0
0000c6  4650              MOV      r0,r10
0000c8  f7fffffe          BL       ff_convert
0000cc  4682              MOV      r10,r0
;;;1753   				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
0000ce  f1ba0f00          CMP      r10,#0
0000d2  d101              BNE      |L43.216|
0000d4  2600              MOVS     r6,#0
0000d6  e00f              B        |L43.248|
                  |L43.216|
;;;1754   				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
0000d8  bf00              NOP      
;;;1755   					p[i++] = (TCHAR)(w >> 8);
;;;1756   #endif
;;;1757   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
0000da  69e8              LDR      r0,[r5,#0x1c]
0000dc  1e40              SUBS     r0,r0,#1
0000de  42b0              CMP      r0,r6
0000e0  d801              BHI      |L43.230|
0000e2  2600              MOVS     r6,#0
0000e4  e008              B        |L43.248|
                  |L43.230|
;;;1758   				p[i++] = (TCHAR)w;
0000e6  4630              MOV      r0,r6
0000e8  1c76              ADDS     r6,r6,#1
0000ea  f807a000          STRB     r10,[r7,r0]
                  |L43.238|
0000ee  f83b1b02          LDRH     r1,[r11],#2           ;1750
0000f2  f1b10a00          SUBS     r10,r1,#0             ;1750
0000f6  d1e5              BNE      |L43.196|
                  |L43.248|
0000f8  bf00              NOP                            ;1753
                  |L43.250|
;;;1759   			}
;;;1760   		}
;;;1761   		p[i] = 0;	/* Terminate LFN string by a \0 */
0000fa  2000              MOVS     r0,#0
0000fc  55b8              STRB     r0,[r7,r6]
                  |L43.254|
;;;1762   	}
;;;1763   #endif
;;;1764   }
0000fe  e8bd9ff0          POP      {r4-r12,pc}
;;;1765   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.get_ldnumber||, CODE, READONLY, ALIGN=1

                  get_ldnumber PROC
;;;2115   static
;;;2116   int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
000000  b570              PUSH     {r4-r6,lr}
;;;2117   	const TCHAR** path	/* Pointer to pointer to the path name */
;;;2118   )
;;;2119   {
000002  4602              MOV      r2,r0
;;;2120   	const TCHAR *tp, *tt;
;;;2121   	UINT i;
;;;2122   	int vol = -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;2123   #if _STR_VOLUME_ID		/* Find string drive id */
;;;2124   	static const char* const str[] = {_VOLUME_STRS};
;;;2125   	const char *sp;
;;;2126   	char c;
;;;2127   	TCHAR tc;
;;;2128   #endif
;;;2129   
;;;2130   
;;;2131   	if (*path) {	/* If the pointer is not a null */
000008  6815              LDR      r5,[r2,#0]
00000a  b1e5              CBZ      r5,|L44.70|
;;;2132   		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
00000c  6811              LDR      r1,[r2,#0]
00000e  e000              B        |L44.18|
                  |L44.16|
000010  1c49              ADDS     r1,r1,#1
                  |L44.18|
000012  780d              LDRB     r5,[r1,#0]
000014  2d20              CMP      r5,#0x20
000016  d302              BCC      |L44.30|
000018  780d              LDRB     r5,[r1,#0]
00001a  2d3a              CMP      r5,#0x3a
00001c  d1f8              BNE      |L44.16|
                  |L44.30|
;;;2133   		if (*tt == ':') {	/* If a ':' is exist in the path name */
00001e  780d              LDRB     r5,[r1,#0]
000020  2d3a              CMP      r5,#0x3a
000022  d10f              BNE      |L44.68|
;;;2134   			tp = *path;
000024  6814              LDR      r4,[r2,#0]
;;;2135   			i = *tp++ - '0'; 
000026  f8145b01          LDRB     r5,[r4],#1
00002a  f1a50330          SUB      r3,r5,#0x30
;;;2136   			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
00002e  2b0a              CMP      r3,#0xa
000030  d207              BCS      |L44.66|
000032  428c              CMP      r4,r1
000034  d105              BNE      |L44.66|
;;;2137   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
000036  2b02              CMP      r3,#2
000038  d203              BCS      |L44.66|
;;;2138   					vol = (int)i;
00003a  4618              MOV      r0,r3
;;;2139   					*path = ++tt;
00003c  1c4d              ADDS     r5,r1,#1
00003e  4629              MOV      r1,r5
000040  6015              STR      r5,[r2,#0]
                  |L44.66|
;;;2140   				}
;;;2141   			}
;;;2142   #if _STR_VOLUME_ID
;;;2143   			 else {	/* No numeric drive number, find string drive id */
;;;2144   				i = 0; tt++;
;;;2145   				do {
;;;2146   					sp = str[i]; tp = *path;
;;;2147   					do {	/* Compare a string drive id with path name */
;;;2148   						c = *sp++; tc = *tp++;
;;;2149   						if (IsLower(tc)) tc -= 0x20;
;;;2150   					} while (c && (TCHAR)c == tc);
;;;2151   				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
;;;2152   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
;;;2153   					vol = (int)i;
;;;2154   					*path = tt;
;;;2155   				}
;;;2156   			}
;;;2157   #endif
;;;2158   			return vol;
;;;2159   		}
;;;2160   #if _FS_RPATH && _VOLUMES >= 2
;;;2161   		vol = CurrVol;	/* Current drive */
;;;2162   #else
;;;2163   		vol = 0;		/* Drive 0 */
;;;2164   #endif
;;;2165   	}
;;;2166   	return vol;
;;;2167   }
000042  bd70              POP      {r4-r6,pc}
                  |L44.68|
000044  2000              MOVS     r0,#0                 ;2163
                  |L44.70|
000046  bf00              NOP                            ;2166
000048  e7fb              B        |L44.66|
;;;2168   
                          ENDP


                          AREA ||i.ld_clust||, CODE, READONLY, ALIGN=1

                  ld_clust PROC
;;;1236   static
;;;1237   DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
000000  b510              PUSH     {r4,lr}
;;;1238   	FATFS* fs,		/* Pointer to the fs object */
;;;1239   	const BYTE* dir	/* Pointer to the SFN entry */
;;;1240   )
;;;1241   {
000002  4602              MOV      r2,r0
;;;1242   	DWORD cl;
;;;1243   
;;;1244   	cl = LD_WORD(dir + DIR_FstClusLO);
000004  7e8c              LDRB     r4,[r1,#0x1a]
000006  7ecb              LDRB     r3,[r1,#0x1b]
000008  ea442003          ORR      r0,r4,r3,LSL #8
;;;1245   	if (fs->fs_type == FS_FAT32)
00000c  7813              LDRB     r3,[r2,#0]
00000e  2b03              CMP      r3,#3
000010  d105              BNE      |L45.30|
;;;1246   		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
000012  7d0c              LDRB     r4,[r1,#0x14]
000014  7d4b              LDRB     r3,[r1,#0x15]
000016  ea442303          ORR      r3,r4,r3,LSL #8
00001a  ea404003          ORR      r0,r0,r3,LSL #16
                  |L45.30|
;;;1247   
;;;1248   	return cl;
;;;1249   }
00001e  bd10              POP      {r4,pc}
;;;1250   
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;534    static
;;;535    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;536    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;537    	int r = 0;
000008  2000              MOVS     r0,#0
;;;538    
;;;539    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L46.12|
00000c  1e16              SUBS     r6,r2,#0
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L46.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  1e30              SUBS     r0,r6,#0
000022  d0f3              BEQ      |L46.12|
                  |L46.36|
;;;540    	return r;
;;;541    }
000024  bdf0              POP      {r4-r7,pc}
;;;542    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;508    static
;;;509    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;510    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;511    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;512    
;;;513    #if _WORD_ACCESS == 1
;;;514    	while (cnt >= sizeof (int)) {
;;;515    		*(int*)d = *(int*)s;
;;;516    		d += sizeof (int); s += sizeof (int);
;;;517    		cnt -= sizeof (int);
;;;518    	}
;;;519    #endif
;;;520    	while (cnt--)
000006  e003              B        |L47.16|
                  |L47.8|
;;;521    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L47.16|
000010  1e15              SUBS     r5,r2,#0              ;520
000012  f1a20201          SUB      r2,r2,#1              ;520
000016  d1f7              BNE      |L47.8|
;;;522    }
000018  bd70              POP      {r4-r6,pc}
;;;523    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;525    static
;;;526    void mem_set (void* dst, int val, UINT cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;527    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;528    
;;;529    	while (cnt--)
000004  e001              B        |L48.10|
                  |L48.6|
;;;530    		*d++ = (BYTE)val;
000006  f8031b01          STRB     r1,[r3],#1
                  |L48.10|
00000a  1e14              SUBS     r4,r2,#0              ;529
00000c  f1a20201          SUB      r2,r2,#1              ;529
000010  d1f9              BNE      |L48.6|
;;;531    }
000012  bd30              POP      {r4,r5,pc}
;;;532    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;730    static
;;;731    FRESULT move_window (	/* FR_OK(0):succeeded, !=0:error */
000000  b570              PUSH     {r4-r6,lr}
;;;732    	FATFS* fs,		/* File system object */
;;;733    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;734    )
;;;735    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;736    	FRESULT res = FR_OK;
000006  2600              MOVS     r6,#0
;;;737    
;;;738    
;;;739    	if (sector != fs->winsect) {	/* Window offset changed? */
000008  6ae0              LDR      r0,[r4,#0x2c]
00000a  42a8              CMP      r0,r5
00000c  d010              BEQ      |L49.48|
;;;740    #if !_FS_READONLY
;;;741    		res = sync_window(fs);		/* Write-back changes */
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       sync_window
000014  4606              MOV      r6,r0
;;;742    #endif
;;;743    		if (res == FR_OK) {			/* Fill sector window with new data */
000016  b95e              CBNZ     r6,|L49.48|
;;;744    			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
000018  7860              LDRB     r0,[r4,#1]
00001a  2301              MOVS     r3,#1
00001c  462a              MOV      r2,r5
00001e  f1040130          ADD      r1,r4,#0x30
000022  f7fffffe          BL       disk_read
000026  b110              CBZ      r0,|L49.46|
;;;745    				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
000028  f04f35ff          MOV      r5,#0xffffffff
;;;746    				res = FR_DISK_ERR;
00002c  2601              MOVS     r6,#1
                  |L49.46|
;;;747    			}
;;;748    			fs->winsect = sector;
00002e  62e5              STR      r5,[r4,#0x2c]
                  |L49.48|
;;;749    		}
;;;750    	}
;;;751    	return res;
000030  4630              MOV      r0,r6
;;;752    }
000032  bd70              POP      {r4-r6,pc}
;;;753    
                          ENDP


                          AREA ||i.pick_lfn||, CODE, READONLY, ALIGN=2

                  pick_lfn PROC
;;;1308   static
;;;1309   int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1310   	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
;;;1311   	BYTE* dir			/* Pointer to the LFN entry */
;;;1312   )
;;;1313   {
000002  4604              MOV      r4,r0
;;;1314   	UINT i, s;
;;;1315   	WCHAR wc, uc;
;;;1316   
;;;1317   
;;;1318   	if (LD_WORD(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
000004  7e8f              LDRB     r7,[r1,#0x1a]
000006  7ec8              LDRB     r0,[r1,#0x1b]
000008  ea472000          ORR      r0,r7,r0,LSL #8
00000c  b108              CBZ      r0,|L50.18|
00000e  2000              MOVS     r0,#0
                  |L50.16|
;;;1319   
;;;1320   	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
;;;1321   
;;;1322   	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
;;;1323   		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character */
;;;1324   		if (wc) {
;;;1325   			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
;;;1326   			lfnbuf[i++] = wc = uc;			/* Store it */
;;;1327   		} else {
;;;1328   			if (uc != 0xFFFF) return 0;		/* Check filler */
;;;1329   		}
;;;1330   	}
;;;1331   
;;;1332   	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
;;;1333   		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
;;;1334   		lfnbuf[i] = 0;
;;;1335   	}
;;;1336   
;;;1337   	return 1;		/* The part of LFN is valid */
;;;1338   }
000010  bdf0              POP      {r4-r7,pc}
                  |L50.18|
000012  7808              LDRB     r0,[r1,#0]            ;1320
000014  f000003f          AND      r0,r0,#0x3f           ;1320
000018  1e40              SUBS     r0,r0,#1              ;1320
00001a  eb000780          ADD      r7,r0,r0,LSL #2       ;1320
00001e  eb0702c0          ADD      r2,r7,r0,LSL #3       ;1320
000022  2601              MOVS     r6,#1                 ;1322
000024  2300              MOVS     r3,#0                 ;1322
000026  e01a              B        |L50.94|
                  |L50.40|
000028  4814              LDR      r0,|L50.124|
00002a  5cc0              LDRB     r0,[r0,r3]            ;1323
00002c  5c08              LDRB     r0,[r1,r0]            ;1323
00002e  4f13              LDR      r7,|L50.124|
000030  5cff              LDRB     r7,[r7,r3]            ;1323
000032  440f              ADD      r7,r7,r1              ;1323
000034  787f              LDRB     r7,[r7,#1]            ;1323
000036  ea402507          ORR      r5,r0,r7,LSL #8       ;1323
00003a  b14e              CBZ      r6,|L50.80|
00003c  2aff              CMP      r2,#0xff              ;1325
00003e  d301              BCC      |L50.68|
000040  2000              MOVS     r0,#0                 ;1325
000042  e7e5              B        |L50.16|
                  |L50.68|
000044  462e              MOV      r6,r5                 ;1326
000046  4610              MOV      r0,r2                 ;1326
000048  1c52              ADDS     r2,r2,#1              ;1326
00004a  f8245010          STRH     r5,[r4,r0,LSL #1]     ;1326
00004e  e005              B        |L50.92|
                  |L50.80|
000050  f64f70ff          MOV      r0,#0xffff            ;1328
000054  4285              CMP      r5,r0                 ;1328
000056  d001              BEQ      |L50.92|
000058  2000              MOVS     r0,#0                 ;1328
00005a  e7d9              B        |L50.16|
                  |L50.92|
00005c  1c5b              ADDS     r3,r3,#1              ;1322
                  |L50.94|
00005e  2b0d              CMP      r3,#0xd               ;1322
000060  d3e2              BCC      |L50.40|
000062  7808              LDRB     r0,[r1,#0]            ;1332
000064  f0000040          AND      r0,r0,#0x40           ;1332
000068  b130              CBZ      r0,|L50.120|
00006a  2aff              CMP      r2,#0xff              ;1333
00006c  d301              BCC      |L50.114|
00006e  2000              MOVS     r0,#0                 ;1333
000070  e7ce              B        |L50.16|
                  |L50.114|
000072  2000              MOVS     r0,#0                 ;1334
000074  f8240012          STRH     r0,[r4,r2,LSL #1]     ;1334
                  |L50.120|
000078  2001              MOVS     r0,#1                 ;1337
00007a  e7c9              B        |L50.16|
;;;1339   
                          ENDP

                  |L50.124|
                          DCD      LfnOfs

                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;874    #if !_FS_READONLY
;;;875    FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;876    	FATFS* fs,		/* File system object */
;;;877    	DWORD clst,		/* FAT index number (cluster number) to be changed */
;;;878    	DWORD val		/* New value to be set to the entry */
;;;879    )
;;;880    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;881    	UINT bc;
;;;882    	BYTE *p;
;;;883    	FRESULT res;
;;;884    
;;;885    
;;;886    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
00000a  2e02              CMP      r6,#2
00000c  d302              BCC      |L51.20|
00000e  6960              LDR      r0,[r4,#0x14]
000010  42b0              CMP      r0,r6
000012  d802              BHI      |L51.26|
                  |L51.20|
;;;887    		res = FR_INT_ERR;
000014  f04f0802          MOV      r8,#2
000018  e0b3              B        |L51.386|
                  |L51.26|
;;;888    
;;;889    	} else {
;;;890    		switch (fs->fs_type) {
00001a  7820              LDRB     r0,[r4,#0]
00001c  2801              CMP      r0,#1
00001e  d004              BEQ      |L51.42|
000020  2802              CMP      r0,#2
000022  d052              BEQ      |L51.202|
000024  2803              CMP      r0,#3
000026  d172              BNE      |L51.270|
000028  e072              B        |L51.272|
                  |L51.42|
;;;891    		case FS_FAT12 :
;;;892    			bc = (UINT)clst; bc += bc / 2;
00002a  46b1              MOV      r9,r6
00002c  eb090959          ADD      r9,r9,r9,LSR #1
;;;893    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000030  8960              LDRH     r0,[r4,#0xa]
000032  fbb9f0f0          UDIV     r0,r9,r0
000036  6a21              LDR      r1,[r4,#0x20]
000038  eb000a01          ADD      r10,r0,r1
00003c  4651              MOV      r1,r10
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       move_window
000044  4680              MOV      r8,r0
;;;894    			if (res != FR_OK) break;
000046  f1b80f00          CMP      r8,#0
00004a  d000              BEQ      |L51.78|
00004c  e098              B        |L51.384|
                  |L51.78|
;;;895    			p = &fs->win[bc++ % SS(fs)];
00004e  4648              MOV      r0,r9
000050  f1090901          ADD      r9,r9,#1
000054  8961              LDRH     r1,[r4,#0xa]
000056  fbb0f2f1          UDIV     r2,r0,r1
00005a  fb010112          MLS      r1,r1,r2,r0
00005e  f1040030          ADD      r0,r4,#0x30
000062  180d              ADDS     r5,r1,r0
;;;896    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000064  f0060001          AND      r0,r6,#1
000068  b120              CBZ      r0,|L51.116|
00006a  b2f9              UXTB     r1,r7
00006c  7828              LDRB     r0,[r5,#0]
00006e  f361101f          BFI      r0,r1,#4,#28
000072  e000              B        |L51.118|
                  |L51.116|
000074  4638              MOV      r0,r7
                  |L51.118|
000076  7028              STRB     r0,[r5,#0]
;;;897    			fs->wflag = 1;
000078  2001              MOVS     r0,#1
00007a  7120              STRB     r0,[r4,#4]
;;;898    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00007c  8960              LDRH     r0,[r4,#0xa]
00007e  fbb9f0f0          UDIV     r0,r9,r0
000082  6a21              LDR      r1,[r4,#0x20]
000084  eb000a01          ADD      r10,r0,r1
000088  4651              MOV      r1,r10
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       move_window
000090  4680              MOV      r8,r0
;;;899    			if (res != FR_OK) break;
000092  f1b80f00          CMP      r8,#0
000096  d000              BEQ      |L51.154|
000098  e072              B        |L51.384|
                  |L51.154|
;;;900    			p = &fs->win[bc % SS(fs)];
00009a  8960              LDRH     r0,[r4,#0xa]
00009c  fbb9f1f0          UDIV     r1,r9,r0
0000a0  fb009111          MLS      r1,r0,r1,r9
0000a4  f1040030          ADD      r0,r4,#0x30
0000a8  180d              ADDS     r5,r1,r0
;;;901    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
0000aa  f0060001          AND      r0,r6,#1
0000ae  b110              CBZ      r0,|L51.182|
0000b0  f3c71007          UBFX     r0,r7,#4,#8
0000b4  e005              B        |L51.194|
                  |L51.182|
0000b6  7828              LDRB     r0,[r5,#0]
0000b8  f00000f0          AND      r0,r0,#0xf0
0000bc  f3c72103          UBFX     r1,r7,#8,#4
0000c0  4308              ORRS     r0,r0,r1
                  |L51.194|
0000c2  7028              STRB     r0,[r5,#0]
;;;902    			fs->wflag = 1;
0000c4  2001              MOVS     r0,#1
0000c6  7120              STRB     r0,[r4,#4]
;;;903    			break;
0000c8  e05a              B        |L51.384|
                  |L51.202|
;;;904    
;;;905    		case FS_FAT16 :
;;;906    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000ca  f8b4a00a          LDRH     r10,[r4,#0xa]
0000ce  eb0a70da          ADD      r0,r10,r10,LSR #31
0000d2  1040              ASRS     r0,r0,#1
0000d4  fbb6f0f0          UDIV     r0,r6,r0
0000d8  6a21              LDR      r1,[r4,#0x20]
0000da  eb000b01          ADD      r11,r0,r1
0000de  4659              MOV      r1,r11
0000e0  4620              MOV      r0,r4
0000e2  f7fffffe          BL       move_window
0000e6  4680              MOV      r8,r0
;;;907    			if (res != FR_OK) break;
0000e8  f1b80f00          CMP      r8,#0
0000ec  d000              BEQ      |L51.240|
0000ee  e047              B        |L51.384|
                  |L51.240|
;;;908    			p = &fs->win[clst * 2 % SS(fs)];
0000f0  0070              LSLS     r0,r6,#1
0000f2  8961              LDRH     r1,[r4,#0xa]
0000f4  fbb0f2f1          UDIV     r2,r0,r1
0000f8  fb010112          MLS      r1,r1,r2,r0
0000fc  f1040030          ADD      r0,r4,#0x30
000100  180d              ADDS     r5,r1,r0
;;;909    			ST_WORD(p, (WORD)val);
000102  702f              STRB     r7,[r5,#0]
000104  0a38              LSRS     r0,r7,#8
000106  7068              STRB     r0,[r5,#1]
;;;910    			fs->wflag = 1;
000108  2001              MOVS     r0,#1
00010a  7120              STRB     r0,[r4,#4]
;;;911    			break;
00010c  e038              B        |L51.384|
                  |L51.270|
00010e  e034              B        |L51.378|
                  |L51.272|
;;;912    
;;;913    		case FS_FAT32 :
;;;914    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
000110  f8b4a00a          LDRH     r10,[r4,#0xa]
000114  ea4f70ea          ASR      r0,r10,#31
000118  eb0a7090          ADD      r0,r10,r0,LSR #30
00011c  1080              ASRS     r0,r0,#2
00011e  fbb6f0f0          UDIV     r0,r6,r0
000122  6a21              LDR      r1,[r4,#0x20]
000124  eb000b01          ADD      r11,r0,r1
000128  4659              MOV      r1,r11
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       move_window
000130  4680              MOV      r8,r0
;;;915    			if (res != FR_OK) break;
000132  f1b80f00          CMP      r8,#0
000136  d000              BEQ      |L51.314|
000138  e022              B        |L51.384|
                  |L51.314|
;;;916    			p = &fs->win[clst * 4 % SS(fs)];
00013a  00b0              LSLS     r0,r6,#2
00013c  8961              LDRH     r1,[r4,#0xa]
00013e  fbb0f2f1          UDIV     r2,r0,r1
000142  fb010112          MLS      r1,r1,r2,r0
000146  f1040030          ADD      r0,r4,#0x30
00014a  180d              ADDS     r5,r1,r0
;;;917    			val |= LD_DWORD(p) & 0xF0000000;
00014c  78e8              LDRB     r0,[r5,#3]
00014e  0600              LSLS     r0,r0,#24
000150  78a9              LDRB     r1,[r5,#2]
000152  ea404001          ORR      r0,r0,r1,LSL #16
000156  7869              LDRB     r1,[r5,#1]
000158  ea402001          ORR      r0,r0,r1,LSL #8
00015c  7829              LDRB     r1,[r5,#0]
00015e  4308              ORRS     r0,r0,r1
000160  f0004070          AND      r0,r0,#0xf0000000
000164  4307              ORRS     r7,r7,r0
;;;918    			ST_DWORD(p, val);
000166  702f              STRB     r7,[r5,#0]
000168  0a38              LSRS     r0,r7,#8
00016a  7068              STRB     r0,[r5,#1]
00016c  0c38              LSRS     r0,r7,#16
00016e  70a8              STRB     r0,[r5,#2]
000170  0e38              LSRS     r0,r7,#24
000172  70e8              STRB     r0,[r5,#3]
;;;919    			fs->wflag = 1;
000174  2001              MOVS     r0,#1
000176  7120              STRB     r0,[r4,#4]
;;;920    			break;
000178  e002              B        |L51.384|
                  |L51.378|
;;;921    
;;;922    		default :
;;;923    			res = FR_INT_ERR;
00017a  f04f0802          MOV      r8,#2
00017e  bf00              NOP                            ;890
                  |L51.384|
000180  bf00              NOP                            ;894
                  |L51.386|
;;;924    		}
;;;925    	}
;;;926    
;;;927    	return res;
000182  4640              MOV      r0,r8
;;;928    }
000184  e8bd9ff0          POP      {r4-r12,pc}
;;;929    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.putc_bfd||, CODE, READONLY, ALIGN=1

                  putc_bfd PROC
;;;4470   static
;;;4471   void putc_bfd (
000000  b5f8              PUSH     {r3-r7,lr}
;;;4472   	putbuff* pb,
;;;4473   	TCHAR c
;;;4474   )
;;;4475   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;4476   	UINT bw;
;;;4477   	int i;
;;;4478   
;;;4479   
;;;4480   	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
000006  bf00              NOP      
;;;4481   		putc_bfd(pb, '\r');
;;;4482   
;;;4483   	i = pb->idx;	/* Buffer write index (-1:error) */
000008  6865              LDR      r5,[r4,#4]
;;;4484   	if (i < 0) return;
00000a  2d00              CMP      r5,#0
00000c  da00              BGE      |L52.16|
                  |L52.14|
;;;4485   
;;;4486   #if _USE_LFN && _LFN_UNICODE
;;;4487   #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
;;;4488   	if (c < 0x80) {				/* 7-bit */
;;;4489   		pb->buf[i++] = (BYTE)c;
;;;4490   	} else {
;;;4491   		if (c < 0x800) {		/* 11-bit */
;;;4492   			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
;;;4493   		} else {				/* 16-bit */
;;;4494   			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
;;;4495   			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
;;;4496   		}
;;;4497   		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
;;;4498   	}
;;;4499   #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
;;;4500   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4501   	pb->buf[i++] = (BYTE)c;
;;;4502   #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
;;;4503   	pb->buf[i++] = (BYTE)c;
;;;4504   	pb->buf[i++] = (BYTE)(c >> 8);
;;;4505   #else							/* Write a character in ANSI/OEM */
;;;4506   	c = ff_convert(c, 0);	/* Unicode -> OEM */
;;;4507   	if (!c) c = '?';
;;;4508   	if (c >= 0x100)
;;;4509   		pb->buf[i++] = (BYTE)(c >> 8);
;;;4510   	pb->buf[i++] = (BYTE)c;
;;;4511   #endif
;;;4512   #else							/* Write a character without conversion */
;;;4513   	pb->buf[i++] = (BYTE)c;
;;;4514   #endif
;;;4515   
;;;4516   	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
;;;4517   		f_write(pb->fp, pb->buf, (UINT)i, &bw);
;;;4518   		i = (bw == (UINT)i) ? 0 : -1;
;;;4519   	}
;;;4520   	pb->idx = i;
;;;4521   	pb->nchr++;
;;;4522   }
00000e  bdf8              POP      {r3-r7,pc}
                  |L52.16|
000010  4628              MOV      r0,r5                 ;4513
000012  1c6d              ADDS     r5,r5,#1              ;4513
000014  f104010c          ADD      r1,r4,#0xc            ;4513
000018  540e              STRB     r6,[r1,r0]            ;4513
00001a  2d3d              CMP      r5,#0x3d              ;4516
00001c  db0c              BLT      |L52.56|
00001e  466b              MOV      r3,sp                 ;4517
000020  462a              MOV      r2,r5                 ;4517
000022  6820              LDR      r0,[r4,#0]            ;4517
000024  f7fffffe          BL       f_write
000028  9800              LDR      r0,[sp,#0]            ;4518
00002a  42a8              CMP      r0,r5                 ;4518
00002c  d101              BNE      |L52.50|
00002e  2000              MOVS     r0,#0                 ;4518
000030  e001              B        |L52.54|
                  |L52.50|
000032  f04f30ff          MOV      r0,#0xffffffff        ;4518
                  |L52.54|
000036  4605              MOV      r5,r0                 ;4518
                  |L52.56|
000038  6065              STR      r5,[r4,#4]            ;4520
00003a  68a0              LDR      r0,[r4,#8]            ;4521
00003c  1c40              ADDS     r0,r0,#1              ;4521
00003e  60a0              STR      r0,[r4,#8]            ;4521
000040  bf00              NOP      
000042  e7e4              B        |L52.14|
;;;4523   
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;938    static
;;;939    FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;940    	FATFS* fs,			/* File system object */
;;;941    	DWORD clst			/* Cluster# to remove a chain from */
;;;942    )
;;;943    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;944    	FRESULT res;
;;;945    	DWORD nxt;
;;;946    #if _USE_TRIM
;;;947    	DWORD scl = clst, ecl = clst, rt[2];
;;;948    #endif
;;;949    
;;;950    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L53.18|
00000c  6960              LDR      r0,[r4,#0x14]
00000e  42b0              CMP      r0,r6
000010  d801              BHI      |L53.22|
                  |L53.18|
;;;951    		res = FR_INT_ERR;
000012  2702              MOVS     r7,#2
000014  e027              B        |L53.102|
                  |L53.22|
;;;952    
;;;953    	} else {
;;;954    		res = FR_OK;
000016  2700              MOVS     r7,#0
;;;955    		while (clst < fs->n_fatent) {			/* Not a last link? */
000018  e021              B        |L53.94|
                  |L53.26|
;;;956    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       get_fat
000022  4605              MOV      r5,r0
;;;957    			if (nxt == 0) break;				/* Empty cluster? */
000024  b905              CBNZ     r5,|L53.40|
000026  e01d              B        |L53.100|
                  |L53.40|
;;;958    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L53.48|
00002c  2702              MOVS     r7,#2
00002e  e019              B        |L53.100|
                  |L53.48|
;;;959    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L53.56|
000034  2701              MOVS     r7,#1
000036  e015              B        |L53.100|
                  |L53.56|
;;;960    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000038  2200              MOVS     r2,#0
00003a  4631              MOV      r1,r6
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       put_fat
000042  4607              MOV      r7,r0
;;;961    			if (res != FR_OK) break;
000044  b107              CBZ      r7,|L53.72|
000046  e00d              B        |L53.100|
                  |L53.72|
;;;962    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
000048  6920              LDR      r0,[r4,#0x10]
00004a  1c40              ADDS     r0,r0,#1
00004c  b130              CBZ      r0,|L53.92|
;;;963    				fs->free_clust++;
00004e  6920              LDR      r0,[r4,#0x10]
000050  1c40              ADDS     r0,r0,#1
000052  6120              STR      r0,[r4,#0x10]
;;;964    				fs->fsi_flag |= 1;
000054  7960              LDRB     r0,[r4,#5]
000056  f0400001          ORR      r0,r0,#1
00005a  7160              STRB     r0,[r4,#5]
                  |L53.92|
;;;965    			}
;;;966    #if _USE_TRIM
;;;967    			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;968    				ecl = nxt;
;;;969    			} else {				/* End of contiguous clusters */ 
;;;970    				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;971    				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;972    				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
;;;973    				scl = ecl = nxt;
;;;974    			}
;;;975    #endif
;;;976    			clst = nxt;	/* Next cluster */
00005c  462e              MOV      r6,r5
                  |L53.94|
00005e  6960              LDR      r0,[r4,#0x14]         ;955
000060  42b0              CMP      r0,r6                 ;955
000062  d8da              BHI      |L53.26|
                  |L53.100|
000064  bf00              NOP                            ;957
                  |L53.102|
;;;977    		}
;;;978    	}
;;;979    
;;;980    	return res;
000066  4638              MOV      r0,r7
;;;981    }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;982    #endif
                          ENDP


                          AREA ||i.st_clust||, CODE, READONLY, ALIGN=1

                  st_clust PROC
;;;1253   static
;;;1254   void st_clust (
000000  7681              STRB     r1,[r0,#0x1a]
;;;1255   	BYTE* dir,	/* Pointer to the SFN entry */
;;;1256   	DWORD cl	/* Value to be set */
;;;1257   )
;;;1258   {
;;;1259   	ST_WORD(dir + DIR_FstClusLO, cl);
000002  0a0b              LSRS     r3,r1,#8
000004  76c3              STRB     r3,[r0,#0x1b]
;;;1260   	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
000006  0c0a              LSRS     r2,r1,#16
000008  7502              STRB     r2,[r0,#0x14]
00000a  0e0b              LSRS     r3,r1,#24
00000c  7543              STRB     r3,[r0,#0x15]
;;;1261   }
00000e  4770              BX       lr
;;;1262   #endif
                          ENDP


                          AREA ||i.sum_sfn||, CODE, READONLY, ALIGN=1

                  sum_sfn PROC
;;;1439   static
;;;1440   BYTE sum_sfn (
000000  b530              PUSH     {r4,r5,lr}
;;;1441   	const BYTE* dir		/* Pointer to the SFN entry */
;;;1442   )
;;;1443   {
000002  4601              MOV      r1,r0
;;;1444   	BYTE sum = 0;
000004  2000              MOVS     r0,#0
;;;1445   	UINT n = 11;
000006  220b              MOVS     r2,#0xb
;;;1446   
;;;1447   	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
000008  bf00              NOP      
                  |L55.10|
00000a  1043              ASRS     r3,r0,#1
00000c  eb0314c0          ADD      r4,r3,r0,LSL #7
000010  f8115b01          LDRB     r5,[r1],#1
000014  1963              ADDS     r3,r4,r5
000016  b2d8              UXTB     r0,r3
000018  1e53              SUBS     r3,r2,#1
00001a  1e1a              SUBS     r2,r3,#0
00001c  d1f5              BNE      |L55.10|
;;;1448   	return sum;
;;;1449   }
00001e  bd30              POP      {r4,r5,pc}
;;;1450   #endif
                          ENDP


                          AREA ||i.sync_fs||, CODE, READONLY, ALIGN=1

                  sync_fs PROC
;;;761    static
;;;762    FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
000000  b570              PUSH     {r4-r6,lr}
;;;763    	FATFS* fs		/* File system object */
;;;764    )
;;;765    {
000002  4604              MOV      r4,r0
;;;766    	FRESULT res;
;;;767    
;;;768    
;;;769    	res = sync_window(fs);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       sync_window
00000a  4605              MOV      r5,r0
;;;770    	if (res == FR_OK) {
00000c  2d00              CMP      r5,#0
00000e  d159              BNE      |L56.196|
;;;771    		/* Update FSInfo sector if needed */
;;;772    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
000010  7820              LDRB     r0,[r4,#0]
000012  2803              CMP      r0,#3
000014  d14f              BNE      |L56.182|
000016  7960              LDRB     r0,[r4,#5]
000018  2801              CMP      r0,#1
00001a  d14c              BNE      |L56.182|
;;;773    			/* Create FSInfo structure */
;;;774    			mem_set(fs->win, 0, SS(fs));
00001c  8962              LDRH     r2,[r4,#0xa]
00001e  2100              MOVS     r1,#0
000020  f1040030          ADD      r0,r4,#0x30
000024  f7fffffe          BL       mem_set
;;;775    			ST_WORD(fs->win + BS_55AA, 0xAA55);
000028  2155              MOVS     r1,#0x55
00002a  f884122e          STRB     r1,[r4,#0x22e]
00002e  21aa              MOVS     r1,#0xaa
000030  f884122f          STRB     r1,[r4,#0x22f]
;;;776    			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
000034  2052              MOVS     r0,#0x52
000036  f8840030          STRB     r0,[r4,#0x30]
00003a  2152              MOVS     r1,#0x52
00003c  2031              MOVS     r0,#0x31
00003e  5501              STRB     r1,[r0,r4]
000040  2161              MOVS     r1,#0x61
000042  2032              MOVS     r0,#0x32
000044  5501              STRB     r1,[r0,r4]
000046  2141              MOVS     r1,#0x41
000048  2033              MOVS     r0,#0x33
00004a  5501              STRB     r1,[r0,r4]
;;;777    			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
00004c  2172              MOVS     r1,#0x72
00004e  f8841214          STRB     r1,[r4,#0x214]
000052  f8841215          STRB     r1,[r4,#0x215]
000056  2141              MOVS     r1,#0x41
000058  f8841216          STRB     r1,[r4,#0x216]
00005c  2161              MOVS     r1,#0x61
00005e  f8841217          STRB     r1,[r4,#0x217]
;;;778    			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
000062  7c21              LDRB     r1,[r4,#0x10]
000064  f8841218          STRB     r1,[r4,#0x218]
000068  8a20              LDRH     r0,[r4,#0x10]
00006a  0a01              LSRS     r1,r0,#8
00006c  f8841219          STRB     r1,[r4,#0x219]
000070  6920              LDR      r0,[r4,#0x10]
000072  0c01              LSRS     r1,r0,#16
000074  f884121a          STRB     r1,[r4,#0x21a]
000078  6920              LDR      r0,[r4,#0x10]
00007a  0e01              LSRS     r1,r0,#24
00007c  f884121b          STRB     r1,[r4,#0x21b]
;;;779    			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
000080  7b21              LDRB     r1,[r4,#0xc]
000082  f884121c          STRB     r1,[r4,#0x21c]
000086  89a0              LDRH     r0,[r4,#0xc]
000088  0a01              LSRS     r1,r0,#8
00008a  f884121d          STRB     r1,[r4,#0x21d]
00008e  68e0              LDR      r0,[r4,#0xc]
000090  0c01              LSRS     r1,r0,#16
000092  f884121e          STRB     r1,[r4,#0x21e]
000096  68e0              LDR      r0,[r4,#0xc]
000098  0e01              LSRS     r1,r0,#24
00009a  f884121f          STRB     r1,[r4,#0x21f]
;;;780    			/* Write it into the FSInfo sector */
;;;781    			fs->winsect = fs->volbase + 1;
00009e  69e0              LDR      r0,[r4,#0x1c]
0000a0  1c40              ADDS     r0,r0,#1
0000a2  62e0              STR      r0,[r4,#0x2c]
;;;782    			disk_write(fs->drv, fs->win, fs->winsect, 1);
0000a4  7860              LDRB     r0,[r4,#1]
0000a6  2301              MOVS     r3,#1
0000a8  f1040130          ADD      r1,r4,#0x30
0000ac  6ae2              LDR      r2,[r4,#0x2c]
0000ae  f7fffffe          BL       disk_write
;;;783    			fs->fsi_flag = 0;
0000b2  2000              MOVS     r0,#0
0000b4  7160              STRB     r0,[r4,#5]
                  |L56.182|
;;;784    		}
;;;785    		/* Make sure that no pending write process in the physical drive */
;;;786    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0000b6  7860              LDRB     r0,[r4,#1]
0000b8  2200              MOVS     r2,#0
0000ba  4611              MOV      r1,r2
0000bc  f7fffffe          BL       disk_ioctl
0000c0  b100              CBZ      r0,|L56.196|
;;;787    			res = FR_DISK_ERR;
0000c2  2501              MOVS     r5,#1
                  |L56.196|
;;;788    	}
;;;789    
;;;790    	return res;
0000c4  4628              MOV      r0,r5
;;;791    }
0000c6  bd70              POP      {r4-r6,pc}
;;;792    #endif
                          ENDP


                          AREA ||i.sync_window||, CODE, READONLY, ALIGN=1

                  sync_window PROC
;;;701    static
;;;702    FRESULT sync_window (	/* FR_OK:succeeded, !=0:error */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;703    	FATFS* fs		/* File system object */
;;;704    )
;;;705    {
000004  4604              MOV      r4,r0
;;;706    	DWORD wsect;
;;;707    	UINT nf;
;;;708    	FRESULT res = FR_OK;
000006  2700              MOVS     r7,#0
;;;709    
;;;710    
;;;711    	if (fs->wflag) {	/* Write back the sector if it is dirty */
000008  7920              LDRB     r0,[r4,#4]
00000a  b1f8              CBZ      r0,|L57.76|
;;;712    		wsect = fs->winsect;	/* Current sector number */
00000c  6ae5              LDR      r5,[r4,#0x2c]
;;;713    		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
00000e  7860              LDRB     r0,[r4,#1]
000010  2301              MOVS     r3,#1
000012  462a              MOV      r2,r5
000014  f1040130          ADD      r1,r4,#0x30
000018  f7fffffe          BL       disk_write
00001c  b108              CBZ      r0,|L57.34|
;;;714    			res = FR_DISK_ERR;
00001e  2701              MOVS     r7,#1
000020  e014              B        |L57.76|
                  |L57.34|
;;;715    		} else {
;;;716    			fs->wflag = 0;
000022  2000              MOVS     r0,#0
000024  7120              STRB     r0,[r4,#4]
;;;717    			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
000026  6a20              LDR      r0,[r4,#0x20]
000028  1a28              SUBS     r0,r5,r0
00002a  69a1              LDR      r1,[r4,#0x18]
00002c  4288              CMP      r0,r1
00002e  d20d              BCS      |L57.76|
;;;718    				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
000030  78e6              LDRB     r6,[r4,#3]
000032  e009              B        |L57.72|
                  |L57.52|
;;;719    					wsect += fs->fsize;
000034  69a0              LDR      r0,[r4,#0x18]
000036  4405              ADD      r5,r5,r0
;;;720    					disk_write(fs->drv, fs->win, wsect, 1);
000038  7860              LDRB     r0,[r4,#1]
00003a  2301              MOVS     r3,#1
00003c  462a              MOV      r2,r5
00003e  f1040130          ADD      r1,r4,#0x30
000042  f7fffffe          BL       disk_write
000046  1e76              SUBS     r6,r6,#1              ;718
                  |L57.72|
000048  2e02              CMP      r6,#2                 ;718
00004a  d2f3              BCS      |L57.52|
                  |L57.76|
;;;721    				}
;;;722    			}
;;;723    		}
;;;724    	}
;;;725    	return res;
00004c  4638              MOV      r0,r7
;;;726    }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;727    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;2373   static
;;;2374   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;2375   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2376   )
;;;2377   {
000002  4605              MOV      r5,r0
;;;2378   	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
000004  462c              MOV      r4,r5
;;;2379   
;;;2380   
;;;2381   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
000006  b184              CBZ      r4,|L58.42|
000008  6820              LDR      r0,[r4,#0]
00000a  b170              CBZ      r0,|L58.42|
00000c  6820              LDR      r0,[r4,#0]
00000e  7800              LDRB     r0,[r0,#0]
000010  b158              CBZ      r0,|L58.42|
000012  6820              LDR      r0,[r4,#0]
000014  88c0              LDRH     r0,[r0,#6]
000016  88a1              LDRH     r1,[r4,#4]
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L58.42|
00001c  6821              LDR      r1,[r4,#0]
00001e  7848              LDRB     r0,[r1,#1]
000020  f7fffffe          BL       disk_status
000024  f0000001          AND      r0,r0,#1
000028  b108              CBZ      r0,|L58.46|
                  |L58.42|
;;;2382   		return FR_INVALID_OBJECT;
00002a  2009              MOVS     r0,#9
                  |L58.44|
;;;2383   
;;;2384   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2385   
;;;2386   	return FR_OK;
;;;2387   }
00002c  bd70              POP      {r4-r6,pc}
                  |L58.46|
00002e  2000              MOVS     r0,#0                 ;2386
000030  e7fc              B        |L58.44|
;;;2388   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  ExCvt
000000  809a4541          DCB      0x80,0x9a,0x45,0x41
000004  8e418f80          DCB      0x8e,0x41,0x8f,0x80
000008  45454549          DCB      0x45,0x45,0x45,0x49
00000c  49498e8f          DCB      0x49,0x49,0x8e,0x8f
000010  9092924f          DCB      0x90,0x92,0x92,0x4f
000014  994f5555          DCB      0x99,0x4f,0x55,0x55
000018  59999a9b          DCB      0x59,0x99,0x9a,0x9b
00001c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
000020  41494f55          DCB      0x41,0x49,0x4f,0x55
000024  a5a5a6a7          DCB      0xa5,0xa5,0xa6,0xa7
000028  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00002c  acadaeaf          DCB      0xac,0xad,0xae,0xaf
000030  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000034  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000038  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00003c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000040  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000044  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000048  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00004c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000050  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000054  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000058  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00005c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
000060  e0e1e2e3          DCB      0xe0,0xe1,0xe2,0xe3
000064  e4e5e6e7          DCB      0xe4,0xe5,0xe6,0xe7
000068  e8e9eaeb          DCB      0xe8,0xe9,0xea,0xeb
00006c  ecedeeef          DCB      0xec,0xed,0xee,0xef
000070  f0f1f2f3          DCB      0xf0,0xf1,0xf2,0xf3
000074  f4f5f6f7          DCB      0xf4,0xf5,0xf6,0xf7
000078  f8f9fafb          DCB      0xf8,0xf9,0xfa,0xfb
00007c  fcfdfeff          DCB      0xfc,0xfd,0xfe,0xff
                  LfnOfs
000080  01030507          DCB      0x01,0x03,0x05,0x07
000084  090e1012          DCB      0x09,0x0e,0x10,0x12
000088  1416181c          DCB      0x14,0x16,0x18,0x1c
00008c  1e00              DCB      0x1e,0x00
                  vst
00008e  0400              DCW      0x0400
000090  02000100          DCW      0x0200,0x0100
000094  00800040          DCW      0x0080,0x0040
000098  00200010          DCW      0x0020,0x0010
00009c  00080004          DCW      0x0008,0x0004
0000a0  00020000          DCW      0x0002,0x0000
                  ||cst||
0000a4  80004000          DCW      0x8000,0x4000
0000a8  20001000          DCW      0x2000,0x1000
0000ac  08004000          DCW      0x0800,0x4000
0000b0  20001000          DCW      0x2000,0x1000
0000b4  08000400          DCW      0x0800,0x0400
0000b8  0200              DCW      0x0200

                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          %        8
                  Fsid
000008  0000              DCB      0x00,0x00
