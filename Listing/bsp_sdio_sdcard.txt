; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\bsp_sdio_sdcard.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_sdio_sdcard.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\bsp_sdio_sdcard.crf ..\..\User\sdio\bsp_sdio_sdcard.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=1

                  CmdError PROC
;;;2147    */
;;;2148   static SD_Error CmdError(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2149   {
;;;2150     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;2151     uint32_t timeout;
;;;2152   
;;;2153     timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
000004  f44f3480          MOV      r4,#0x10000
;;;2154   
;;;2155   	 /*检查命令是否已发送*/
;;;2156     while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))	
000008  e000              B        |L1.12|
                  |L1.10|
;;;2157     {
;;;2158       timeout--;
00000a  1e64              SUBS     r4,r4,#1
                  |L1.12|
00000c  b124              CBZ      r4,|L1.24|
00000e  2080              MOVS     r0,#0x80              ;2156
000010  f7fffffe          BL       SDIO_GetFlagStatus
000014  2800              CMP      r0,#0                 ;2156
000016  d0f8              BEQ      |L1.10|
                  |L1.24|
;;;2159     }
;;;2160   
;;;2161     if (timeout == 0)
000018  b914              CBNZ     r4,|L1.32|
;;;2162     {
;;;2163       errorstatus = SD_CMD_RSP_TIMEOUT;
00001a  2503              MOVS     r5,#3
;;;2164       return(errorstatus);
00001c  4628              MOV      r0,r5
                  |L1.30|
;;;2165     }
;;;2166   
;;;2167     /*!< Clear all the static flags */
;;;2168     SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除静态标志位
;;;2169   
;;;2170     return(errorstatus);
;;;2171   }
00001e  bd70              POP      {r4-r6,pc}
                  |L1.32|
000020  f24050ff          MOV      r0,#0x5ff             ;2168
000024  f7fffffe          BL       SDIO_ClearFlag
000028  4628              MOV      r0,r5                 ;2170
00002a  e7f8              B        |L1.30|
;;;2172   
                          ENDP


                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;2220    */
;;;2221   static SD_Error CmdResp1Error(uint8_t cmd) //传入的参数有什么用？
000000  4601              MOV      r1,r0
;;;2222   {		   
;;;2223   	/*不是这些状态就等待	*/
;;;2224     while (!(SDIO->STA & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000002  bf00              NOP      
                  |L2.4|
000004  4807              LDR      r0,|L2.36|
000006  6b40              LDR      r0,[r0,#0x34]
000008  f0000045          AND      r0,r0,#0x45
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L2.4|
;;;2225     {
;;;2226     }
;;;2227   
;;;2228     SDIO->ICR = SDIO_STATIC_FLAGS;	//清中断标志
000010  f24050ff          MOV      r0,#0x5ff
000014  4a03              LDR      r2,|L2.36|
000016  6390              STR      r0,[r2,#0x38]
;;;2229   
;;;2230     return (SD_Error)(SDIO->RESP1 &  SD_OCR_ERRORBITS);		//判断是否在供电范围
000018  4610              MOV      r0,r2
00001a  6940              LDR      r0,[r0,#0x14]
00001c  2208              MOVS     r2,#8
00001e  4010              ANDS     r0,r0,r2
000020  b2c0              UXTB     r0,r0
;;;2231   }
000022  4770              BX       lr
;;;2232   
                          ENDP

                  |L2.36|
                          DCD      0x40018000

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;2267    */
;;;2268   static SD_Error CmdResp2Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2269   {
;;;2270     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;2271     uint32_t status;
;;;2272   
;;;2273     status = SDIO->STA;
000004  4810              LDR      r0,|L3.72|
000006  6b44              LDR      r4,[r0,#0x34]
;;;2274   
;;;2275     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000008  e001              B        |L3.14|
                  |L3.10|
;;;2276     {
;;;2277       status = SDIO->STA;
00000a  480f              LDR      r0,|L3.72|
00000c  6b44              LDR      r4,[r0,#0x34]
                  |L3.14|
00000e  f0040045          AND      r0,r4,#0x45           ;2275
000012  2800              CMP      r0,#0                 ;2275
000014  d0f9              BEQ      |L3.10|
;;;2278     }
;;;2279   
;;;2280     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L3.40|
;;;2281     {
;;;2282       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;2283       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2284       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L3.38|
;;;2285     }
;;;2286     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2287     {
;;;2288       errorstatus = SD_CMD_CRC_FAIL;
;;;2289       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2290       return(errorstatus);
;;;2291     }
;;;2292   
;;;2293     /*!< Clear all the static flags */
;;;2294     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2295   
;;;2296     return(errorstatus);
;;;2297   }
000026  bd70              POP      {r4-r6,pc}
                  |L3.40|
000028  f0040001          AND      r0,r4,#1              ;2286
00002c  b128              CBZ      r0,|L3.58|
00002e  2501              MOVS     r5,#1                 ;2288
000030  2001              MOVS     r0,#1                 ;2289
000032  f7fffffe          BL       SDIO_ClearFlag
000036  4628              MOV      r0,r5                 ;2290
000038  e7f5              B        |L3.38|
                  |L3.58|
00003a  f24050ff          MOV      r0,#0x5ff             ;2294
00003e  f7fffffe          BL       SDIO_ClearFlag
000042  4628              MOV      r0,r5                 ;2296
000044  e7ef              B        |L3.38|
;;;2298   
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x40018000

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;2238    */
;;;2239   static SD_Error CmdResp3Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2240   {
;;;2241     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;2242     uint32_t status;
;;;2243   
;;;2244     status = SDIO->STA;
000004  480b              LDR      r0,|L4.52|
000006  6b44              LDR      r4,[r0,#0x34]
;;;2245   
;;;2246     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000008  e001              B        |L4.14|
                  |L4.10|
;;;2247     {
;;;2248       status = SDIO->STA;
00000a  480a              LDR      r0,|L4.52|
00000c  6b44              LDR      r4,[r0,#0x34]
                  |L4.14|
00000e  f0040045          AND      r0,r4,#0x45           ;2246
000012  2800              CMP      r0,#0                 ;2246
000014  d0f9              BEQ      |L4.10|
;;;2249     }
;;;2250   
;;;2251     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L4.40|
;;;2252     {
;;;2253       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;2254       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2255       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L4.38|
;;;2256     }
;;;2257     /*!< Clear all the static flags */
;;;2258     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2259     return(errorstatus);
;;;2260   }
000026  bd70              POP      {r4-r6,pc}
                  |L4.40|
000028  f24050ff          MOV      r0,#0x5ff             ;2258
00002c  f7fffffe          BL       SDIO_ClearFlag
000030  4628              MOV      r0,r5                 ;2259
000032  e7f8              B        |L4.38|
;;;2261   
                          ENDP

                  |L4.52|
                          DCD      0x40018000

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;2305    */
;;;2306   static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2307   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;2308     SD_Error errorstatus = SD_OK;
000008  f04f0800          MOV      r8,#0
;;;2309     uint32_t status;
;;;2310     uint32_t response_r1;
;;;2311   
;;;2312     status = SDIO->STA;
00000c  4822              LDR      r0,|L5.152|
00000e  6b45              LDR      r5,[r0,#0x34]
;;;2313   
;;;2314     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000010  e001              B        |L5.22|
                  |L5.18|
;;;2315     {
;;;2316       status = SDIO->STA;
000012  4821              LDR      r0,|L5.152|
000014  6b45              LDR      r5,[r0,#0x34]
                  |L5.22|
000016  f0050045          AND      r0,r5,#0x45           ;2314
00001a  2800              CMP      r0,#0                 ;2314
00001c  d0f9              BEQ      |L5.18|
;;;2317     }
;;;2318   
;;;2319     if (status & SDIO_FLAG_CTIMEOUT)
00001e  f0050004          AND      r0,r5,#4
000022  b138              CBZ      r0,|L5.52|
;;;2320     {
;;;2321       errorstatus = SD_CMD_RSP_TIMEOUT;
000024  f04f0803          MOV      r8,#3
;;;2322       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;2323       return(errorstatus);
00002e  4640              MOV      r0,r8
                  |L5.48|
;;;2324     }
;;;2325     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2326     {
;;;2327       errorstatus = SD_CMD_CRC_FAIL;
;;;2328       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2329       return(errorstatus);
;;;2330     }
;;;2331   
;;;2332     /*!< Check response received is of desired command */
;;;2333     if (SDIO_GetCommandResponse() != cmd)		 //检测是否接收到正常命令
;;;2334     {
;;;2335       errorstatus = SD_ILLEGAL_CMD;
;;;2336       return(errorstatus);
;;;2337     }
;;;2338   
;;;2339     /*!< Clear all the static flags */
;;;2340     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2341   
;;;2342     /*!< We have received response, retrieve it.  */
;;;2343     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2344   
;;;2345   	/*以下状态全为0表明成功接收到card返回的rca */
;;;2346     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;2347     {
;;;2348       *prca = (uint16_t) (response_r1 >> 16);//右移16位，就是接收到的返回rca
;;;2349       return(errorstatus);
;;;2350     }
;;;2351   
;;;2352     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;2353     {
;;;2354       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2355     }
;;;2356   
;;;2357     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;2358     {
;;;2359       return(SD_ILLEGAL_CMD);
;;;2360     }
;;;2361   
;;;2362     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;2363     {
;;;2364       return(SD_COM_CRC_FAILED);
;;;2365     }
;;;2366   
;;;2367     return(errorstatus);
;;;2368   }	   
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L5.52|
000034  f0050001          AND      r0,r5,#1              ;2325
000038  b130              CBZ      r0,|L5.72|
00003a  f04f0801          MOV      r8,#1                 ;2327
00003e  2001              MOVS     r0,#1                 ;2328
000040  f7fffffe          BL       SDIO_ClearFlag
000044  4640              MOV      r0,r8                 ;2329
000046  e7f3              B        |L5.48|
                  |L5.72|
000048  f7fffffe          BL       SDIO_GetCommandResponse
00004c  42b0              CMP      r0,r6                 ;2333
00004e  d003              BEQ      |L5.88|
000050  f04f0810          MOV      r8,#0x10              ;2335
000054  4640              MOV      r0,r8                 ;2336
000056  e7eb              B        |L5.48|
                  |L5.88|
000058  f24050ff          MOV      r0,#0x5ff             ;2340
00005c  f7fffffe          BL       SDIO_ClearFlag
000060  2000              MOVS     r0,#0                 ;2343
000062  f7fffffe          BL       SDIO_GetResponse
000066  4604              MOV      r4,r0                 ;2343
000068  f4044060          AND      r0,r4,#0xe000         ;2346
00006c  b918              CBNZ     r0,|L5.118|
00006e  0c20              LSRS     r0,r4,#16             ;2348
000070  8038              STRH     r0,[r7,#0]            ;2348
000072  4640              MOV      r0,r8                 ;2349
000074  e7dc              B        |L5.48|
                  |L5.118|
000076  f4045000          AND      r0,r4,#0x2000         ;2352
00007a  b108              CBZ      r0,|L5.128|
00007c  2013              MOVS     r0,#0x13              ;2354
00007e  e7d7              B        |L5.48|
                  |L5.128|
000080  f4044080          AND      r0,r4,#0x4000         ;2357
000084  b108              CBZ      r0,|L5.138|
000086  2010              MOVS     r0,#0x10              ;2359
000088  e7d2              B        |L5.48|
                  |L5.138|
00008a  f4044000          AND      r0,r4,#0x8000         ;2362
00008e  b108              CBZ      r0,|L5.148|
000090  200f              MOVS     r0,#0xf               ;2364
000092  e7cd              B        |L5.48|
                  |L5.148|
000094  4640              MOV      r0,r8                 ;2367
000096  e7cb              B        |L5.48|
;;;2369   
                          ENDP

                  |L5.152|
                          DCD      0x40018000

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;2179    */
;;;2180   static SD_Error CmdResp7Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2181   {
;;;2182     SD_Error errorstatus = SD_OK;
000002  2600              MOVS     r6,#0
;;;2183     uint32_t status;
;;;2184     uint32_t timeout = SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;2185   
;;;2186     status = SDIO->STA;	//读取SDIO状态寄存器 ，此状态寄存器是stm32的寄存器
000008  480f              LDR      r0,|L6.72|
00000a  6b44              LDR      r4,[r0,#0x34]
;;;2187    
;;;2188     /* Command response received (CRC check failed) ：Command response received (CRC check passed)：Command response timeout */
;;;2189   
;;;2190     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
00000c  e002              B        |L6.20|
                  |L6.14|
;;;2191     {
;;;2192       timeout--;
00000e  1e6d              SUBS     r5,r5,#1
;;;2193       status = SDIO->STA;		  
000010  480d              LDR      r0,|L6.72|
000012  6b44              LDR      r4,[r0,#0x34]
                  |L6.20|
000014  f0040045          AND      r0,r4,#0x45           ;2190
000018  b908              CBNZ     r0,|L6.30|
00001a  2d00              CMP      r5,#0                 ;2190
00001c  d1f7              BNE      |L6.14|
                  |L6.30|
;;;2194     }
;;;2195   	 //卡不响应cmd8
;;;2196     if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
00001e  b115              CBZ      r5,|L6.38|
000020  f0040004          AND      r0,r4,#4
000024  b128              CBZ      r0,|L6.50|
                  |L6.38|
;;;2197     {
;;;2198       /*!< Card is not V2.0 complient or card does not support the set voltage range */
;;;2199       errorstatus = SD_CMD_RSP_TIMEOUT;
000026  2603              MOVS     r6,#3
;;;2200       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;2201       return(errorstatus);
00002e  4630              MOV      r0,r6
                  |L6.48|
;;;2202     }
;;;2203   
;;;2204     if (status & SDIO_FLAG_CMDREND)
;;;2205     {
;;;2206       /*!< Card is SD V2.0 compliant */
;;;2207       errorstatus = SD_OK;
;;;2208       SDIO_ClearFlag(SDIO_FLAG_CMDREND);
;;;2209       return(errorstatus);
;;;2210     }
;;;2211     return(errorstatus);
;;;2212   }
000030  bd70              POP      {r4-r6,pc}
                  |L6.50|
000032  f0040040          AND      r0,r4,#0x40           ;2204
000036  b128              CBZ      r0,|L6.68|
000038  2600              MOVS     r6,#0                 ;2207
00003a  2040              MOVS     r0,#0x40              ;2208
00003c  f7fffffe          BL       SDIO_ClearFlag
000040  4630              MOV      r0,r6                 ;2209
000042  e7f5              B        |L6.48|
                  |L6.68|
000044  4630              MOV      r0,r6                 ;2211
000046  e7f3              B        |L6.48|
;;;2213   
                          ENDP

                  |L6.72|
                          DCD      0x40018000

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;2654    */
;;;2655   static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2656   { 
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;2657   
;;;2658     uint32_t index = 0;
000008  2600              MOVS     r6,#0
;;;2659     SD_Error errorstatus = SD_OK;
00000a  2400              MOVS     r4,#0
;;;2660     uint32_t tempscr[2] = {0, 0};	
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
;;;2661   
;;;2662     /*!< Set Block Size To 8 Bytes */ 
;;;2663     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;	 //块大小如果是sdhc卡是无法改变块大小的	//原参数8
000012  2008              MOVS     r0,#8
000014  495d              LDR      r1,|L7.396|
000016  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2664     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN; //	 cmd16
000018  2010              MOVS     r0,#0x10
00001a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2665     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r1
00001c  2040              MOVS     r0,#0x40
00001e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2666     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000020  2000              MOVS     r0,#0
000022  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2667     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000024  f44f6080          MOV      r0,#0x400
000028  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2668     SDIO_SendCommand(&SDIO_CmdInitStructure);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       SDIO_SendCommand
;;;2669   
;;;2670     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
000036  4604              MOV      r4,r0
;;;2671   
;;;2672     if (errorstatus != SD_OK)
000038  b114              CBZ      r4,|L7.64|
;;;2673     {
;;;2674       return(errorstatus);
00003a  4620              MOV      r0,r4
                  |L7.60|
;;;2675     }
;;;2676   
;;;2677     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2678     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16; 
;;;2679     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2680     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2681     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2682     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2683     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2684   
;;;2685     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2686   
;;;2687     if (errorstatus != SD_OK)
;;;2688     {
;;;2689       return(errorstatus);
;;;2690     }
;;;2691     /*设置数据接收寄存器*/
;;;2692     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2693     SDIO_DataInitStructure.SDIO_DataLength = 8;  //8byte,64位
;;;2694     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b  ;  //块大小8byte 
;;;2695     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2696     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2697     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2698     SDIO_DataConfig(&SDIO_DataInitStructure);			 
;;;2699   
;;;2700     /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;2701     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;2702     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
;;;2703     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r1
;;;2704     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2705     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2706     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2707   
;;;2708     errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;2709   
;;;2710     if (errorstatus != SD_OK)
;;;2711     {
;;;2712       return(errorstatus);
;;;2713     }			   
;;;2714      
;;;2715     /*等待接收数据 */
;;;2716     /*不是这些情况就循环*/																						  
;;;2717    /*上溢出错	  //数据crc失败		//数据超时	  //已接收数据块，crc检测成功	//没有在所有数据线上检测到起始信号*/
;;;2718    while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND| SDIO_FLAG_STBITERR)))
;;;2719      {	   		
;;;2720      if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)	//接收到的数据是否可用
;;;2721   	{  	
;;;2722        	 	*(tempscr + index) = SDIO_ReadData();  
;;;2723   			   index++;	
;;;2724   
;;;2725   		/*   //add。这段在官方源码没有加判断            */		     
;;;2726   		  	if(index > 1 ) 
;;;2727   				break;
;;;2728       }
;;;2729   	
;;;2730     }
;;;2731   
;;;2732     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2733     {
;;;2734       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2735       errorstatus = SD_DATA_TIMEOUT;
;;;2736       return(errorstatus);
;;;2737     }
;;;2738     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2739     {
;;;2740       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2741       errorstatus = SD_DATA_CRC_FAIL;
;;;2742       return(errorstatus);
;;;2743     }
;;;2744     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2745     {
;;;2746       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2747       errorstatus = SD_RX_OVERRUN;
;;;2748       return(errorstatus);
;;;2749     }
;;;2750     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2751     {
;;;2752       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2753       errorstatus = SD_START_BIT_ERR;
;;;2754       return(errorstatus);
;;;2755     }
;;;2756   
;;;2757     /*!< Clear all the static flags */
;;;2758     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2759   
;;;2760     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;2761   
;;;2762     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;2763   
;;;2764     return(errorstatus);
;;;2765   }
00003c  e8bd81fc          POP      {r2-r8,pc}
                  |L7.64|
000040  4853              LDR      r0,|L7.400|
000042  8800              LDRH     r0,[r0,#0]            ;2678  ; RCA
000044  0400              LSLS     r0,r0,#16             ;2678
000046  4951              LDR      r1,|L7.396|
000048  6008              STR      r0,[r1,#0]            ;2678  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;2679
00004c  6048              STR      r0,[r1,#4]            ;2679  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;2680
000050  6088              STR      r0,[r1,#8]            ;2680  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;2681
000054  60c8              STR      r0,[r1,#0xc]          ;2681  ; SDIO_CmdInitStructure
000056  f44f6080          MOV      r0,#0x400             ;2682
00005a  6108              STR      r0,[r1,#0x10]         ;2682  ; SDIO_CmdInitStructure
00005c  4608              MOV      r0,r1                 ;2683
00005e  f7fffffe          BL       SDIO_SendCommand
000062  2037              MOVS     r0,#0x37              ;2685
000064  f7fffffe          BL       CmdResp1Error
000068  4604              MOV      r4,r0                 ;2685
00006a  b10c              CBZ      r4,|L7.112|
00006c  4620              MOV      r0,r4                 ;2689
00006e  e7e5              B        |L7.60|
                  |L7.112|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2692
000074  4947              LDR      r1,|L7.404|
000076  6008              STR      r0,[r1,#0]            ;2692  ; SDIO_DataInitStructure
000078  2008              MOVS     r0,#8                 ;2693
00007a  6048              STR      r0,[r1,#4]            ;2693  ; SDIO_DataInitStructure
00007c  2030              MOVS     r0,#0x30              ;2694
00007e  6088              STR      r0,[r1,#8]            ;2694  ; SDIO_DataInitStructure
000080  2002              MOVS     r0,#2                 ;2695
000082  60c8              STR      r0,[r1,#0xc]          ;2695  ; SDIO_DataInitStructure
000084  2000              MOVS     r0,#0                 ;2696
000086  6108              STR      r0,[r1,#0x10]         ;2696  ; SDIO_DataInitStructure
000088  2001              MOVS     r0,#1                 ;2697
00008a  6148              STR      r0,[r1,#0x14]         ;2697  ; SDIO_DataInitStructure
00008c  4608              MOV      r0,r1                 ;2698
00008e  f7fffffe          BL       SDIO_DataConfig
000092  2000              MOVS     r0,#0                 ;2701
000094  493d              LDR      r1,|L7.396|
000096  6008              STR      r0,[r1,#0]            ;2701  ; SDIO_CmdInitStructure
000098  2033              MOVS     r0,#0x33              ;2702
00009a  6048              STR      r0,[r1,#4]            ;2702  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;2703
00009e  6088              STR      r0,[r1,#8]            ;2703  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;2704
0000a2  60c8              STR      r0,[r1,#0xc]          ;2704  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;2705
0000a8  6108              STR      r0,[r1,#0x10]         ;2705  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;2706
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2033              MOVS     r0,#0x33              ;2708
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4604              MOV      r4,r0                 ;2708
0000b8  b10c              CBZ      r4,|L7.190|
0000ba  4620              MOV      r0,r4                 ;2712
0000bc  e7be              B        |L7.60|
                  |L7.190|
0000be  e00c              B        |L7.218|
                  |L7.192|
0000c0  f44f1000          MOV      r0,#0x200000          ;2720
0000c4  f7fffffe          BL       SDIO_GetFlagStatus
0000c8  b138              CBZ      r0,|L7.218|
0000ca  f7fffffe          BL       SDIO_ReadData
0000ce  f84d0026          STR      r0,[sp,r6,LSL #2]     ;2722
0000d2  1c76              ADDS     r6,r6,#1              ;2723
0000d4  2e01              CMP      r6,#1                 ;2726
0000d6  d900              BLS      |L7.218|
0000d8  e006              B        |L7.232|
                  |L7.218|
0000da  482f              LDR      r0,|L7.408|
0000dc  6b40              LDR      r0,[r0,#0x34]         ;2718
0000de  f240612a          MOV      r1,#0x62a             ;2718
0000e2  4008              ANDS     r0,r0,r1              ;2718
0000e4  2800              CMP      r0,#0                 ;2718
0000e6  d0eb              BEQ      |L7.192|
                  |L7.232|
0000e8  bf00              NOP                            ;2727
0000ea  2008              MOVS     r0,#8                 ;2732
0000ec  f7fffffe          BL       SDIO_GetFlagStatus
0000f0  b128              CBZ      r0,|L7.254|
0000f2  2008              MOVS     r0,#8                 ;2734
0000f4  f7fffffe          BL       SDIO_ClearFlag
0000f8  2404              MOVS     r4,#4                 ;2735
0000fa  4620              MOV      r0,r4                 ;2736
0000fc  e79e              B        |L7.60|
                  |L7.254|
0000fe  2002              MOVS     r0,#2                 ;2738
000100  f7fffffe          BL       SDIO_GetFlagStatus
000104  b128              CBZ      r0,|L7.274|
000106  2002              MOVS     r0,#2                 ;2740
000108  f7fffffe          BL       SDIO_ClearFlag
00010c  2402              MOVS     r4,#2                 ;2741
00010e  4620              MOV      r0,r4                 ;2742
000110  e794              B        |L7.60|
                  |L7.274|
000112  2020              MOVS     r0,#0x20              ;2744
000114  f7fffffe          BL       SDIO_GetFlagStatus
000118  b128              CBZ      r0,|L7.294|
00011a  2020              MOVS     r0,#0x20              ;2746
00011c  f7fffffe          BL       SDIO_ClearFlag
000120  2406              MOVS     r4,#6                 ;2747
000122  4620              MOV      r0,r4                 ;2748
000124  e78a              B        |L7.60|
                  |L7.294|
000126  f44f7000          MOV      r0,#0x200             ;2750
00012a  f7fffffe          BL       SDIO_GetFlagStatus
00012e  b130              CBZ      r0,|L7.318|
000130  f44f7000          MOV      r0,#0x200             ;2752
000134  f7fffffe          BL       SDIO_ClearFlag
000138  2407              MOVS     r4,#7                 ;2753
00013a  4620              MOV      r0,r4                 ;2754
00013c  e77e              B        |L7.60|
                  |L7.318|
00013e  f24050ff          MOV      r0,#0x5ff             ;2758
000142  f7fffffe          BL       SDIO_ClearFlag
000146  9800              LDR      r0,[sp,#0]            ;2760
000148  0600              LSLS     r0,r0,#24             ;2760
00014a  9900              LDR      r1,[sp,#0]            ;2760
00014c  f401417f          AND      r1,r1,#0xff00         ;2760
000150  ea402001          ORR      r0,r0,r1,LSL #8       ;2760
000154  9900              LDR      r1,[sp,#0]            ;2760
000156  f401017f          AND      r1,r1,#0xff0000       ;2760
00015a  ea402011          ORR      r0,r0,r1,LSR #8       ;2760
00015e  9900              LDR      r1,[sp,#0]            ;2760
000160  ea406011          ORR      r0,r0,r1,LSR #24      ;2760
000164  6068              STR      r0,[r5,#4]            ;2760
000166  9801              LDR      r0,[sp,#4]            ;2762
000168  0600              LSLS     r0,r0,#24             ;2762
00016a  9901              LDR      r1,[sp,#4]            ;2762
00016c  f401417f          AND      r1,r1,#0xff00         ;2762
000170  ea402001          ORR      r0,r0,r1,LSL #8       ;2762
000174  9901              LDR      r1,[sp,#4]            ;2762
000176  f401017f          AND      r1,r1,#0xff0000       ;2762
00017a  ea402011          ORR      r0,r0,r1,LSR #8       ;2762
00017e  9901              LDR      r1,[sp,#4]            ;2762
000180  ea406011          ORR      r0,r0,r1,LSR #24      ;2762
000184  6028              STR      r0,[r5,#0]            ;2762
000186  4620              MOV      r0,r4                 ;2764
000188  e758              B        |L7.60|
;;;2766   
                          ENDP

00018a  0000              DCW      0x0000
                  |L7.396|
                          DCD      SDIO_CmdInitStructure
                  |L7.400|
                          DCD      ||RCA||
                  |L7.404|
                          DCD      SDIO_DataInitStructure
                  |L7.408|
                          DCD      0x40018000

                          AREA ||i.GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  GPIO_Configuration PROC
;;;445     */
;;;446    static void GPIO_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;447    {
;;;448      GPIO_InitTypeDef  GPIO_InitStructure;
;;;449    
;;;450      /*!< GPIOC and GPIOD Periph clock enable */
;;;451      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD , ENABLE);
000002  2101              MOVS     r1,#1
000004  2030              MOVS     r0,#0x30
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;452    
;;;453      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;454      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00000a  f44f50f8          MOV      r0,#0x1f00
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;455      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;456      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000018  2018              MOVS     r0,#0x18
00001a  f88d0003          STRB     r0,[sp,#3]
;;;457      GPIO_Init(GPIOC, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4809              LDR      r0,|L8.72|
000022  f7fffffe          BL       GPIO_Init
;;;458    
;;;459      /*!< Configure PD.02 CMD line */
;;;460      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000026  2004              MOVS     r0,#4
000028  f8ad0000          STRH     r0,[sp,#0]
;;;461      GPIO_Init(GPIOD, &GPIO_InitStructure); 
00002c  4669              MOV      r1,sp
00002e  4807              LDR      r0,|L8.76|
000030  f7fffffe          BL       GPIO_Init
;;;462    
;;;463      /*!< Enable the SDIO AHB Clock */
;;;464      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
000034  2101              MOVS     r1,#1
000036  0288              LSLS     r0,r1,#10
000038  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;465    
;;;466      /*!< Enable the DMA2 Clock */
;;;467      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  2002              MOVS     r0,#2
000040  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;468    }
000044  bd08              POP      {r3,pc}
;;;469    
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
                          DCD      0x40011000
                  |L8.76|
                          DCD      0x40011400

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;2492    */
;;;2493   static SD_Error IsCardProgramming(uint8_t *pstatus)
000000  b57c              PUSH     {r2-r6,lr}
;;;2494   {
000002  4604              MOV      r4,r0
;;;2495     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;2496     __IO uint32_t respR1 = 0, status = 0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  9000              STR      r0,[sp,#0]
;;;2497   
;;;2498   	 /*cmd13让卡发送卡状态寄存器，存储到m3的位置为sdio_sta寄存器*/
;;;2499     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16; //卡相对地址参数
00000c  485f              LDR      r0,|L9.396|
00000e  8800              LDRH     r0,[r0,#0]  ; RCA
000010  0400              LSLS     r0,r0,#16
000012  495f              LDR      r1,|L9.400|
000014  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2500     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
000016  200d              MOVS     r0,#0xd
000018  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2501     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001a  2040              MOVS     r0,#0x40
00001c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2502     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00001e  2000              MOVS     r0,#0
000020  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2503     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000022  f44f6080          MOV      r0,#0x400
000026  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2504     SDIO_SendCommand(&SDIO_CmdInitStructure);
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       SDIO_SendCommand
;;;2505   
;;;2506     status = SDIO->STA;
00002e  4859              LDR      r0,|L9.404|
000030  6b40              LDR      r0,[r0,#0x34]
000032  9000              STR      r0,[sp,#0]
;;;2507     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000034  e002              B        |L9.60|
                  |L9.54|
;;;2508     {
;;;2509       status = SDIO->STA;
000036  4857              LDR      r0,|L9.404|
000038  6b40              LDR      r0,[r0,#0x34]
00003a  9000              STR      r0,[sp,#0]
                  |L9.60|
00003c  9800              LDR      r0,[sp,#0]            ;2507
00003e  f0000045          AND      r0,r0,#0x45           ;2507
000042  2800              CMP      r0,#0                 ;2507
000044  d0f7              BEQ      |L9.54|
;;;2510     }
;;;2511   	  /*一系列的状态判断*/
;;;2512     if (status & SDIO_FLAG_CTIMEOUT)
000046  9800              LDR      r0,[sp,#0]
000048  f0000004          AND      r0,r0,#4
00004c  b128              CBZ      r0,|L9.90|
;;;2513     {
;;;2514       errorstatus = SD_CMD_RSP_TIMEOUT;
00004e  2503              MOVS     r5,#3
;;;2515       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       SDIO_ClearFlag
;;;2516       return(errorstatus);
000056  4628              MOV      r0,r5
                  |L9.88|
;;;2517     }
;;;2518     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2519     {
;;;2520       errorstatus = SD_CMD_CRC_FAIL;
;;;2521       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2522       return(errorstatus);
;;;2523     }
;;;2524   
;;;2525     status = (uint32_t)SDIO_GetCommandResponse();
;;;2526   
;;;2527     /*!< Check response received is of desired command */
;;;2528     if (status != SD_CMD_SEND_STATUS)
;;;2529     {
;;;2530       errorstatus = SD_ILLEGAL_CMD;
;;;2531       return(errorstatus);
;;;2532     }
;;;2533   
;;;2534     /*!< Clear all the static flags */
;;;2535     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2536   
;;;2537   
;;;2538     /*!< We have received response, retrieve it for analysis  */
;;;2539     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2540   
;;;2541     /*!< Find out card status */
;;;2542     *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);   //status[12:9] :cardstate 
;;;2543   
;;;2544     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2545     {
;;;2546       return(errorstatus);
;;;2547     }
;;;2548   
;;;2549     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2550     {
;;;2551       return(SD_ADDR_OUT_OF_RANGE);
;;;2552     }
;;;2553   
;;;2554     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2555     {
;;;2556       return(SD_ADDR_MISALIGNED);
;;;2557     }
;;;2558   
;;;2559     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2560     {
;;;2561       return(SD_BLOCK_LEN_ERR);
;;;2562     }
;;;2563   
;;;2564     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2565     {
;;;2566       return(SD_ERASE_SEQ_ERR);
;;;2567     }
;;;2568   
;;;2569     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2570     {
;;;2571       return(SD_BAD_ERASE_PARAM);
;;;2572     }
;;;2573   
;;;2574     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2575     {
;;;2576       return(SD_WRITE_PROT_VIOLATION);
;;;2577     }
;;;2578   
;;;2579     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2580     {
;;;2581       return(SD_LOCK_UNLOCK_FAILED);
;;;2582     }
;;;2583   
;;;2584     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2585     {
;;;2586       return(SD_COM_CRC_FAILED);
;;;2587     }
;;;2588   
;;;2589     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2590     {
;;;2591       return(SD_ILLEGAL_CMD);
;;;2592     }
;;;2593   
;;;2594     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2595     {
;;;2596       return(SD_CARD_ECC_FAILED);
;;;2597     }
;;;2598   
;;;2599     if (respR1 & SD_OCR_CC_ERROR)
;;;2600     {
;;;2601       return(SD_CC_ERROR);
;;;2602     }
;;;2603   
;;;2604     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2605     {
;;;2606       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2607     }
;;;2608   
;;;2609     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2610     {
;;;2611       return(SD_STREAM_READ_UNDERRUN);
;;;2612     }
;;;2613   
;;;2614     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2615     {
;;;2616       return(SD_STREAM_WRITE_OVERRUN);
;;;2617     }
;;;2618   
;;;2619     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2620     {
;;;2621       return(SD_CID_CSD_OVERWRITE);
;;;2622     }
;;;2623   
;;;2624     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2625     {
;;;2626       return(SD_WP_ERASE_SKIP);
;;;2627     }
;;;2628   
;;;2629     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2630     {
;;;2631       return(SD_CARD_ECC_DISABLED);
;;;2632     }
;;;2633   
;;;2634     if (respR1 & SD_OCR_ERASE_RESET)
;;;2635     {
;;;2636       return(SD_ERASE_RESET);
;;;2637     }
;;;2638   
;;;2639     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2640     {
;;;2641       return(SD_AKE_SEQ_ERROR);
;;;2642     }
;;;2643   
;;;2644     return(errorstatus);
;;;2645   }
000058  bd7c              POP      {r2-r6,pc}
                  |L9.90|
00005a  9800              LDR      r0,[sp,#0]            ;2518
00005c  f0000001          AND      r0,r0,#1              ;2518
000060  b128              CBZ      r0,|L9.110|
000062  2501              MOVS     r5,#1                 ;2520
000064  2001              MOVS     r0,#1                 ;2521
000066  f7fffffe          BL       SDIO_ClearFlag
00006a  4628              MOV      r0,r5                 ;2522
00006c  e7f4              B        |L9.88|
                  |L9.110|
00006e  f7fffffe          BL       SDIO_GetCommandResponse
000072  9000              STR      r0,[sp,#0]            ;2525
000074  9800              LDR      r0,[sp,#0]            ;2528
000076  280d              CMP      r0,#0xd               ;2528
000078  d002              BEQ      |L9.128|
00007a  2510              MOVS     r5,#0x10              ;2530
00007c  4628              MOV      r0,r5                 ;2531
00007e  e7eb              B        |L9.88|
                  |L9.128|
000080  f24050ff          MOV      r0,#0x5ff             ;2535
000084  f7fffffe          BL       SDIO_ClearFlag
000088  2000              MOVS     r0,#0                 ;2539
00008a  f7fffffe          BL       SDIO_GetResponse
00008e  9001              STR      r0,[sp,#4]            ;2539
000090  9801              LDR      r0,[sp,#4]            ;2542
000092  f3c02043          UBFX     r0,r0,#9,#4           ;2542
000096  7020              STRB     r0,[r4,#0]            ;2542
000098  493f              LDR      r1,|L9.408|
00009a  9801              LDR      r0,[sp,#4]            ;2544
00009c  4008              ANDS     r0,r0,r1              ;2544
00009e  b908              CBNZ     r0,|L9.164|
0000a0  4628              MOV      r0,r5                 ;2546
0000a2  e7d9              B        |L9.88|
                  |L9.164|
0000a4  9801              LDR      r0,[sp,#4]            ;2549
0000a6  f0004000          AND      r0,r0,#0x80000000     ;2549
0000aa  b108              CBZ      r0,|L9.176|
0000ac  201c              MOVS     r0,#0x1c              ;2551
0000ae  e7d3              B        |L9.88|
                  |L9.176|
0000b0  9801              LDR      r0,[sp,#4]            ;2554
0000b2  f0004080          AND      r0,r0,#0x40000000     ;2554
0000b6  b108              CBZ      r0,|L9.188|
0000b8  2009              MOVS     r0,#9                 ;2556
0000ba  e7cd              B        |L9.88|
                  |L9.188|
0000bc  9801              LDR      r0,[sp,#4]            ;2559
0000be  f0005000          AND      r0,r0,#0x20000000     ;2559
0000c2  b108              CBZ      r0,|L9.200|
0000c4  200a              MOVS     r0,#0xa               ;2561
0000c6  e7c7              B        |L9.88|
                  |L9.200|
0000c8  9801              LDR      r0,[sp,#4]            ;2564
0000ca  f0005080          AND      r0,r0,#0x10000000     ;2564
0000ce  b108              CBZ      r0,|L9.212|
0000d0  200b              MOVS     r0,#0xb               ;2566
0000d2  e7c1              B        |L9.88|
                  |L9.212|
0000d4  9801              LDR      r0,[sp,#4]            ;2569
0000d6  f0006000          AND      r0,r0,#0x8000000      ;2569
0000da  b108              CBZ      r0,|L9.224|
0000dc  200c              MOVS     r0,#0xc               ;2571
0000de  e7bb              B        |L9.88|
                  |L9.224|
0000e0  9801              LDR      r0,[sp,#4]            ;2574
0000e2  f0006080          AND      r0,r0,#0x4000000      ;2574
0000e6  b108              CBZ      r0,|L9.236|
0000e8  200d              MOVS     r0,#0xd               ;2576
0000ea  e7b5              B        |L9.88|
                  |L9.236|
0000ec  9801              LDR      r0,[sp,#4]            ;2579
0000ee  f0007080          AND      r0,r0,#0x1000000      ;2579
0000f2  b108              CBZ      r0,|L9.248|
0000f4  200e              MOVS     r0,#0xe               ;2581
0000f6  e7af              B        |L9.88|
                  |L9.248|
0000f8  9801              LDR      r0,[sp,#4]            ;2584
0000fa  f4000000          AND      r0,r0,#0x800000       ;2584
0000fe  b108              CBZ      r0,|L9.260|
000100  200f              MOVS     r0,#0xf               ;2586
000102  e7a9              B        |L9.88|
                  |L9.260|
000104  9801              LDR      r0,[sp,#4]            ;2589
000106  f4000080          AND      r0,r0,#0x400000       ;2589
00010a  b108              CBZ      r0,|L9.272|
00010c  2010              MOVS     r0,#0x10              ;2591
00010e  e7a3              B        |L9.88|
                  |L9.272|
000110  9801              LDR      r0,[sp,#4]            ;2594
000112  f4001000          AND      r0,r0,#0x200000       ;2594
000116  b108              CBZ      r0,|L9.284|
000118  2011              MOVS     r0,#0x11              ;2596
00011a  e79d              B        |L9.88|
                  |L9.284|
00011c  9801              LDR      r0,[sp,#4]            ;2599
00011e  f4001080          AND      r0,r0,#0x100000       ;2599
000122  b108              CBZ      r0,|L9.296|
000124  2012              MOVS     r0,#0x12              ;2601
000126  e797              B        |L9.88|
                  |L9.296|
000128  9801              LDR      r0,[sp,#4]            ;2604
00012a  f4002000          AND      r0,r0,#0x80000        ;2604
00012e  b108              CBZ      r0,|L9.308|
000130  2013              MOVS     r0,#0x13              ;2606
000132  e791              B        |L9.88|
                  |L9.308|
000134  9801              LDR      r0,[sp,#4]            ;2609
000136  f4002080          AND      r0,r0,#0x40000        ;2609
00013a  b108              CBZ      r0,|L9.320|
00013c  2014              MOVS     r0,#0x14              ;2611
00013e  e78b              B        |L9.88|
                  |L9.320|
000140  9801              LDR      r0,[sp,#4]            ;2614
000142  f4003000          AND      r0,r0,#0x20000        ;2614
000146  b108              CBZ      r0,|L9.332|
000148  2015              MOVS     r0,#0x15              ;2616
00014a  e785              B        |L9.88|
                  |L9.332|
00014c  9801              LDR      r0,[sp,#4]            ;2619
00014e  f4003080          AND      r0,r0,#0x10000        ;2619
000152  b108              CBZ      r0,|L9.344|
000154  2016              MOVS     r0,#0x16              ;2621
000156  e77f              B        |L9.88|
                  |L9.344|
000158  9801              LDR      r0,[sp,#4]            ;2624
00015a  f4004000          AND      r0,r0,#0x8000         ;2624
00015e  b108              CBZ      r0,|L9.356|
000160  2017              MOVS     r0,#0x17              ;2626
000162  e779              B        |L9.88|
                  |L9.356|
000164  9801              LDR      r0,[sp,#4]            ;2629
000166  f4004080          AND      r0,r0,#0x4000         ;2629
00016a  b108              CBZ      r0,|L9.368|
00016c  2018              MOVS     r0,#0x18              ;2631
00016e  e773              B        |L9.88|
                  |L9.368|
000170  9801              LDR      r0,[sp,#4]            ;2634
000172  f4005000          AND      r0,r0,#0x2000         ;2634
000176  b108              CBZ      r0,|L9.380|
000178  2019              MOVS     r0,#0x19              ;2636
00017a  e76d              B        |L9.88|
                  |L9.380|
00017c  9801              LDR      r0,[sp,#4]            ;2639
00017e  f0000008          AND      r0,r0,#8              ;2639
000182  b108              CBZ      r0,|L9.392|
000184  201a              MOVS     r0,#0x1a              ;2641
000186  e767              B        |L9.88|
                  |L9.392|
000188  4628              MOV      r0,r5                 ;2644
00018a  e765              B        |L9.88|
;;;2646   
                          ENDP

                  |L9.396|
                          DCD      ||RCA||
                  |L9.400|
                          DCD      SDIO_CmdInitStructure
                  |L9.404|
                          DCD      0x40018000
                  |L9.408|
                          DCD      0xfdffe008

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;342     */
;;;343    static void NVIC_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;344    {
;;;345      NVIC_InitTypeDef NVIC_InitStructure;
;;;346    
;;;347      /* Configure the NVIC Preemption Priority Bits */
;;;348      NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
000002  f44f60c0          MOV      r0,#0x600
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;349    
;;;350      NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
00000a  2031              MOVS     r0,#0x31
00000c  f88d0000          STRB     r0,[sp,#0]
;;;351      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000010  2000              MOVS     r0,#0
000012  f88d0001          STRB     r0,[sp,#1]
;;;352      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000016  f88d0002          STRB     r0,[sp,#2]
;;;353      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001a  2001              MOVS     r0,#1
00001c  f88d0003          STRB     r0,[sp,#3]
;;;354      NVIC_Init(&NVIC_InitStructure);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       NVIC_Init
;;;355    }
000026  bd08              POP      {r3,pc}
;;;356    
                          ENDP


                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;2375    */
;;;2376   static SD_Error SDEnWideBus(FunctionalState NewState)
000000  b57c              PUSH     {r2-r6,lr}
;;;2377   {
000002  4605              MOV      r5,r0
;;;2378     SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;2379   
;;;2380     uint32_t scr[2] = {0, 0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;2381   
;;;2382     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED) //检测卡是否已上锁
00000c  f7fffffe          BL       SDIO_GetResponse
000010  f0007000          AND      r0,r0,#0x2000000
000014  b110              CBZ      r0,|L11.28|
;;;2383     {
;;;2384       errorstatus = SD_LOCK_UNLOCK_FAILED;
000016  240e              MOVS     r4,#0xe
;;;2385       return(errorstatus);
000018  4620              MOV      r0,r4
                  |L11.26|
;;;2386     }
;;;2387   
;;;2388     /*!< Get SCR Register */
;;;2389     errorstatus = FindSCR(RCA, scr);//获取scr寄存器内容到scr数组中
;;;2390   
;;;2391     if (errorstatus != SD_OK)		  //degug,crc错误，scr读取不了数值
;;;2392     {
;;;2393       return(errorstatus);
;;;2394     }
;;;2395   
;;;2396     /*!< If wide bus operation to be enabled */
;;;2397     if (NewState == ENABLE)
;;;2398     {
;;;2399       /*!< If requested card supports wide bus operation */
;;;2400       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)  //判断卡是否支持4位方式
;;;2401       {
;;;2402         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2403         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2404         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2405         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2406         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2407         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2408         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2409   
;;;2410         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2411   
;;;2412         if (errorstatus != SD_OK)
;;;2413         {
;;;2414           return(errorstatus);
;;;2415         }
;;;2416   
;;;2417         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2418   	  /*开启4bit模式的命令acmd6*/
;;;2419         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;2420         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2421         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2422         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2423         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2424         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2425   
;;;2426         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2427   
;;;2428         if (errorstatus != SD_OK)
;;;2429         {
;;;2430           return(errorstatus);
;;;2431         }
;;;2432         return(errorstatus);
;;;2433       }
;;;2434       else
;;;2435       {
;;;2436         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2437         return(errorstatus);
;;;2438       }
;;;2439     }   /*!< If wide bus operation to be disabled */
;;;2440     else
;;;2441     {
;;;2442       /*!< If requested card supports 1 bit mode operation */
;;;2443       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;2444       {
;;;2445         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2446         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2447         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2448         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2449         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2450         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2451         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2452   
;;;2453   
;;;2454         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2455   
;;;2456         if (errorstatus != SD_OK)
;;;2457         {
;;;2458           return(errorstatus);
;;;2459         }
;;;2460   
;;;2461         /*!< Send ACMD6 APP_CMD with argument as 0 for single bus mode */
;;;2462         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;2463         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2464         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2465         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2466         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2467         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2468   
;;;2469         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2470   
;;;2471         if (errorstatus != SD_OK)
;;;2472         {
;;;2473           return(errorstatus);
;;;2474         }
;;;2475   
;;;2476         return(errorstatus);
;;;2477       }
;;;2478       else
;;;2479       {
;;;2480         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2481         return(errorstatus);
;;;2482       }
;;;2483     }
;;;2484   }
00001a  bd7c              POP      {r2-r6,pc}
                  |L11.28|
00001c  493d              LDR      r1,|L11.276|
00001e  8809              LDRH     r1,[r1,#0]            ;2389  ; RCA
000020  b288              UXTH     r0,r1                 ;2389
000022  4669              MOV      r1,sp                 ;2389
000024  f7fffffe          BL       FindSCR
000028  4604              MOV      r4,r0                 ;2389
00002a  b10c              CBZ      r4,|L11.48|
00002c  4620              MOV      r0,r4                 ;2393
00002e  e7f4              B        |L11.26|
                  |L11.48|
000030  2d01              CMP      r5,#1                 ;2397
000032  d136              BNE      |L11.162|
000034  9801              LDR      r0,[sp,#4]            ;2400
000036  f4002080          AND      r0,r0,#0x40000        ;2400
00003a  2800              CMP      r0,#0                 ;2400
00003c  d02e              BEQ      |L11.156|
00003e  4835              LDR      r0,|L11.276|
000040  8800              LDRH     r0,[r0,#0]            ;2403  ; RCA
000042  0400              LSLS     r0,r0,#16             ;2403
000044  4934              LDR      r1,|L11.280|
000046  6008              STR      r0,[r1,#0]            ;2403  ; SDIO_CmdInitStructure
000048  2037              MOVS     r0,#0x37              ;2404
00004a  6048              STR      r0,[r1,#4]            ;2404  ; SDIO_CmdInitStructure
00004c  2040              MOVS     r0,#0x40              ;2405
00004e  6088              STR      r0,[r1,#8]            ;2405  ; SDIO_CmdInitStructure
000050  2000              MOVS     r0,#0                 ;2406
000052  60c8              STR      r0,[r1,#0xc]          ;2406  ; SDIO_CmdInitStructure
000054  02a8              LSLS     r0,r5,#10             ;2407
000056  6108              STR      r0,[r1,#0x10]         ;2407  ; SDIO_CmdInitStructure
000058  4608              MOV      r0,r1                 ;2408
00005a  f7fffffe          BL       SDIO_SendCommand
00005e  2037              MOVS     r0,#0x37              ;2410
000060  f7fffffe          BL       CmdResp1Error
000064  4604              MOV      r4,r0                 ;2410
000066  b10c              CBZ      r4,|L11.108|
000068  4620              MOV      r0,r4                 ;2414
00006a  e7d6              B        |L11.26|
                  |L11.108|
00006c  2002              MOVS     r0,#2                 ;2419
00006e  492a              LDR      r1,|L11.280|
000070  6008              STR      r0,[r1,#0]            ;2419  ; SDIO_CmdInitStructure
000072  2006              MOVS     r0,#6                 ;2420
000074  6048              STR      r0,[r1,#4]            ;2420  ; SDIO_CmdInitStructure
000076  2040              MOVS     r0,#0x40              ;2421
000078  6088              STR      r0,[r1,#8]            ;2421  ; SDIO_CmdInitStructure
00007a  2000              MOVS     r0,#0                 ;2422
00007c  60c8              STR      r0,[r1,#0xc]          ;2422  ; SDIO_CmdInitStructure
00007e  f44f6080          MOV      r0,#0x400             ;2423
000082  6108              STR      r0,[r1,#0x10]         ;2423  ; SDIO_CmdInitStructure
000084  4608              MOV      r0,r1                 ;2424
000086  f7fffffe          BL       SDIO_SendCommand
00008a  2006              MOVS     r0,#6                 ;2426
00008c  f7fffffe          BL       CmdResp1Error
000090  4604              MOV      r4,r0                 ;2426
000092  b10c              CBZ      r4,|L11.152|
000094  4620              MOV      r0,r4                 ;2430
000096  e7c0              B        |L11.26|
                  |L11.152|
000098  4620              MOV      r0,r4                 ;2432
00009a  e7be              B        |L11.26|
                  |L11.156|
00009c  2425              MOVS     r4,#0x25              ;2436
00009e  4620              MOV      r0,r4                 ;2437
0000a0  e7bb              B        |L11.26|
                  |L11.162|
0000a2  9801              LDR      r0,[sp,#4]            ;2443
0000a4  f4003080          AND      r0,r0,#0x10000        ;2443
0000a8  b378              CBZ      r0,|L11.266|
0000aa  481a              LDR      r0,|L11.276|
0000ac  8800              LDRH     r0,[r0,#0]            ;2446  ; RCA
0000ae  0400              LSLS     r0,r0,#16             ;2446
0000b0  4919              LDR      r1,|L11.280|
0000b2  6008              STR      r0,[r1,#0]            ;2446  ; SDIO_CmdInitStructure
0000b4  2037              MOVS     r0,#0x37              ;2447
0000b6  6048              STR      r0,[r1,#4]            ;2447  ; SDIO_CmdInitStructure
0000b8  2040              MOVS     r0,#0x40              ;2448
0000ba  6088              STR      r0,[r1,#8]            ;2448  ; SDIO_CmdInitStructure
0000bc  2000              MOVS     r0,#0                 ;2449
0000be  60c8              STR      r0,[r1,#0xc]          ;2449  ; SDIO_CmdInitStructure
0000c0  f44f6080          MOV      r0,#0x400             ;2450
0000c4  6108              STR      r0,[r1,#0x10]         ;2450  ; SDIO_CmdInitStructure
0000c6  4608              MOV      r0,r1                 ;2451
0000c8  f7fffffe          BL       SDIO_SendCommand
0000cc  2037              MOVS     r0,#0x37              ;2454
0000ce  f7fffffe          BL       CmdResp1Error
0000d2  4604              MOV      r4,r0                 ;2454
0000d4  b10c              CBZ      r4,|L11.218|
0000d6  4620              MOV      r0,r4                 ;2458
0000d8  e79f              B        |L11.26|
                  |L11.218|
0000da  2000              MOVS     r0,#0                 ;2462
0000dc  490e              LDR      r1,|L11.280|
0000de  6008              STR      r0,[r1,#0]            ;2462  ; SDIO_CmdInitStructure
0000e0  2006              MOVS     r0,#6                 ;2463
0000e2  6048              STR      r0,[r1,#4]            ;2463  ; SDIO_CmdInitStructure
0000e4  2040              MOVS     r0,#0x40              ;2464
0000e6  6088              STR      r0,[r1,#8]            ;2464  ; SDIO_CmdInitStructure
0000e8  2000              MOVS     r0,#0                 ;2465
0000ea  60c8              STR      r0,[r1,#0xc]          ;2465  ; SDIO_CmdInitStructure
0000ec  f44f6080          MOV      r0,#0x400             ;2466
0000f0  6108              STR      r0,[r1,#0x10]         ;2466  ; SDIO_CmdInitStructure
0000f2  4608              MOV      r0,r1                 ;2467
0000f4  f7fffffe          BL       SDIO_SendCommand
0000f8  2006              MOVS     r0,#6                 ;2469
0000fa  f7fffffe          BL       CmdResp1Error
0000fe  4604              MOV      r4,r0                 ;2469
000100  b10c              CBZ      r4,|L11.262|
000102  4620              MOV      r0,r4                 ;2473
000104  e789              B        |L11.26|
                  |L11.262|
000106  4620              MOV      r0,r4                 ;2476
000108  e787              B        |L11.26|
                  |L11.266|
00010a  e7ff              B        |L11.268|
                  |L11.268|
00010c  2425              MOVS     r4,#0x25              ;2480
00010e  4620              MOV      r0,r4                 ;2481
000110  e783              B        |L11.26|
;;;2485   
                          ENDP

000112  0000              DCW      0x0000
                  |L11.276|
                          DCD      ||RCA||
                  |L11.280|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_DMAEndOfTransferStatus||, CODE, READONLY, ALIGN=2

                  SD_DMAEndOfTransferStatus PROC
;;;361      */
;;;362    uint32_t SD_DMAEndOfTransferStatus(void)
000000  b510              PUSH     {r4,lr}
;;;363    {
;;;364      return (uint32_t)DMA_GetFlagStatus(DMA2_FLAG_TC4);   //Channel4 transfer complete flag. 
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       DMA_GetFlagStatus
;;;365    
;;;366    }
000008  bd10              POP      {r4,pc}
;;;367    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      0x10002000

                          AREA ||i.SD_DMA_RxConfig||, CODE, READONLY, ALIGN=2

                  SD_DMA_RxConfig PROC
;;;375      */
;;;376    void SD_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;377    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;378      DMA_InitTypeDef DMA_InitStructure;
;;;379    
;;;380      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);//清除DMA标志位
000008  4813              LDR      r0,|L13.88|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;381    
;;;382      /*!< DMA2 Channel4 disable */
;;;383      DMA_Cmd(DMA2_Channel4, DISABLE);	//SDIO为第四通道
00000e  2100              MOVS     r1,#0
000010  4812              LDR      r0,|L13.92|
000012  f7fffffe          BL       DMA_Cmd
;;;384    
;;;385      /*!< DMA2 Channel4 Config */
;;;386      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;  //外设地址，fifo
000016  4812              LDR      r0,|L13.96|
000018  9000              STR      r0,[sp,#0]
;;;387      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST; //目标地址
00001a  9501              STR      r5,[sp,#4]
;;;388      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;	//外设为原地址
00001c  2000              MOVS     r0,#0
00001e  9002              STR      r0,[sp,#8]
;;;389      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;  //1/4缓存大小
000020  08a0              LSRS     r0,r4,#2
000022  9003              STR      r0,[sp,#0xc]
;;;390      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//使能外设地址不自增
000024  2000              MOVS     r0,#0
000026  9004              STR      r0,[sp,#0x10]
;;;391      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;	  //使能存储目标地址自增
000028  2080              MOVS     r0,#0x80
00002a  9005              STR      r0,[sp,#0x14]
;;;392      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;  //外设数据大小为字，32位
00002c  0080              LSLS     r0,r0,#2
00002e  9006              STR      r0,[sp,#0x18]
;;;393      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;	//外设数据大小为字，32位
000030  0080              LSLS     r0,r0,#2
000032  9007              STR      r0,[sp,#0x1c]
;;;394      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;			   //不循环，循环模式主要用在adc上
000034  2000              MOVS     r0,#0
000036  9008              STR      r0,[sp,#0x20]
;;;395      DMA_InitStructure.DMA_Priority = DMA_Priority_High;	 //通道优先级高
000038  f44f5000          MOV      r0,#0x2000
00003c  9009              STR      r0,[sp,#0x24]
;;;396      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;			 //非 存储器至存储器模式
00003e  2000              MOVS     r0,#0
000040  900a              STR      r0,[sp,#0x28]
;;;397      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
000042  4669              MOV      r1,sp
000044  4805              LDR      r0,|L13.92|
000046  f7fffffe          BL       DMA_Init
;;;398    
;;;399      /*!< DMA2 Channel4 enable */			   //不设置dma中断？
;;;400      DMA_Cmd(DMA2_Channel4, ENABLE); 
00004a  2101              MOVS     r1,#1
00004c  4803              LDR      r0,|L13.92|
00004e  f7fffffe          BL       DMA_Cmd
;;;401    }
000052  b00b              ADD      sp,sp,#0x2c
000054  bd30              POP      {r4,r5,pc}
;;;402    
                          ENDP

000056  0000              DCW      0x0000
                  |L13.88|
                          DCD      0x1000f000
                  |L13.92|
                          DCD      0x40020444
                  |L13.96|
                          DCD      0x40018080

                          AREA ||i.SD_DMA_TxConfig||, CODE, READONLY, ALIGN=2

                  SD_DMA_TxConfig PROC
;;;409     */
;;;410    void SD_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;411    {
000002  b08b              SUB      sp,sp,#0x2c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;412    
;;;413      DMA_InitTypeDef DMA_InitStructure;
;;;414    
;;;415      DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
000008  4813              LDR      r0,|L14.88|
00000a  f7fffffe          BL       DMA_ClearFlag
;;;416    
;;;417      /*!< DMA2 Channel4 disable */
;;;418      DMA_Cmd(DMA2_Channel4, DISABLE);
00000e  2100              MOVS     r1,#0
000010  4812              LDR      r0,|L14.92|
000012  f7fffffe          BL       DMA_Cmd
;;;419    
;;;420      /*!< DMA2 Channel4 Config */
;;;421      DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000016  4812              LDR      r0,|L14.96|
000018  9000              STR      r0,[sp,#0]
;;;422      DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
00001a  9501              STR      r5,[sp,#4]
;;;423      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;//外设为写入目标
00001c  2010              MOVS     r0,#0x10
00001e  9002              STR      r0,[sp,#8]
;;;424      DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
000020  08a0              LSRS     r0,r4,#2
000022  9003              STR      r0,[sp,#0xc]
;;;425      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址不自增
000024  2000              MOVS     r0,#0
000026  9004              STR      r0,[sp,#0x10]
;;;426      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000028  2080              MOVS     r0,#0x80
00002a  9005              STR      r0,[sp,#0x14]
;;;427      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00002c  0080              LSLS     r0,r0,#2
00002e  9006              STR      r0,[sp,#0x18]
;;;428      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
000030  0080              LSLS     r0,r0,#2
000032  9007              STR      r0,[sp,#0x1c]
;;;429      DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000034  2000              MOVS     r0,#0
000036  9008              STR      r0,[sp,#0x20]
;;;430      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000038  f44f5000          MOV      r0,#0x2000
00003c  9009              STR      r0,[sp,#0x24]
;;;431      DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
00003e  2000              MOVS     r0,#0
000040  900a              STR      r0,[sp,#0x28]
;;;432      DMA_Init(DMA2_Channel4, &DMA_InitStructure);
000042  4669              MOV      r1,sp
000044  4805              LDR      r0,|L14.92|
000046  f7fffffe          BL       DMA_Init
;;;433    
;;;434      /*!< DMA2 Channel4 enable */
;;;435      DMA_Cmd(DMA2_Channel4, ENABLE);  
00004a  2101              MOVS     r1,#1
00004c  4803              LDR      r0,|L14.92|
00004e  f7fffffe          BL       DMA_Cmd
;;;436    }
000052  b00b              ADD      sp,sp,#0x2c
000054  bd30              POP      {r4,r5,pc}
;;;437    
                          ENDP

000056  0000              DCW      0x0000
                  |L14.88|
                          DCD      0x1000f000
                  |L14.92|
                          DCD      0x40020444
                  |L14.96|
                          DCD      0x40018080

                          AREA ||i.SD_DeInit||, CODE, READONLY, ALIGN=2

                  SD_DeInit PROC
;;;310     */
;;;311    void SD_DeInit(void)
000000  b508              PUSH     {r3,lr}
;;;312    {
;;;313      GPIO_InitTypeDef  GPIO_InitStructure;
;;;314      
;;;315      /*!< Disable SDIO Clock */
;;;316      SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;317      
;;;318      /*!< Set Power State to OFF */
;;;319      SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;320    
;;;321      /*!< DeInitializes the SDIO peripheral */
;;;322      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;323      
;;;324      /*!< Disable the SDIO AHB Clock */
;;;325      RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6080          MOV      r0,#0x400
000018  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;326    
;;;327      /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
;;;328      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
00001c  f44f50f8          MOV      r0,#0x1f00
000020  f8ad0000          STRH     r0,[sp,#0]
;;;329      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000024  2004              MOVS     r0,#4
000026  f88d0003          STRB     r0,[sp,#3]
;;;330      GPIO_Init(GPIOC, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4805              LDR      r0,|L15.68|
00002e  f7fffffe          BL       GPIO_Init
;;;331    
;;;332      /*!< Configure PD.02 CMD line */
;;;333      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000032  2004              MOVS     r0,#4
000034  f8ad0000          STRH     r0,[sp,#0]
;;;334      GPIO_Init(GPIOD, &GPIO_InitStructure);
000038  4669              MOV      r1,sp
00003a  4803              LDR      r0,|L15.72|
00003c  f7fffffe          BL       GPIO_Init
;;;335    }
000040  bd08              POP      {r3,pc}
;;;336    
                          ENDP

000042  0000              DCW      0x0000
                  |L15.68|
                          DCD      0x40011000
                  |L15.72|
                          DCD      0x40011400

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;1241    */
;;;1242   SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
000000  b570              PUSH     {r4-r6,lr}
;;;1243   {
000002  4604              MOV      r4,r0
;;;1244     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1245   
;;;1246     /*!< MMC Card doesn't support this feature */
;;;1247     if (SDIO_MULTIMEDIA_CARD == CardType)
000006  4821              LDR      r0,|L16.140|
000008  6800              LDR      r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d102              BNE      |L16.20|
;;;1248     {
;;;1249       errorstatus = SD_UNSUPPORTED_FEATURE;
00000e  2527              MOVS     r5,#0x27
;;;1250       return(errorstatus);
000010  4628              MOV      r0,r5
                  |L16.18|
;;;1251     }
;;;1252     else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1253     {														 
;;;1254       if (SDIO_BusWide_8b == WideMode)   //2.0 sd不支持8bits
;;;1255       {
;;;1256         errorstatus = SD_UNSUPPORTED_FEATURE;
;;;1257         return(errorstatus);
;;;1258       }
;;;1259       else if (SDIO_BusWide_4b == WideMode)//4数据线模式
;;;1260       {
;;;1261         errorstatus = SDEnWideBus(ENABLE);//使用acmd6设置总线宽度，设置卡的传输方式
;;;1262   
;;;1263         if (SD_OK == errorstatus)
;;;1264         {
;;;1265           /*!< Configure the SDIO peripheral */
;;;1266           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1267           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1268           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1269           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1270           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;	//这个是设置stm32的sdio的传输方式 ，切换模式必须从卡和sdio都对应好
;;;1271           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1272           SDIO_Init(&SDIO_InitStructure);
;;;1273         }
;;;1274       }
;;;1275       else//单数据线模式
;;;1276       {
;;;1277         errorstatus = SDEnWideBus(DISABLE);
;;;1278   
;;;1279         if (SD_OK == errorstatus)
;;;1280         {
;;;1281           /*!< Configure the SDIO peripheral */
;;;1282           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1283           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1284           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1285           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1286           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;1287           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1288           SDIO_Init(&SDIO_InitStructure);
;;;1289         }
;;;1290       }
;;;1291     }
;;;1292   
;;;1293     return(errorstatus);
;;;1294   }
000012  bd70              POP      {r4-r6,pc}
                  |L16.20|
000014  481d              LDR      r0,|L16.140|
000016  6800              LDR      r0,[r0,#0]            ;1252  ; CardType
000018  b138              CBZ      r0,|L16.42|
00001a  481c              LDR      r0,|L16.140|
00001c  6800              LDR      r0,[r0,#0]            ;1252  ; CardType
00001e  2801              CMP      r0,#1                 ;1252
000020  d003              BEQ      |L16.42|
000022  481a              LDR      r0,|L16.140|
000024  6800              LDR      r0,[r0,#0]            ;1252  ; CardType
000026  2802              CMP      r0,#2                 ;1252
000028  d12e              BNE      |L16.136|
                  |L16.42|
00002a  f5b45f80          CMP      r4,#0x1000            ;1254
00002e  d102              BNE      |L16.54|
000030  2527              MOVS     r5,#0x27              ;1256
000032  4628              MOV      r0,r5                 ;1257
000034  e7ed              B        |L16.18|
                  |L16.54|
000036  f5b46f00          CMP      r4,#0x800             ;1259
00003a  d114              BNE      |L16.102|
00003c  2001              MOVS     r0,#1                 ;1261
00003e  f7fffffe          BL       SDEnWideBus
000042  4605              MOV      r5,r0                 ;1261
000044  bb05              CBNZ     r5,|L16.136|
000046  2001              MOVS     r0,#1                 ;1266
000048  4911              LDR      r1,|L16.144|
00004a  7508              STRB     r0,[r1,#0x14]         ;1266
00004c  2000              MOVS     r0,#0                 ;1267
00004e  6008              STR      r0,[r1,#0]            ;1267  ; SDIO_InitStructure
000050  6048              STR      r0,[r1,#4]            ;1268  ; SDIO_InitStructure
000052  6088              STR      r0,[r1,#8]            ;1269  ; SDIO_InitStructure
000054  f44f6000          MOV      r0,#0x800             ;1270
000058  60c8              STR      r0,[r1,#0xc]          ;1270  ; SDIO_InitStructure
00005a  2000              MOVS     r0,#0                 ;1271
00005c  6108              STR      r0,[r1,#0x10]         ;1271  ; SDIO_InitStructure
00005e  4608              MOV      r0,r1                 ;1272
000060  f7fffffe          BL       SDIO_Init
000064  e010              B        |L16.136|
                  |L16.102|
000066  2000              MOVS     r0,#0                 ;1277
000068  f7fffffe          BL       SDEnWideBus
00006c  4605              MOV      r5,r0                 ;1277
00006e  b95d              CBNZ     r5,|L16.136|
000070  2001              MOVS     r0,#1                 ;1282
000072  4907              LDR      r1,|L16.144|
000074  7508              STRB     r0,[r1,#0x14]         ;1282
000076  2000              MOVS     r0,#0                 ;1283
000078  6008              STR      r0,[r1,#0]            ;1283  ; SDIO_InitStructure
00007a  6048              STR      r0,[r1,#4]            ;1284  ; SDIO_InitStructure
00007c  6088              STR      r0,[r1,#8]            ;1285  ; SDIO_InitStructure
00007e  60c8              STR      r0,[r1,#0xc]          ;1286  ; SDIO_InitStructure
000080  6108              STR      r0,[r1,#0x10]         ;1287  ; SDIO_InitStructure
000082  4608              MOV      r0,r1                 ;1288
000084  f7fffffe          BL       SDIO_Init
                  |L16.136|
000088  4628              MOV      r0,r5                 ;1293
00008a  e7c2              B        |L16.18|
;;;1295   
                          ENDP

                  |L16.140|
                          DCD      CardType
                  |L16.144|
                          DCD      SDIO_InitStructure

                          AREA ||i.SD_Erase||, CODE, READONLY, ALIGN=2

                  SD_Erase PROC
;;;1883     */
;;;1884   SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1885   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1886     SD_Error errorstatus = SD_OK;
000008  2400              MOVS     r4,#0
;;;1887     uint32_t delay = 0;
00000a  2700              MOVS     r7,#0
;;;1888     __IO uint32_t maxdelay = 0;
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;1889     uint8_t cardstate = 0;
000010  9000              STR      r0,[sp,#0]
;;;1890   
;;;1891     /*!< Check if the card coomnd class supports erase command */
;;;1892     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
000012  4844              LDR      r0,|L17.292|
000014  6840              LDR      r0,[r0,#4]  ; CSD_Tab
000016  2120              MOVS     r1,#0x20
000018  ea015010          AND      r0,r1,r0,LSR #20
00001c  b918              CBNZ     r0,|L17.38|
;;;1893     {
;;;1894       errorstatus = SD_REQUEST_NOT_APPLICABLE;
00001e  2425              MOVS     r4,#0x25
;;;1895       return(errorstatus);
000020  4620              MOV      r0,r4
                  |L17.34|
;;;1896     }
;;;1897   
;;;1898     maxdelay = 120000 / ((SDIO->CLKCR & 0xFF) + 2);//延时，根据时钟分频设置来计算
;;;1899   
;;;1900     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)	  //卡已上锁
;;;1901     {
;;;1902       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1903       return(errorstatus);
;;;1904     }
;;;1905   
;;;1906     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)//sdhc卡，为什么要 /512？详见2.0协议page52
;;;1907     {	//在sdhc卡，地址参数为块地址，每块512字节，sdsc卡地址为字节地址
;;;1908       startaddr /= 512;	  
;;;1909       endaddr /= 512;
;;;1910     }
;;;1911     
;;;1912     /*!< According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;1913     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1914     {
;;;1915       /*!< Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;1916       SDIO_CmdInitStructure.SDIO_Argument = startaddr;
;;;1917       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;
;;;1918       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;	//R1
;;;1919       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1920       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1921       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1922   
;;;1923       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);
;;;1924       if (errorstatus != SD_OK)
;;;1925       {
;;;1926         return(errorstatus);
;;;1927       }
;;;1928   
;;;1929       /*!< Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;1930       SDIO_CmdInitStructure.SDIO_Argument = endaddr;
;;;1931       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;
;;;1932       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1933       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1934       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1935       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1936   
;;;1937       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);
;;;1938       if (errorstatus != SD_OK)
;;;1939       {
;;;1940         return(errorstatus);
;;;1941       }
;;;1942     }
;;;1943   
;;;1944     /*!< Send CMD38 ERASE */
;;;1945     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1946     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;
;;;1947     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1948     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1949     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1950     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1951   
;;;1952     errorstatus = CmdResp1Error(SD_CMD_ERASE);
;;;1953   
;;;1954     if (errorstatus != SD_OK)
;;;1955     {
;;;1956       return(errorstatus);
;;;1957     }
;;;1958   
;;;1959     for (delay = 0; delay < maxdelay; delay++)
;;;1960     {}
;;;1961   
;;;1962     /*!< Wait till the card is in programming state */
;;;1963     errorstatus = IsCardProgramming(&cardstate);
;;;1964   
;;;1965     while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;1966     {
;;;1967       errorstatus = IsCardProgramming(&cardstate);
;;;1968     }
;;;1969   
;;;1970     return(errorstatus);
;;;1971   }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L17.38|
000026  4840              LDR      r0,|L17.296|
000028  6840              LDR      r0,[r0,#4]            ;1898
00002a  b2c0              UXTB     r0,r0                 ;1898
00002c  1c80              ADDS     r0,r0,#2              ;1898
00002e  493f              LDR      r1,|L17.300|
000030  fbb1f0f0          UDIV     r0,r1,r0              ;1898
000034  9001              STR      r0,[sp,#4]            ;1898
000036  2000              MOVS     r0,#0                 ;1900
000038  f7fffffe          BL       SDIO_GetResponse
00003c  f0007000          AND      r0,r0,#0x2000000      ;1900
000040  b110              CBZ      r0,|L17.72|
000042  240e              MOVS     r4,#0xe               ;1902
000044  4620              MOV      r0,r4                 ;1903
000046  e7ec              B        |L17.34|
                  |L17.72|
000048  4839              LDR      r0,|L17.304|
00004a  6800              LDR      r0,[r0,#0]            ;1906  ; CardType
00004c  2802              CMP      r0,#2                 ;1906
00004e  d101              BNE      |L17.84|
000050  0a6d              LSRS     r5,r5,#9              ;1908
000052  0a76              LSRS     r6,r6,#9              ;1909
                  |L17.84|
000054  4836              LDR      r0,|L17.304|
000056  6800              LDR      r0,[r0,#0]            ;1913  ; CardType
000058  b138              CBZ      r0,|L17.106|
00005a  4835              LDR      r0,|L17.304|
00005c  6800              LDR      r0,[r0,#0]            ;1913  ; CardType
00005e  2801              CMP      r0,#1                 ;1913
000060  d003              BEQ      |L17.106|
000062  4833              LDR      r0,|L17.304|
000064  6800              LDR      r0,[r0,#0]            ;1913  ; CardType
000066  2802              CMP      r0,#2                 ;1913
000068  d12b              BNE      |L17.194|
                  |L17.106|
00006a  4832              LDR      r0,|L17.308|
00006c  6005              STR      r5,[r0,#0]            ;1916  ; SDIO_CmdInitStructure
00006e  2020              MOVS     r0,#0x20              ;1917
000070  4930              LDR      r1,|L17.308|
000072  6048              STR      r0,[r1,#4]            ;1917  ; SDIO_CmdInitStructure
000074  2040              MOVS     r0,#0x40              ;1918
000076  6088              STR      r0,[r1,#8]            ;1918  ; SDIO_CmdInitStructure
000078  2000              MOVS     r0,#0                 ;1919
00007a  60c8              STR      r0,[r1,#0xc]          ;1919  ; SDIO_CmdInitStructure
00007c  f44f6080          MOV      r0,#0x400             ;1920
000080  6108              STR      r0,[r1,#0x10]         ;1920  ; SDIO_CmdInitStructure
000082  4608              MOV      r0,r1                 ;1921
000084  f7fffffe          BL       SDIO_SendCommand
000088  2020              MOVS     r0,#0x20              ;1923
00008a  f7fffffe          BL       CmdResp1Error
00008e  4604              MOV      r4,r0                 ;1923
000090  b10c              CBZ      r4,|L17.150|
000092  4620              MOV      r0,r4                 ;1926
000094  e7c5              B        |L17.34|
                  |L17.150|
000096  4827              LDR      r0,|L17.308|
000098  6006              STR      r6,[r0,#0]            ;1930  ; SDIO_CmdInitStructure
00009a  2021              MOVS     r0,#0x21              ;1931
00009c  4925              LDR      r1,|L17.308|
00009e  6048              STR      r0,[r1,#4]            ;1931  ; SDIO_CmdInitStructure
0000a0  2040              MOVS     r0,#0x40              ;1932
0000a2  6088              STR      r0,[r1,#8]            ;1932  ; SDIO_CmdInitStructure
0000a4  2000              MOVS     r0,#0                 ;1933
0000a6  60c8              STR      r0,[r1,#0xc]          ;1933  ; SDIO_CmdInitStructure
0000a8  f44f6080          MOV      r0,#0x400             ;1934
0000ac  6108              STR      r0,[r1,#0x10]         ;1934  ; SDIO_CmdInitStructure
0000ae  4608              MOV      r0,r1                 ;1935
0000b0  f7fffffe          BL       SDIO_SendCommand
0000b4  2021              MOVS     r0,#0x21              ;1937
0000b6  f7fffffe          BL       CmdResp1Error
0000ba  4604              MOV      r4,r0                 ;1937
0000bc  b10c              CBZ      r4,|L17.194|
0000be  4620              MOV      r0,r4                 ;1940
0000c0  e7af              B        |L17.34|
                  |L17.194|
0000c2  2000              MOVS     r0,#0                 ;1945
0000c4  491b              LDR      r1,|L17.308|
0000c6  6008              STR      r0,[r1,#0]            ;1945  ; SDIO_CmdInitStructure
0000c8  2026              MOVS     r0,#0x26              ;1946
0000ca  6048              STR      r0,[r1,#4]            ;1946  ; SDIO_CmdInitStructure
0000cc  2040              MOVS     r0,#0x40              ;1947
0000ce  6088              STR      r0,[r1,#8]            ;1947  ; SDIO_CmdInitStructure
0000d0  2000              MOVS     r0,#0                 ;1948
0000d2  60c8              STR      r0,[r1,#0xc]          ;1948  ; SDIO_CmdInitStructure
0000d4  f44f6080          MOV      r0,#0x400             ;1949
0000d8  6108              STR      r0,[r1,#0x10]         ;1949  ; SDIO_CmdInitStructure
0000da  4608              MOV      r0,r1                 ;1950
0000dc  f7fffffe          BL       SDIO_SendCommand
0000e0  2026              MOVS     r0,#0x26              ;1952
0000e2  f7fffffe          BL       CmdResp1Error
0000e6  4604              MOV      r4,r0                 ;1952
0000e8  b10c              CBZ      r4,|L17.238|
0000ea  4620              MOV      r0,r4                 ;1956
0000ec  e799              B        |L17.34|
                  |L17.238|
0000ee  2700              MOVS     r7,#0                 ;1959
0000f0  e000              B        |L17.244|
                  |L17.242|
0000f2  1c7f              ADDS     r7,r7,#1              ;1959
                  |L17.244|
0000f4  9801              LDR      r0,[sp,#4]            ;1959
0000f6  4287              CMP      r7,r0                 ;1959
0000f8  d3fb              BCC      |L17.242|
0000fa  4668              MOV      r0,sp                 ;1963
0000fc  f7fffffe          BL       IsCardProgramming
000100  4604              MOV      r4,r0                 ;1963
000102  e003              B        |L17.268|
                  |L17.260|
000104  4668              MOV      r0,sp                 ;1967
000106  f7fffffe          BL       IsCardProgramming
00010a  4604              MOV      r4,r0                 ;1967
                  |L17.268|
00010c  b93c              CBNZ     r4,|L17.286|
00010e  f89d0000          LDRB     r0,[sp,#0]            ;1965
000112  2807              CMP      r0,#7                 ;1965
000114  d0f6              BEQ      |L17.260|
000116  f89d0000          LDRB     r0,[sp,#0]            ;1965
00011a  2806              CMP      r0,#6                 ;1965
00011c  d0f2              BEQ      |L17.260|
                  |L17.286|
00011e  4620              MOV      r0,r4                 ;1970
000120  e77f              B        |L17.34|
;;;1972   
                          ENDP

000122  0000              DCW      0x0000
                  |L17.292|
                          DCD      CSD_Tab
                  |L17.296|
                          DCD      0x40018000
                  |L17.300|
                          DCD      0x0001d4c0
                  |L17.304|
                          DCD      CardType
                  |L17.308|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;941     */
;;;942    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b530              PUSH     {r4,r5,lr}
;;;943    {
000002  4601              MOV      r1,r0
;;;944      SD_Error errorstatus = SD_OK;
000004  2000              MOVS     r0,#0
;;;945      uint8_t tmp = 0;
000006  2200              MOVS     r2,#0
;;;946    
;;;947      cardinfo->CardType = (uint8_t)CardType;
000008  4bac              LDR      r3,|L18.700|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f881304e          STRB     r3,[r1,#0x4e]
;;;948      cardinfo->RCA = (uint16_t)RCA;
000010  4bab              LDR      r3,|L18.704|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a1304c          STRH     r3,[r1,#0x4c]
;;;949    
;;;950      /*!< Byte 0 */
;;;951      tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
000018  4baa              LDR      r3,|L18.708|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;952      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;953      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;954      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;955    
;;;956      /*!< Byte 1 */
;;;957      tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
00002e  4ba5              LDR      r3,|L18.708|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;958      cardinfo->SD_csd.TAAC = tmp;
000036  70ca              STRB     r2,[r1,#3]
;;;959    
;;;960      /*!< Byte 2 */
;;;961      tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
000038  4ba2              LDR      r3,|L18.708|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;962      cardinfo->SD_csd.NSAC = tmp;
000040  710a              STRB     r2,[r1,#4]
;;;963    
;;;964      /*!< Byte 3 */
;;;965      tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
000042  4ba0              LDR      r3,|L18.708|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;966      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000046  714a              STRB     r2,[r1,#5]
;;;967    
;;;968      /*!< Byte 4 */
;;;969      tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;970      cardinfo->SD_csd.CardComdClasses = tmp << 4;
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;971    
;;;972      /*!< Byte 5 */
;;;973      tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
000050  4b9c              LDR      r3,|L18.708|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;974      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;975      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;976    
;;;977      /*!< Byte 6 */
;;;978      tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
000066  4b97              LDR      r3,|L18.708|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;979      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;980      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;981      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;982      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;983      cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;984    
;;;985      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
000088  4b8c              LDR      r3,|L18.700|
00008a  681b              LDR      r3,[r3,#0]  ; CardType
00008c  b11b              CBZ      r3,|L18.150|
00008e  4b8b              LDR      r3,|L18.700|
000090  681b              LDR      r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d13c              BNE      |L18.272|
                  |L18.150|
;;;986      {
;;;987        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
000096  0793              LSLS     r3,r2,#30
000098  0d1b              LSRS     r3,r3,#20
00009a  610b              STR      r3,[r1,#0x10]
;;;988    
;;;989        /*!< Byte 7 */
;;;990        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
00009c  4b89              LDR      r3,|L18.708|
00009e  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;991        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
0000a0  690b              LDR      r3,[r1,#0x10]
0000a2  ea430382          ORR      r3,r3,r2,LSL #2
0000a6  610b              STR      r3,[r1,#0x10]
;;;992    
;;;993        /*!< Byte 8 */
;;;994        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
0000a8  4b86              LDR      r3,|L18.708|
0000aa  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ac  0e1a              LSRS     r2,r3,#24
;;;995        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
0000ae  690b              LDR      r3,[r1,#0x10]
0000b0  ea431392          ORR      r3,r3,r2,LSR #6
0000b4  610b              STR      r3,[r1,#0x10]
;;;996    
;;;997        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
0000b6  f3c203c2          UBFX     r3,r2,#3,#3
0000ba  750b              STRB     r3,[r1,#0x14]
;;;998        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
0000bc  f0020307          AND      r3,r2,#7
0000c0  754b              STRB     r3,[r1,#0x15]
;;;999    
;;;1000       /*!< Byte 9 */
;;;1001       tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
0000c2  4b80              LDR      r3,|L18.708|
0000c4  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000c6  f3c34207          UBFX     r2,r3,#16,#8
;;;1002       cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
0000ca  0953              LSRS     r3,r2,#5
0000cc  758b              STRB     r3,[r1,#0x16]
;;;1003       cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
0000ce  f3c20382          UBFX     r3,r2,#2,#3
0000d2  75cb              STRB     r3,[r1,#0x17]
;;;1004       cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
0000d4  0793              LSLS     r3,r2,#30
0000d6  0f5b              LSRS     r3,r3,#29
0000d8  760b              STRB     r3,[r1,#0x18]
;;;1005       /*!< Byte 10 */
;;;1006       tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
0000da  4b7a              LDR      r3,|L18.708|
0000dc  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000de  f3c32207          UBFX     r2,r3,#8,#8
;;;1007       cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
0000e2  7e0b              LDRB     r3,[r1,#0x18]
0000e4  ea4313d2          ORR      r3,r3,r2,LSR #7
0000e8  760b              STRB     r3,[r1,#0x18]
;;;1008       
;;;1009       cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
0000ea  690b              LDR      r3,[r1,#0x10]
0000ec  1c5b              ADDS     r3,r3,#1
0000ee  644b              STR      r3,[r1,#0x44]
;;;1010       cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
0000f0  7e0c              LDRB     r4,[r1,#0x18]
0000f2  6c4b              LDR      r3,[r1,#0x44]
0000f4  1ca4              ADDS     r4,r4,#2
0000f6  2501              MOVS     r5,#1
0000f8  40a5              LSLS     r5,r5,r4
0000fa  436b              MULS     r3,r5,r3
0000fc  644b              STR      r3,[r1,#0x44]
;;;1011       cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
0000fe  7a0c              LDRB     r4,[r1,#8]
000100  2301              MOVS     r3,#1
000102  40a3              LSLS     r3,r3,r4
000104  648b              STR      r3,[r1,#0x48]
;;;1012       cardinfo->CardCapacity *= cardinfo->CardBlockSize;
000106  e9d13411          LDRD     r3,r4,[r1,#0x44]
00010a  4363              MULS     r3,r4,r3
00010c  644b              STR      r3,[r1,#0x44]
00010e  e021              B        |L18.340|
                  |L18.272|
;;;1013     }
;;;1014     else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000110  4b6a              LDR      r3,|L18.700|
000112  681b              LDR      r3,[r3,#0]  ; CardType
000114  2b02              CMP      r3,#2
000116  d11d              BNE      |L18.340|
;;;1015     {
;;;1016       /*!< Byte 7 */
;;;1017       tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
000118  4b6a              LDR      r3,|L18.708|
00011a  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;1018       cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
00011c  0693              LSLS     r3,r2,#26
00011e  0a9b              LSRS     r3,r3,#10
000120  610b              STR      r3,[r1,#0x10]
;;;1019   
;;;1020       /*!< Byte 8 */
;;;1021       tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
000122  4b68              LDR      r3,|L18.708|
000124  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000126  0e1a              LSRS     r2,r3,#24
;;;1022   
;;;1023       cardinfo->SD_csd.DeviceSize |= (tmp << 8);
000128  690b              LDR      r3,[r1,#0x10]
00012a  ea432302          ORR      r3,r3,r2,LSL #8
00012e  610b              STR      r3,[r1,#0x10]
;;;1024   
;;;1025       /*!< Byte 9 */
;;;1026       tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
000130  4b64              LDR      r3,|L18.708|
000132  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000134  f3c34207          UBFX     r2,r3,#16,#8
;;;1027   
;;;1028       cardinfo->SD_csd.DeviceSize |= (tmp);
000138  690b              LDR      r3,[r1,#0x10]
00013a  4313              ORRS     r3,r3,r2
00013c  610b              STR      r3,[r1,#0x10]
;;;1029   
;;;1030       /*!< Byte 10 */
;;;1031       tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
00013e  4b61              LDR      r3,|L18.708|
000140  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000142  f3c32207          UBFX     r2,r3,#8,#8
;;;1032       
;;;1033       cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
000146  690b              LDR      r3,[r1,#0x10]
000148  1c5b              ADDS     r3,r3,#1
00014a  04db              LSLS     r3,r3,#19
00014c  644b              STR      r3,[r1,#0x44]
;;;1034       cardinfo->CardBlockSize = 512;    
00014e  f44f7300          MOV      r3,#0x200
000152  648b              STR      r3,[r1,#0x48]
                  |L18.340|
;;;1035     }
;;;1036   
;;;1037   
;;;1038     cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
000154  f3c21380          UBFX     r3,r2,#6,#1
000158  f8013f19          STRB     r3,[r1,#0x19]!
;;;1039     cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
00015c  0693              LSLS     r3,r2,#26
00015e  0e5b              LSRS     r3,r3,#25
000160  704b              STRB     r3,[r1,#1]
;;;1040   
;;;1041     /*!< Byte 11 */
;;;1042     tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
000162  4b58              LDR      r3,|L18.708|
000164  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;1043     cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
000166  784b              LDRB     r3,[r1,#1]
000168  ea4313d2          ORR      r3,r3,r2,LSR #7
00016c  704b              STRB     r3,[r1,#1]
;;;1044     cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
00016e  f002037f          AND      r3,r2,#0x7f
000172  708b              STRB     r3,[r1,#2]
;;;1045   
;;;1046     /*!< Byte 12 */
;;;1047     tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
000174  4b53              LDR      r3,|L18.708|
000176  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
000178  0e1a              LSRS     r2,r3,#24
;;;1048     cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
00017a  09d3              LSRS     r3,r2,#7
00017c  70cb              STRB     r3,[r1,#3]
;;;1049     cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
00017e  f3c21341          UBFX     r3,r2,#5,#2
000182  710b              STRB     r3,[r1,#4]
;;;1050     cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
000184  f3c20382          UBFX     r3,r2,#2,#3
000188  714b              STRB     r3,[r1,#5]
;;;1051     cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
00018a  0793              LSLS     r3,r2,#30
00018c  0f1b              LSRS     r3,r3,#28
00018e  718b              STRB     r3,[r1,#6]
;;;1052   
;;;1053     /*!< Byte 13 */
;;;1054     tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
000190  4b4c              LDR      r3,|L18.708|
000192  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
000194  f3c34207          UBFX     r2,r3,#16,#8
;;;1055     cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
000198  798b              LDRB     r3,[r1,#6]
00019a  ea431392          ORR      r3,r3,r2,LSR #6
00019e  718b              STRB     r3,[r1,#6]
;;;1056     cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
0001a0  f3c21340          UBFX     r3,r2,#5,#1
0001a4  71cb              STRB     r3,[r1,#7]
;;;1057     cardinfo->SD_csd.Reserved3 = 0;
0001a6  2300              MOVS     r3,#0
0001a8  720b              STRB     r3,[r1,#8]
;;;1058     cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
0001aa  f0020301          AND      r3,r2,#1
0001ae  724b              STRB     r3,[r1,#9]
;;;1059   
;;;1060     /*!< Byte 14 */
;;;1061     tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
0001b0  4b44              LDR      r3,|L18.708|
0001b2  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001b4  f3c32207          UBFX     r2,r3,#8,#8
;;;1062     cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
0001b8  09d3              LSRS     r3,r2,#7
0001ba  728b              STRB     r3,[r1,#0xa]
;;;1063     cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
0001bc  f3c21380          UBFX     r3,r2,#6,#1
0001c0  72cb              STRB     r3,[r1,#0xb]
;;;1064     cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
0001c2  f3c21340          UBFX     r3,r2,#5,#1
0001c6  730b              STRB     r3,[r1,#0xc]
;;;1065     cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
0001c8  f3c21300          UBFX     r3,r2,#4,#1
0001cc  734b              STRB     r3,[r1,#0xd]
;;;1066     cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
0001ce  f3c20381          UBFX     r3,r2,#2,#2
0001d2  738b              STRB     r3,[r1,#0xe]
;;;1067     cardinfo->SD_csd.ECC = (tmp & 0x03);
0001d4  f0020303          AND      r3,r2,#3
0001d8  73cb              STRB     r3,[r1,#0xf]
;;;1068   
;;;1069     /*!< Byte 15 */
;;;1070     tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
0001da  4b3a              LDR      r3,|L18.708|
0001dc  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;1071     cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
0001de  0853              LSRS     r3,r2,#1
0001e0  740b              STRB     r3,[r1,#0x10]
;;;1072     cardinfo->SD_csd.Reserved4 = 1;
0001e2  2301              MOVS     r3,#1
0001e4  744b              STRB     r3,[r1,#0x11]
;;;1073   
;;;1074   
;;;1075     /*!< Byte 0 */
;;;1076     tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
0001e6  4b38              LDR      r3,|L18.712|
0001e8  681b              LDR      r3,[r3,#0]  ; CID_Tab
0001ea  0e1a              LSRS     r2,r3,#24
;;;1077     cardinfo->SD_cid.ManufacturerID = tmp;
0001ec  74ca              STRB     r2,[r1,#0x13]
0001ee  3919              SUBS     r1,r1,#0x19
;;;1078   
;;;1079     /*!< Byte 1 */
;;;1080     tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
0001f0  4b35              LDR      r3,|L18.712|
0001f2  681b              LDR      r3,[r3,#0]  ; CID_Tab
0001f4  f3c34207          UBFX     r2,r3,#16,#8
;;;1081     cardinfo->SD_cid.OEM_AppliID = tmp << 8;
0001f8  0214              LSLS     r4,r2,#8
0001fa  85cc              STRH     r4,[r1,#0x2e]
;;;1082   
;;;1083     /*!< Byte 2 */
;;;1084     tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
0001fc  4b32              LDR      r3,|L18.712|
0001fe  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000200  f3c32207          UBFX     r2,r3,#8,#8
;;;1085     cardinfo->SD_cid.OEM_AppliID |= tmp;
000204  8dcb              LDRH     r3,[r1,#0x2e]
000206  4313              ORRS     r3,r3,r2
000208  85cb              STRH     r3,[r1,#0x2e]
;;;1086   
;;;1087     /*!< Byte 3 */
;;;1088     tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
00020a  4b2f              LDR      r3,|L18.712|
00020c  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;1089     cardinfo->SD_cid.ProdName1 = tmp << 24;
00020e  0614              LSLS     r4,r2,#24
000210  630c              STR      r4,[r1,#0x30]
;;;1090   
;;;1091     /*!< Byte 4 */
;;;1092     tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
000212  685b              LDR      r3,[r3,#4]  ; CID_Tab
000214  0e1a              LSRS     r2,r3,#24
;;;1093     cardinfo->SD_cid.ProdName1 |= tmp << 16;
000216  6b0b              LDR      r3,[r1,#0x30]
000218  ea434402          ORR      r4,r3,r2,LSL #16
00021c  630c              STR      r4,[r1,#0x30]
;;;1094   
;;;1095     /*!< Byte 5 */
;;;1096     tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
00021e  4b2a              LDR      r3,|L18.712|
000220  685b              LDR      r3,[r3,#4]  ; CID_Tab
000222  f3c34207          UBFX     r2,r3,#16,#8
;;;1097     cardinfo->SD_cid.ProdName1 |= tmp << 8;
000226  6b0b              LDR      r3,[r1,#0x30]
000228  ea432402          ORR      r4,r3,r2,LSL #8
00022c  630c              STR      r4,[r1,#0x30]
;;;1098   
;;;1099     /*!< Byte 6 */
;;;1100     tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
00022e  4b26              LDR      r3,|L18.712|
000230  889b              LDRH     r3,[r3,#4]  ; CID_Tab
000232  f3c32207          UBFX     r2,r3,#8,#8
;;;1101     cardinfo->SD_cid.ProdName1 |= tmp;
000236  6b0b              LDR      r3,[r1,#0x30]
000238  4313              ORRS     r3,r3,r2
00023a  630b              STR      r3,[r1,#0x30]
;;;1102   
;;;1103     /*!< Byte 7 */
;;;1104     tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
00023c  4b22              LDR      r3,|L18.712|
00023e  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;1105     cardinfo->SD_cid.ProdName2 = tmp;
000240  2334              MOVS     r3,#0x34
000242  545a              STRB     r2,[r3,r1]
;;;1106   
;;;1107     /*!< Byte 8 */
;;;1108     tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
000244  4b20              LDR      r3,|L18.712|
000246  689b              LDR      r3,[r3,#8]  ; CID_Tab
000248  0e1a              LSRS     r2,r3,#24
;;;1109     cardinfo->SD_cid.ProdRev = tmp;
00024a  2335              MOVS     r3,#0x35
00024c  545a              STRB     r2,[r3,r1]
;;;1110   
;;;1111     /*!< Byte 9 */
;;;1112     tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
00024e  4b1e              LDR      r3,|L18.712|
000250  689b              LDR      r3,[r3,#8]  ; CID_Tab
000252  f3c34207          UBFX     r2,r3,#16,#8
;;;1113     cardinfo->SD_cid.ProdSN = tmp << 24;
000256  0614              LSLS     r4,r2,#24
000258  638c              STR      r4,[r1,#0x38]
;;;1114   
;;;1115     /*!< Byte 10 */
;;;1116     tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
00025a  4b1b              LDR      r3,|L18.712|
00025c  891b              LDRH     r3,[r3,#8]  ; CID_Tab
00025e  f3c32207          UBFX     r2,r3,#8,#8
;;;1117     cardinfo->SD_cid.ProdSN |= tmp << 16;
000262  6b8b              LDR      r3,[r1,#0x38]
000264  ea434402          ORR      r4,r3,r2,LSL #16
000268  638c              STR      r4,[r1,#0x38]
;;;1118   
;;;1119     /*!< Byte 11 */
;;;1120     tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
00026a  4b17              LDR      r3,|L18.712|
00026c  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;1121     cardinfo->SD_cid.ProdSN |= tmp << 8;
00026e  6b8b              LDR      r3,[r1,#0x38]
000270  ea432402          ORR      r4,r3,r2,LSL #8
000274  638c              STR      r4,[r1,#0x38]
;;;1122   
;;;1123     /*!< Byte 12 */
;;;1124     tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
000276  4b14              LDR      r3,|L18.712|
000278  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
00027a  0e1a              LSRS     r2,r3,#24
;;;1125     cardinfo->SD_cid.ProdSN |= tmp;
00027c  6b8b              LDR      r3,[r1,#0x38]
00027e  4313              ORRS     r3,r3,r2
000280  638b              STR      r3,[r1,#0x38]
;;;1126   
;;;1127     /*!< Byte 13 */
;;;1128     tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
000282  4b11              LDR      r3,|L18.712|
000284  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
000286  f3c34207          UBFX     r2,r3,#16,#8
;;;1129     cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
00028a  233c              MOVS     r3,#0x3c
00028c  5c5b              LDRB     r3,[r3,r1]
00028e  ea431412          ORR      r4,r3,r2,LSR #4
000292  233c              MOVS     r3,#0x3c
000294  545c              STRB     r4,[r3,r1]
;;;1130     cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
000296  0713              LSLS     r3,r2,#28
000298  0d1c              LSRS     r4,r3,#20
00029a  87cc              STRH     r4,[r1,#0x3e]
;;;1131   
;;;1132     /*!< Byte 14 */
;;;1133     tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
00029c  4b0a              LDR      r3,|L18.712|
00029e  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002a0  f3c32207          UBFX     r2,r3,#8,#8
;;;1134     cardinfo->SD_cid.ManufactDate |= tmp;
0002a4  8fcb              LDRH     r3,[r1,#0x3e]
0002a6  4313              ORRS     r3,r3,r2
0002a8  87cb              STRH     r3,[r1,#0x3e]
;;;1135   
;;;1136     /*!< Byte 15 */
;;;1137     tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
0002aa  4b07              LDR      r3,|L18.712|
0002ac  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;1138     cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
0002ae  0854              LSRS     r4,r2,#1
0002b0  2340              MOVS     r3,#0x40
0002b2  545c              STRB     r4,[r3,r1]
;;;1139     cardinfo->SD_cid.Reserved2 = 1;
0002b4  2401              MOVS     r4,#1
0002b6  2341              MOVS     r3,#0x41
0002b8  545c              STRB     r4,[r3,r1]
;;;1140     
;;;1141     return(errorstatus);
;;;1142   }
0002ba  bd30              POP      {r4,r5,pc}
;;;1143   
                          ENDP

                  |L18.700|
                          DCD      CardType
                  |L18.704|
                          DCD      ||RCA||
                  |L18.708|
                          DCD      CSD_Tab
                  |L18.712|
                          DCD      CID_Tab

                          AREA ||i.SD_GetCardStatus||, CODE, READONLY, ALIGN=2

                  SD_GetCardStatus PROC
;;;1153     */
;;;1154   SD_Error SD_GetCardStatus(SD_CardStatus *cardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1155   {
000002  4604              MOV      r4,r0
;;;1156     SD_Error errorstatus = SD_OK;
000004  2600              MOVS     r6,#0
;;;1157     uint8_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;1158   
;;;1159     errorstatus = SD_SendSDStatus((uint32_t *)SDSTATUS_Tab);
000008  4824              LDR      r0,|L19.156|
00000a  f7fffffe          BL       SD_SendSDStatus
00000e  4606              MOV      r6,r0
;;;1160   
;;;1161     if (errorstatus  != SD_OK)
000010  b10e              CBZ      r6,|L19.22|
;;;1162     {
;;;1163       return(errorstatus);
000012  4630              MOV      r0,r6
                  |L19.20|
;;;1164     }
;;;1165   
;;;1166     /*!< Byte 0 */
;;;1167     tmp = (uint8_t)((SDSTATUS_Tab[0] & 0xC0) >> 6);
;;;1168     cardstatus->DAT_BUS_WIDTH = tmp;
;;;1169   
;;;1170     /*!< Byte 0 */
;;;1171     tmp = (uint8_t)((SDSTATUS_Tab[0] & 0x20) >> 5);
;;;1172     cardstatus->SECURED_MODE = tmp;
;;;1173   
;;;1174     /*!< Byte 2 */
;;;1175     tmp = (uint8_t)((SDSTATUS_Tab[2] & 0xFF));
;;;1176     cardstatus->SD_CARD_TYPE = tmp << 8;
;;;1177   
;;;1178     /*!< Byte 3 */
;;;1179     tmp = (uint8_t)((SDSTATUS_Tab[3] & 0xFF));
;;;1180     cardstatus->SD_CARD_TYPE |= tmp;
;;;1181   
;;;1182     /*!< Byte 4 */
;;;1183     tmp = (uint8_t)(SDSTATUS_Tab[4] & 0xFF);
;;;1184     cardstatus->SIZE_OF_PROTECTED_AREA = tmp << 24;
;;;1185   
;;;1186     /*!< Byte 5 */
;;;1187     tmp = (uint8_t)(SDSTATUS_Tab[5] & 0xFF);
;;;1188     cardstatus->SIZE_OF_PROTECTED_AREA |= tmp << 16;
;;;1189   
;;;1190     /*!< Byte 6 */
;;;1191     tmp = (uint8_t)(SDSTATUS_Tab[6] & 0xFF);
;;;1192     cardstatus->SIZE_OF_PROTECTED_AREA |= tmp << 8;
;;;1193   
;;;1194     /*!< Byte 7 */
;;;1195     tmp = (uint8_t)(SDSTATUS_Tab[7] & 0xFF);
;;;1196     cardstatus->SIZE_OF_PROTECTED_AREA |= tmp;
;;;1197   
;;;1198     /*!< Byte 8 */
;;;1199     tmp = (uint8_t)((SDSTATUS_Tab[8] & 0xFF));
;;;1200     cardstatus->SPEED_CLASS = tmp;
;;;1201   
;;;1202     /*!< Byte 9 */
;;;1203     tmp = (uint8_t)((SDSTATUS_Tab[9] & 0xFF));
;;;1204     cardstatus->PERFORMANCE_MOVE = tmp;
;;;1205   
;;;1206     /*!< Byte 10 */
;;;1207     tmp = (uint8_t)((SDSTATUS_Tab[10] & 0xF0) >> 4);
;;;1208     cardstatus->AU_SIZE = tmp;
;;;1209   
;;;1210     /*!< Byte 11 */
;;;1211     tmp = (uint8_t)(SDSTATUS_Tab[11] & 0xFF);
;;;1212     cardstatus->ERASE_SIZE = tmp << 8;
;;;1213   
;;;1214     /*!< Byte 12 */
;;;1215     tmp = (uint8_t)(SDSTATUS_Tab[12] & 0xFF);
;;;1216     cardstatus->ERASE_SIZE |= tmp;
;;;1217   
;;;1218     /*!< Byte 13 */
;;;1219     tmp = (uint8_t)((SDSTATUS_Tab[13] & 0xFC) >> 2);
;;;1220     cardstatus->ERASE_TIMEOUT = tmp;
;;;1221   
;;;1222     /*!< Byte 13 */
;;;1223     tmp = (uint8_t)((SDSTATUS_Tab[13] & 0x3));
;;;1224     cardstatus->ERASE_OFFSET = tmp;
;;;1225    
;;;1226     return(errorstatus);
;;;1227   }
000014  bd70              POP      {r4-r6,pc}
                  |L19.22|
000016  4821              LDR      r0,|L19.156|
000018  7800              LDRB     r0,[r0,#0]            ;1167  ; SDSTATUS_Tab
00001a  0985              LSRS     r5,r0,#6              ;1167
00001c  7025              STRB     r5,[r4,#0]            ;1168
00001e  481f              LDR      r0,|L19.156|
000020  7800              LDRB     r0,[r0,#0]            ;1171  ; SDSTATUS_Tab
000022  f3c01540          UBFX     r5,r0,#5,#1           ;1171
000026  7065              STRB     r5,[r4,#1]            ;1172
000028  481c              LDR      r0,|L19.156|
00002a  7885              LDRB     r5,[r0,#2]            ;1175  ; SDSTATUS_Tab
00002c  0228              LSLS     r0,r5,#8              ;1176
00002e  8060              STRH     r0,[r4,#2]            ;1176
000030  481a              LDR      r0,|L19.156|
000032  78c5              LDRB     r5,[r0,#3]            ;1179  ; SDSTATUS_Tab
000034  8860              LDRH     r0,[r4,#2]            ;1180
000036  4328              ORRS     r0,r0,r5              ;1180
000038  8060              STRH     r0,[r4,#2]            ;1180
00003a  4818              LDR      r0,|L19.156|
00003c  7905              LDRB     r5,[r0,#4]            ;1183  ; SDSTATUS_Tab
00003e  0628              LSLS     r0,r5,#24             ;1184
000040  6060              STR      r0,[r4,#4]            ;1184
000042  4816              LDR      r0,|L19.156|
000044  7945              LDRB     r5,[r0,#5]            ;1187  ; SDSTATUS_Tab
000046  6860              LDR      r0,[r4,#4]            ;1188
000048  ea404005          ORR      r0,r0,r5,LSL #16      ;1188
00004c  6060              STR      r0,[r4,#4]            ;1188
00004e  4813              LDR      r0,|L19.156|
000050  7985              LDRB     r5,[r0,#6]            ;1191  ; SDSTATUS_Tab
000052  6860              LDR      r0,[r4,#4]            ;1192
000054  ea402005          ORR      r0,r0,r5,LSL #8       ;1192
000058  6060              STR      r0,[r4,#4]            ;1192
00005a  4810              LDR      r0,|L19.156|
00005c  79c5              LDRB     r5,[r0,#7]            ;1195  ; SDSTATUS_Tab
00005e  6860              LDR      r0,[r4,#4]            ;1196
000060  4328              ORRS     r0,r0,r5              ;1196
000062  6060              STR      r0,[r4,#4]            ;1196
000064  480d              LDR      r0,|L19.156|
000066  7a05              LDRB     r5,[r0,#8]            ;1199  ; SDSTATUS_Tab
000068  7225              STRB     r5,[r4,#8]            ;1200
00006a  7a45              LDRB     r5,[r0,#9]            ;1203  ; SDSTATUS_Tab
00006c  7265              STRB     r5,[r4,#9]            ;1204
00006e  7a80              LDRB     r0,[r0,#0xa]          ;1207  ; SDSTATUS_Tab
000070  0905              LSRS     r5,r0,#4              ;1207
000072  72a5              STRB     r5,[r4,#0xa]          ;1208
000074  4809              LDR      r0,|L19.156|
000076  7ac5              LDRB     r5,[r0,#0xb]          ;1211  ; SDSTATUS_Tab
000078  0228              LSLS     r0,r5,#8              ;1212
00007a  81a0              STRH     r0,[r4,#0xc]          ;1212
00007c  4807              LDR      r0,|L19.156|
00007e  7b05              LDRB     r5,[r0,#0xc]          ;1215  ; SDSTATUS_Tab
000080  89a0              LDRH     r0,[r4,#0xc]          ;1216
000082  4328              ORRS     r0,r0,r5              ;1216
000084  81a0              STRH     r0,[r4,#0xc]          ;1216
000086  4805              LDR      r0,|L19.156|
000088  7b40              LDRB     r0,[r0,#0xd]          ;1219  ; SDSTATUS_Tab
00008a  0885              LSRS     r5,r0,#2              ;1219
00008c  73a5              STRB     r5,[r4,#0xe]          ;1220
00008e  4803              LDR      r0,|L19.156|
000090  7b40              LDRB     r0,[r0,#0xd]          ;1223  ; SDSTATUS_Tab
000092  f0000503          AND      r5,r0,#3              ;1223
000096  73e5              STRB     r5,[r4,#0xf]          ;1224
000098  4630              MOV      r0,r6                 ;1226
00009a  e7bb              B        |L19.20|
;;;1228   
                          ENDP

                  |L19.156|
                          DCD      SDSTATUS_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;588      */
;;;589    SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;590    {
;;;591      uint32_t resp1 = 0;   
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;592    
;;;593        if (SD_SendStatus(&resp1) != SD_OK)
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       SD_SendStatus
00000c  b108              CBZ      r0,|L20.18|
;;;594        {
;;;595          return SD_CARD_ERROR;
00000e  20ff              MOVS     r0,#0xff
                  |L20.16|
;;;596        }
;;;597        else
;;;598        {
;;;599          return (SDCardState)((resp1 >> 9) & 0x0F);
;;;600        } 
;;;601    }
000010  bd08              POP      {r3,pc}
                  |L20.18|
000012  9800              LDR      r0,[sp,#0]            ;599
000014  f3c02043          UBFX     r0,r0,#9,#4           ;599
000018  e7fa              B        |L20.16|
;;;602    
                          ENDP


                          AREA ||i.SD_GetStatus||, CODE, READONLY, ALIGN=1

                  SD_GetStatus PROC
;;;563      */
;;;564    SDTransferState SD_GetStatus(void)
000000  b510              PUSH     {r4,lr}
;;;565    {
;;;566      SDCardState cardstate =  SD_CARD_TRANSFER;
000002  2404              MOVS     r4,#4
;;;567    
;;;568      cardstate = SD_GetState();
000004  f7fffffe          BL       SD_GetState
000008  4604              MOV      r4,r0
;;;569      
;;;570      if (cardstate == SD_CARD_TRANSFER)
00000a  2c04              CMP      r4,#4
00000c  d101              BNE      |L21.18|
;;;571      {
;;;572        return(SD_TRANSFER_OK);
00000e  2000              MOVS     r0,#0
                  |L21.16|
;;;573      }
;;;574      else if(cardstate == SD_CARD_ERROR)
;;;575      {
;;;576        return (SD_TRANSFER_ERROR);
;;;577      }
;;;578      else
;;;579      {
;;;580        return(SD_TRANSFER_BUSY);
;;;581      }
;;;582    }
000010  bd10              POP      {r4,pc}
                  |L21.18|
000012  2cff              CMP      r4,#0xff              ;574
000014  d101              BNE      |L21.26|
000016  2002              MOVS     r0,#2                 ;576
000018  e7fa              B        |L21.16|
                  |L21.26|
00001a  2001              MOVS     r0,#1                 ;580
00001c  e7f8              B        |L21.16|
;;;583    
                          ENDP


                          AREA ||i.SD_GetTransferState||, CODE, READONLY, ALIGN=2

                  SD_GetTransferState PROC
;;;1848     */
;;;1849   SDTransferState SD_GetTransferState(void)
000000  4804              LDR      r0,|L22.20|
;;;1850   {
;;;1851     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
000002  6b40              LDR      r0,[r0,#0x34]
000004  f4005040          AND      r0,r0,#0x3000
000008  b108              CBZ      r0,|L22.14|
;;;1852     {
;;;1853       return(SD_TRANSFER_BUSY);
00000a  2001              MOVS     r0,#1
                  |L22.12|
;;;1854     }
;;;1855     else
;;;1856     {
;;;1857       return(SD_TRANSFER_OK);
;;;1858     }
;;;1859   }
00000c  4770              BX       lr
                  |L22.14|
00000e  2000              MOVS     r0,#0                 ;1857
000010  e7fc              B        |L22.12|
;;;1860   
                          ENDP

000012  0000              DCW      0x0000
                  |L22.20|
                          DCD      0x40018000

                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;477     */
;;;478    SD_Error SD_Init(void)
000000  b510              PUSH     {r4,lr}
;;;479    {
;;;480    	/*重置SD_Error状态*/
;;;481      SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;482      
;;;483    	NVIC_Configuration();
000004  f7fffffe          BL       NVIC_Configuration
;;;484    	
;;;485      /* SDIO 外设底层引脚初始化 */
;;;486      GPIO_Configuration();
000008  f7fffffe          BL       GPIO_Configuration
;;;487    
;;;488      /*对SDIO的所有寄存器进行复位*/
;;;489      SDIO_DeInit();  
00000c  f7fffffe          BL       SDIO_DeInit
;;;490    
;;;491      /*上电并进行卡识别流程，确认卡的操作电压  */
;;;492      errorstatus = SD_PowerON(); 
000010  f7fffffe          BL       SD_PowerON
000014  4604              MOV      r4,r0
;;;493    
;;;494      /*如果上电，识别不成功，返回“响应超时”错误 */
;;;495      if (errorstatus != SD_OK)
000016  b10c              CBZ      r4,|L23.28|
;;;496      {
;;;497        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;498        return(errorstatus);	
000018  4620              MOV      r0,r4
                  |L23.26|
;;;499      }
;;;500    
;;;501      /*卡识别成功，进行卡初始化    */
;;;502      errorstatus = SD_InitializeCards(); 
;;;503    
;;;504      if (errorstatus != SD_OK)	  //失败返回
;;;505      {
;;;506        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;507        return(errorstatus);
;;;508      }
;;;509    
;;;510      /* 配置SDIO外设
;;;511       * 上电识别，卡初始化都完成后，进入数据传输模式，提高读写速度
;;;512       * 速度若超过24M要进入bypass模式 
;;;513       */
;;;514      
;;;515      /* SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_TRANSFER_CLK_DIV) */  
;;;516      SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
;;;517    
;;;518    	/*上升沿采集数据 */
;;;519      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;520    
;;;521    	/* 时钟频率若超过24M,要开启此模式 */
;;;522      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable; 
;;;523    	
;;;524    	/* 若开启此功能，在总线空闲时关闭sd_clk时钟 */
;;;525      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;526    	
;;;527      /* 暂时配置成1bit模式 */	
;;;528      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;529    
;;;530    	/* 硬件流，若开启，在FIFO不能进行发送和接收数据时，数据传输暂停 */
;;;531      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable; 
;;;532    	
;;;533      SDIO_Init(&SDIO_InitStructure);
;;;534      
;;;535      if (errorstatus == SD_OK)
;;;536      {
;;;537        /* 用来读取csd/cid寄存器 */
;;;538        errorstatus = SD_GetCardInfo(&SDCardInfo);	
;;;539      }
;;;540    
;;;541      if (errorstatus == SD_OK)
;;;542      {
;;;543        /* 通过cmd7  ,rca选择要操作的卡 */
;;;544        errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));	  
;;;545      }
;;;546    
;;;547      if (errorstatus == SD_OK)
;;;548      {
;;;549    			/* 最后为了提高读写，开启4bits模式 */
;;;550        errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);
;;;551      }  
;;;552    
;;;553      return(errorstatus);
;;;554    }
00001a  bd10              POP      {r4,pc}
                  |L23.28|
00001c  f7fffffe          BL       SD_InitializeCards
000020  4604              MOV      r4,r0                 ;502
000022  b10c              CBZ      r4,|L23.40|
000024  4620              MOV      r0,r4                 ;507
000026  e7f8              B        |L23.26|
                  |L23.40|
000028  2001              MOVS     r0,#1                 ;516
00002a  4910              LDR      r1,|L23.108|
00002c  7508              STRB     r0,[r1,#0x14]         ;516
00002e  2000              MOVS     r0,#0                 ;519
000030  6008              STR      r0,[r1,#0]            ;519  ; SDIO_InitStructure
000032  6048              STR      r0,[r1,#4]            ;522  ; SDIO_InitStructure
000034  6088              STR      r0,[r1,#8]            ;525  ; SDIO_InitStructure
000036  60c8              STR      r0,[r1,#0xc]          ;528  ; SDIO_InitStructure
000038  6108              STR      r0,[r1,#0x10]         ;531  ; SDIO_InitStructure
00003a  4608              MOV      r0,r1                 ;533
00003c  f7fffffe          BL       SDIO_Init
000040  b91c              CBNZ     r4,|L23.74|
000042  480b              LDR      r0,|L23.112|
000044  f7fffffe          BL       SD_GetCardInfo
000048  4604              MOV      r4,r0                 ;538
                  |L23.74|
00004a  b934              CBNZ     r4,|L23.90|
00004c  4908              LDR      r1,|L23.112|
00004e  f8b1104c          LDRH     r1,[r1,#0x4c]         ;544  ; SDCardInfo
000052  0408              LSLS     r0,r1,#16             ;544
000054  f7fffffe          BL       SD_SelectDeselect
000058  4604              MOV      r4,r0                 ;544
                  |L23.90|
00005a  b924              CBNZ     r4,|L23.102|
00005c  f44f6000          MOV      r0,#0x800             ;550
000060  f7fffffe          BL       SD_EnableWideBusOperation
000064  4604              MOV      r4,r0                 ;550
                  |L23.102|
000066  4620              MOV      r0,r4                 ;553
000068  e7d7              B        |L23.26|
;;;555    
                          ENDP

00006a  0000              DCW      0x0000
                  |L23.108|
                          DCD      SDIO_InitStructure
                  |L23.112|
                          DCD      SDCardInfo

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;836     */
;;;837    SD_Error SD_InitializeCards(void)
000000  b538              PUSH     {r3-r5,lr}
;;;838    {
;;;839      SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;840      uint16_t rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;841    
;;;842      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
000008  f7fffffe          BL       SDIO_GetPowerState
00000c  b910              CBNZ     r0,|L24.20|
;;;843      {
;;;844        errorstatus = SD_REQUEST_NOT_APPLICABLE;
00000e  2425              MOVS     r4,#0x25
;;;845        return(errorstatus);
000010  4620              MOV      r0,r4
                  |L24.18|
;;;846      }
;;;847    	
;;;848    	/* 判断卡的类型 */
;;;849      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;850      {
;;;851        /* Send CMD2 ALL_SEND_CID 
;;;852    		 * 响应：R2，对应CID寄存器
;;;853    		 */
;;;854        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;855        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;856        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;857        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;858        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;859        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;860    
;;;861        errorstatus = CmdResp2Error();
;;;862    
;;;863        if (SD_OK != errorstatus)
;;;864        {
;;;865          return(errorstatus);
;;;866        }
;;;867    		
;;;868    		/* 将返回的CID信息存储起来 */
;;;869        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;870        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;871        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;872        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;873      }
;;;874    /********************************************************************************************************/
;;;875      if (   (SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) 
;;;876    		   ||(SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) 
;;;877    	     ||(SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
;;;878           ||(SDIO_HIGH_CAPACITY_SD_CARD == CardType) )	 /* 使用的是2.0的卡 */
;;;879      {
;;;880        /* Send CMD3 SET_REL_ADDR with argument 0 
;;;881         * SD Card publishes its RCA.
;;;882         * 响应：R6，对应RCA寄存器		
;;;883    		 */
;;;884        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;885        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;		
;;;886        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;		
;;;887        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;888        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;889        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;890    		
;;;891    		/* 把接收到的卡相对地址存起来 */
;;;892        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);	
;;;893    
;;;894        if (SD_OK != errorstatus)
;;;895        {
;;;896          return(errorstatus);
;;;897        }
;;;898      }
;;;899    /********************************************************************************************************/
;;;900      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;901      {
;;;902        RCA = rca;
;;;903    
;;;904        /* Send CMD9 SEND_CSD with argument as card's RCA 
;;;905    		 * 响应:R2  对应寄存器CSD(Card-Specific Data)
;;;906    		 */
;;;907        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
;;;908        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;909        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;910        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;911        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;912        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;913    
;;;914        errorstatus = CmdResp2Error();
;;;915    
;;;916        if (SD_OK != errorstatus)
;;;917        {
;;;918          return(errorstatus);
;;;919        }
;;;920    
;;;921        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;922        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;923        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;924        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;925      }
;;;926    /********************************************************************************************************/	
;;;927    	/*全部卡初始化成功 */
;;;928      errorstatus = SD_OK; 
;;;929    
;;;930      return(errorstatus);
;;;931    }
000012  bd38              POP      {r3-r5,pc}
                  |L24.20|
000014  4844              LDR      r0,|L24.296|
000016  6800              LDR      r0,[r0,#0]            ;849  ; CardType
000018  2804              CMP      r0,#4                 ;849
00001a  d028              BEQ      |L24.110|
00001c  2000              MOVS     r0,#0                 ;854
00001e  4943              LDR      r1,|L24.300|
000020  6008              STR      r0,[r1,#0]            ;854  ; SDIO_CmdInitStructure
000022  2002              MOVS     r0,#2                 ;855
000024  6048              STR      r0,[r1,#4]            ;855  ; SDIO_CmdInitStructure
000026  20c0              MOVS     r0,#0xc0              ;856
000028  6088              STR      r0,[r1,#8]            ;856  ; SDIO_CmdInitStructure
00002a  2000              MOVS     r0,#0                 ;857
00002c  60c8              STR      r0,[r1,#0xc]          ;857  ; SDIO_CmdInitStructure
00002e  f44f6080          MOV      r0,#0x400             ;858
000032  6108              STR      r0,[r1,#0x10]         ;858  ; SDIO_CmdInitStructure
000034  4608              MOV      r0,r1                 ;859
000036  f7fffffe          BL       SDIO_SendCommand
00003a  f7fffffe          BL       CmdResp2Error
00003e  4604              MOV      r4,r0                 ;861
000040  b10c              CBZ      r4,|L24.70|
000042  4620              MOV      r0,r4                 ;865
000044  e7e5              B        |L24.18|
                  |L24.70|
000046  2000              MOVS     r0,#0                 ;869
000048  f7fffffe          BL       SDIO_GetResponse
00004c  4938              LDR      r1,|L24.304|
00004e  6008              STR      r0,[r1,#0]            ;869  ; CID_Tab
000050  2004              MOVS     r0,#4                 ;870
000052  f7fffffe          BL       SDIO_GetResponse
000056  4936              LDR      r1,|L24.304|
000058  6048              STR      r0,[r1,#4]            ;870  ; CID_Tab
00005a  2008              MOVS     r0,#8                 ;871
00005c  f7fffffe          BL       SDIO_GetResponse
000060  4933              LDR      r1,|L24.304|
000062  6088              STR      r0,[r1,#8]            ;871  ; CID_Tab
000064  200c              MOVS     r0,#0xc               ;872
000066  f7fffffe          BL       SDIO_GetResponse
00006a  4931              LDR      r1,|L24.304|
00006c  60c8              STR      r0,[r1,#0xc]          ;872  ; CID_Tab
                  |L24.110|
00006e  482e              LDR      r0,|L24.296|
000070  6800              LDR      r0,[r0,#0]            ;875  ; CardType
000072  b158              CBZ      r0,|L24.140|
000074  482c              LDR      r0,|L24.296|
000076  6800              LDR      r0,[r0,#0]            ;876  ; CardType
000078  2801              CMP      r0,#1                 ;876
00007a  d007              BEQ      |L24.140|
00007c  482a              LDR      r0,|L24.296|
00007e  6800              LDR      r0,[r0,#0]            ;877  ; CardType
000080  2806              CMP      r0,#6                 ;877
000082  d003              BEQ      |L24.140|
000084  4828              LDR      r0,|L24.296|
000086  6800              LDR      r0,[r0,#0]            ;878  ; CardType
000088  2802              CMP      r0,#2                 ;878
00008a  d116              BNE      |L24.186|
                  |L24.140|
00008c  2000              MOVS     r0,#0                 ;884
00008e  4927              LDR      r1,|L24.300|
000090  6008              STR      r0,[r1,#0]            ;884  ; SDIO_CmdInitStructure
000092  2003              MOVS     r0,#3                 ;885
000094  6048              STR      r0,[r1,#4]            ;885  ; SDIO_CmdInitStructure
000096  2040              MOVS     r0,#0x40              ;886
000098  6088              STR      r0,[r1,#8]            ;886  ; SDIO_CmdInitStructure
00009a  2000              MOVS     r0,#0                 ;887
00009c  60c8              STR      r0,[r1,#0xc]          ;887  ; SDIO_CmdInitStructure
00009e  f44f6080          MOV      r0,#0x400             ;888
0000a2  6108              STR      r0,[r1,#0x10]         ;888  ; SDIO_CmdInitStructure
0000a4  4608              MOV      r0,r1                 ;889
0000a6  f7fffffe          BL       SDIO_SendCommand
0000aa  4669              MOV      r1,sp                 ;892
0000ac  2003              MOVS     r0,#3                 ;892
0000ae  f7fffffe          BL       CmdResp6Error
0000b2  4604              MOV      r4,r0                 ;892
0000b4  b10c              CBZ      r4,|L24.186|
0000b6  4620              MOV      r0,r4                 ;896
0000b8  e7ab              B        |L24.18|
                  |L24.186|
0000ba  481b              LDR      r0,|L24.296|
0000bc  6800              LDR      r0,[r0,#0]            ;900  ; CardType
0000be  2804              CMP      r0,#4                 ;900
0000c0  d02e              BEQ      |L24.288|
0000c2  f8bd0000          LDRH     r0,[sp,#0]            ;902
0000c6  491b              LDR      r1,|L24.308|
0000c8  6008              STR      r0,[r1,#0]            ;902  ; RCA
0000ca  f8bd0000          LDRH     r0,[sp,#0]            ;907
0000ce  0400              LSLS     r0,r0,#16             ;907
0000d0  4916              LDR      r1,|L24.300|
0000d2  6008              STR      r0,[r1,#0]            ;907  ; SDIO_CmdInitStructure
0000d4  2009              MOVS     r0,#9                 ;908
0000d6  6048              STR      r0,[r1,#4]            ;908  ; SDIO_CmdInitStructure
0000d8  20c0              MOVS     r0,#0xc0              ;909
0000da  6088              STR      r0,[r1,#8]            ;909  ; SDIO_CmdInitStructure
0000dc  2000              MOVS     r0,#0                 ;910
0000de  60c8              STR      r0,[r1,#0xc]          ;910  ; SDIO_CmdInitStructure
0000e0  f44f6080          MOV      r0,#0x400             ;911
0000e4  6108              STR      r0,[r1,#0x10]         ;911  ; SDIO_CmdInitStructure
0000e6  4608              MOV      r0,r1                 ;912
0000e8  f7fffffe          BL       SDIO_SendCommand
0000ec  f7fffffe          BL       CmdResp2Error
0000f0  4604              MOV      r4,r0                 ;914
0000f2  b10c              CBZ      r4,|L24.248|
0000f4  4620              MOV      r0,r4                 ;918
0000f6  e78c              B        |L24.18|
                  |L24.248|
0000f8  2000              MOVS     r0,#0                 ;921
0000fa  f7fffffe          BL       SDIO_GetResponse
0000fe  490e              LDR      r1,|L24.312|
000100  6008              STR      r0,[r1,#0]            ;921  ; CSD_Tab
000102  2004              MOVS     r0,#4                 ;922
000104  f7fffffe          BL       SDIO_GetResponse
000108  490b              LDR      r1,|L24.312|
00010a  6048              STR      r0,[r1,#4]            ;922  ; CSD_Tab
00010c  2008              MOVS     r0,#8                 ;923
00010e  f7fffffe          BL       SDIO_GetResponse
000112  4909              LDR      r1,|L24.312|
000114  6088              STR      r0,[r1,#8]            ;923  ; CSD_Tab
000116  200c              MOVS     r0,#0xc               ;924
000118  f7fffffe          BL       SDIO_GetResponse
00011c  4906              LDR      r1,|L24.312|
00011e  60c8              STR      r0,[r1,#0xc]          ;924  ; CSD_Tab
                  |L24.288|
000120  2400              MOVS     r4,#0                 ;928
000122  4620              MOV      r0,r4                 ;930
000124  e775              B        |L24.18|
;;;932    
                          ENDP

000126  0000              DCW      0x0000
                  |L24.296|
                          DCD      CardType
                  |L24.300|
                          DCD      SDIO_CmdInitStructure
                  |L24.304|
                          DCD      CID_Tab
                  |L24.308|
                          DCD      ||RCA||
                  |L24.312|
                          DCD      CSD_Tab

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;817     */
;;;818    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;819    {
;;;820      SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;821    
;;;822      /*!< Set Power State to OFF */
;;;823      SDIO_SetPowerState(SDIO_PowerState_OFF);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       SDIO_SetPowerState
;;;824    
;;;825      return(errorstatus);
00000a  4620              MOV      r0,r4
;;;826    }
00000c  bd10              POP      {r4,pc}
;;;827    
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;612     */
;;;613    SD_Error SD_PowerON(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;614    {
;;;615      SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;616      uint32_t response = 0, count = 0, validvoltage = 0;
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
00000a  2700              MOVS     r7,#0
;;;617      uint32_t SDType = SD_STD_CAPACITY;
00000c  46a0              MOV      r8,r4
;;;618    	
;;;619    /********************************************************************************************************/
;;;620      /* 上电初始化 
;;;621       * 配置SDIO的外设
;;;622       * SDIOCLK = HCLK, SDIO_CK = HCLK/(2 + SDIO_INIT_CLK_DIV)   
;;;623       * 初始化时的时钟不能大于400KHz
;;;624       */
;;;625    	/* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
;;;626      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
00000e  20b2              MOVS     r0,#0xb2
000010  4959              LDR      r1,|L26.376|
000012  7508              STRB     r0,[r1,#0x14]
;;;627    	
;;;628      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;629    	
;;;630    	/* 不使用bypass模式，直接用HCLK进行分频得到SDIO_CK */
;;;631      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000018  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;632    
;;;633    	/* 空闲时不关闭时钟电源 */  
;;;634      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00001a  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;635    	
;;;636    	/* 初始化的时候暂时先把数据线配置成1根 */
;;;637      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
00001c  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;638    	
;;;639    	/* 失能硬件流控制 */
;;;640      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00001e  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;641    	
;;;642      SDIO_Init(&SDIO_InitStructure);
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       SDIO_Init
;;;643    
;;;644      /* 开启SDIO外设的电源 */
;;;645      SDIO_SetPowerState(SDIO_PowerState_ON);
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       SDIO_SetPowerState
;;;646    
;;;647      /* 使能 SDIO 时钟 */
;;;648      SDIO_ClockCmd(ENABLE);  
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       SDIO_ClockCmd
;;;649    /********************************************************************************************************/   
;;;650      /* 下面发送一系列命令,开始卡识别流程
;;;651       * CMD0: GO_IDLE_STATE(复位所以SD卡进入空闲状态) 
;;;652       * 没有相应 
;;;653    	 */
;;;654      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000032  2000              MOVS     r0,#0
000034  4951              LDR      r1,|L26.380|
000036  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;655      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
000038  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;656    	
;;;657    	/* 没有响应 */
;;;658      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
00003a  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;659    	
;;;660    	/* 关闭等待中断 */
;;;661      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00003c  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;662    	
;;;663    	/* 则CPSM在开始发送命令之前等待数据传输结束 */
;;;664      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable; 
00003e  f44f6080          MOV      r0,#0x400
000042  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;665      SDIO_SendCommand(&SDIO_CmdInitStructure);	  		
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       SDIO_SendCommand
;;;666    	
;;;667    	/* 检测是否正确接收到cmd0 */
;;;668      errorstatus = CmdError();
00004a  f7fffffe          BL       CmdError
00004e  4604              MOV      r4,r0
;;;669    	
;;;670    	/* 命令发送出错，返回 */
;;;671      if (errorstatus != SD_OK)	
000050  b114              CBZ      r4,|L26.88|
;;;672      {
;;;673        /* CMD Response TimeOut (wait for CMDSENT flag) */
;;;674        return(errorstatus);
000052  4620              MOV      r0,r4
                  |L26.84|
;;;675      }
;;;676    /********************************************************************************************************/
;;;677      /* CMD8: SEND_IF_COND 
;;;678       * Send CMD8 to verify SD card interface operating condition
;;;679    	 *          
;;;680       * Argument: - [31:12]: Reserved (shall be set to '0')
;;;681       *           - [11:8] : Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;682       *           - [7:0]  : Check Pattern (recommended 0xAA) 
;;;683       * CMD Response: R7 
;;;684    	 */
;;;685    	 /* 接收到命令sd会返回这个参数 */
;;;686      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
;;;687    	
;;;688      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;	
;;;689      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;	 
;;;690      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;			 				
;;;691      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;692      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;693       
;;;694      /*检查是否接收到命令*/
;;;695      errorstatus = CmdResp7Error(); 
;;;696    	
;;;697    	/* 有响应则card遵循sd协议2.0版本 */
;;;698      if (errorstatus == SD_OK)	  	
;;;699      {
;;;700    		/* SD Card 2.0 ，先把它定义会sdsc类型的卡 */
;;;701        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0;
;;;702    		
;;;703    		/* 这个变量用作ACMD41的参数，用来询问是sdsc卡还是sdhc卡 */
;;;704        SDType = SD_HIGH_CAPACITY;	
;;;705      }
;;;706      else	/* 无响应，说明是1.x的或mmc的卡 */
;;;707      {
;;;708        /* 发命令 CMD55 */	  
;;;709        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;710        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;711        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;712        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;713        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;714        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;715        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;716      }
;;;717    	
;;;718      /* CMD55 		
;;;719       * 发送cmd55，用于检测是sd卡还是mmc卡，或是不支持的卡
;;;720    	 * CMD 响应: R1
;;;721       */  
;;;722      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;723      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;724      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;725      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;726      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;727      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;728    	
;;;729    	/* 是否响应，没响应的是mmc或不支持的卡 */
;;;730      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);	
;;;731    /********************************************************************************************************/
;;;732      /* If errorstatus is Command TimeOut, it is a MMC card 
;;;733       * If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;734       * or SD card 1.x 
;;;735    	 */
;;;736      if (errorstatus == SD_OK)	//响应了cmd55，是sd卡，可能为1.x,可能为2.0
;;;737      {
;;;738      	/*下面开始循环地发送sdio支持的电压范围，循环一定次数*/
;;;739    
;;;740        /* SD CARD
;;;741         * Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 
;;;742    		 */
;;;743        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;744        {	 
;;;745    			/* 在发送ACMD命令前都要先向卡发送CMD55 
;;;746           * SEND CMD55 APP_CMD with RCA as 0 
;;;747    			 */
;;;748          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;749          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;	  
;;;750          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;751          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;752          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;753          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;754    
;;;755          errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;756    			
;;;757          if (errorstatus != SD_OK)
;;;758          {
;;;759            return(errorstatus);
;;;760          }
;;;761    			
;;;762    			/* ACMD41
;;;763    			 * 命令参数由支持的电压范围及HCS位组成，HCS位置一来区分卡是SDSC还是SDHC
;;;764    			 * 0:SDSC
;;;765    			 * 1:SDHC
;;;766           * 响应：R3,对应的是OCR寄存器			
;;;767    			 */			
;;;768          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;	  
;;;769          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;770          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  
;;;771          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;772          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;773          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;774    
;;;775          errorstatus = CmdResp3Error();
;;;776    			
;;;777          if (errorstatus != SD_OK)
;;;778          {
;;;779            return(errorstatus); 
;;;780          }
;;;781    			
;;;782    			/* 若卡需求电压在SDIO的供电电压范围内，会自动上电并标志pwr_up位 
;;;783    			 * 读取卡寄存器，卡状态
;;;784    			 */
;;;785          response = SDIO_GetResponse(SDIO_RESP1);
;;;786    			
;;;787    			/* 读取卡的ocr寄存器的pwr_up位，看是否已工作在正常电压 */
;;;788          validvoltage = (((response >> 31) == 1) ? 1 : 0);	
;;;789          count++;			  /* 计算循环次数 */
;;;790        }
;;;791    		
;;;792        if (count >= SD_MAX_VOLT_TRIAL)					 /* 循环检测超过一定次数还没上电 */
;;;793        {
;;;794          errorstatus = SD_INVALID_VOLTRANGE;	   /* SDIO不支持card的供电电压 */
;;;795          return(errorstatus);
;;;796        }
;;;797    		
;;;798    		/*检查卡返回信息中的HCS位*/
;;;799    		/* 判断ocr中的ccs位 ，如果是sdsc卡则不执行下面的语句 */
;;;800        if (response &= SD_HIGH_CAPACITY)       
;;;801        {
;;;802          CardType = SDIO_HIGH_CAPACITY_SD_CARD; /* 把卡类型从初始化的sdsc型改为sdhc型 */
;;;803        }
;;;804    
;;;805      }/* else MMC Card */
;;;806    
;;;807      return(errorstatus);		
;;;808    }
000054  e8bd81f0          POP      {r4-r8,pc}
                  |L26.88|
000058  f44f70d5          MOV      r0,#0x1aa             ;686
00005c  4947              LDR      r1,|L26.380|
00005e  6008              STR      r0,[r1,#0]            ;686  ; SDIO_CmdInitStructure
000060  2008              MOVS     r0,#8                 ;688
000062  6048              STR      r0,[r1,#4]            ;688  ; SDIO_CmdInitStructure
000064  2040              MOVS     r0,#0x40              ;689
000066  6088              STR      r0,[r1,#8]            ;689  ; SDIO_CmdInitStructure
000068  2000              MOVS     r0,#0                 ;690
00006a  60c8              STR      r0,[r1,#0xc]          ;690  ; SDIO_CmdInitStructure
00006c  f44f6080          MOV      r0,#0x400             ;691
000070  6108              STR      r0,[r1,#0x10]         ;691  ; SDIO_CmdInitStructure
000072  4608              MOV      r0,r1                 ;692
000074  f7fffffe          BL       SDIO_SendCommand
000078  f7fffffe          BL       CmdResp7Error
00007c  4604              MOV      r4,r0                 ;695
00007e  b92c              CBNZ     r4,|L26.140|
000080  2001              MOVS     r0,#1                 ;701
000082  493f              LDR      r1,|L26.384|
000084  6008              STR      r0,[r1,#0]            ;701  ; CardType
000086  f04f4880          MOV      r8,#0x40000000        ;704
00008a  e012              B        |L26.178|
                  |L26.140|
00008c  2000              MOVS     r0,#0                 ;709
00008e  493b              LDR      r1,|L26.380|
000090  6008              STR      r0,[r1,#0]            ;709  ; SDIO_CmdInitStructure
000092  2037              MOVS     r0,#0x37              ;710
000094  6048              STR      r0,[r1,#4]            ;710  ; SDIO_CmdInitStructure
000096  2040              MOVS     r0,#0x40              ;711
000098  6088              STR      r0,[r1,#8]            ;711  ; SDIO_CmdInitStructure
00009a  2000              MOVS     r0,#0                 ;712
00009c  60c8              STR      r0,[r1,#0xc]          ;712  ; SDIO_CmdInitStructure
00009e  f44f6080          MOV      r0,#0x400             ;713
0000a2  6108              STR      r0,[r1,#0x10]         ;713  ; SDIO_CmdInitStructure
0000a4  4608              MOV      r0,r1                 ;714
0000a6  f7fffffe          BL       SDIO_SendCommand
0000aa  2037              MOVS     r0,#0x37              ;715
0000ac  f7fffffe          BL       CmdResp1Error
0000b0  4604              MOV      r4,r0                 ;715
                  |L26.178|
0000b2  2000              MOVS     r0,#0                 ;722
0000b4  4931              LDR      r1,|L26.380|
0000b6  6008              STR      r0,[r1,#0]            ;722  ; SDIO_CmdInitStructure
0000b8  2037              MOVS     r0,#0x37              ;723
0000ba  6048              STR      r0,[r1,#4]            ;723  ; SDIO_CmdInitStructure
0000bc  2040              MOVS     r0,#0x40              ;724
0000be  6088              STR      r0,[r1,#8]            ;724  ; SDIO_CmdInitStructure
0000c0  2000              MOVS     r0,#0                 ;725
0000c2  60c8              STR      r0,[r1,#0xc]          ;725  ; SDIO_CmdInitStructure
0000c4  f44f6080          MOV      r0,#0x400             ;726
0000c8  6108              STR      r0,[r1,#0x10]         ;726  ; SDIO_CmdInitStructure
0000ca  4608              MOV      r0,r1                 ;727
0000cc  f7fffffe          BL       SDIO_SendCommand
0000d0  2037              MOVS     r0,#0x37              ;730
0000d2  f7fffffe          BL       CmdResp1Error
0000d6  4604              MOV      r4,r0                 ;730
0000d8  2c00              CMP      r4,#0                 ;736
0000da  d14a              BNE      |L26.370|
0000dc  e036              B        |L26.332|
                  |L26.222|
0000de  2000              MOVS     r0,#0                 ;748
0000e0  4926              LDR      r1,|L26.380|
0000e2  6008              STR      r0,[r1,#0]            ;748  ; SDIO_CmdInitStructure
0000e4  2037              MOVS     r0,#0x37              ;749
0000e6  6048              STR      r0,[r1,#4]            ;749  ; SDIO_CmdInitStructure
0000e8  2040              MOVS     r0,#0x40              ;750
0000ea  6088              STR      r0,[r1,#8]            ;750  ; SDIO_CmdInitStructure
0000ec  2000              MOVS     r0,#0                 ;751
0000ee  60c8              STR      r0,[r1,#0xc]          ;751  ; SDIO_CmdInitStructure
0000f0  f44f6080          MOV      r0,#0x400             ;752
0000f4  6108              STR      r0,[r1,#0x10]         ;752  ; SDIO_CmdInitStructure
0000f6  4608              MOV      r0,r1                 ;753
0000f8  f7fffffe          BL       SDIO_SendCommand
0000fc  2037              MOVS     r0,#0x37              ;755
0000fe  f7fffffe          BL       CmdResp1Error
000102  4604              MOV      r4,r0                 ;755
000104  b10c              CBZ      r4,|L26.266|
000106  4620              MOV      r0,r4                 ;759
000108  e7a4              B        |L26.84|
                  |L26.266|
00010a  481e              LDR      r0,|L26.388|
00010c  ea480000          ORR      r0,r8,r0              ;768
000110  491a              LDR      r1,|L26.380|
000112  6008              STR      r0,[r1,#0]            ;768  ; SDIO_CmdInitStructure
000114  2029              MOVS     r0,#0x29              ;769
000116  6048              STR      r0,[r1,#4]            ;769  ; SDIO_CmdInitStructure
000118  2040              MOVS     r0,#0x40              ;770
00011a  6088              STR      r0,[r1,#8]            ;770  ; SDIO_CmdInitStructure
00011c  2000              MOVS     r0,#0                 ;771
00011e  60c8              STR      r0,[r1,#0xc]          ;771  ; SDIO_CmdInitStructure
000120  f44f6080          MOV      r0,#0x400             ;772
000124  6108              STR      r0,[r1,#0x10]         ;772  ; SDIO_CmdInitStructure
000126  4608              MOV      r0,r1                 ;773
000128  f7fffffe          BL       SDIO_SendCommand
00012c  f7fffffe          BL       CmdResp3Error
000130  4604              MOV      r4,r0                 ;775
000132  b10c              CBZ      r4,|L26.312|
000134  4620              MOV      r0,r4                 ;779
000136  e78d              B        |L26.84|
                  |L26.312|
000138  2000              MOVS     r0,#0                 ;785
00013a  f7fffffe          BL       SDIO_GetResponse
00013e  4606              MOV      r6,r0                 ;785
000140  2001              MOVS     r0,#1                 ;788
000142  ea8070d6          EOR      r0,r0,r6,LSR #31      ;788
000146  f0800701          EOR      r7,r0,#1              ;788
00014a  1c6d              ADDS     r5,r5,#1              ;789
                  |L26.332|
00014c  b91f              CBNZ     r7,|L26.342|
00014e  f64f70ff          MOV      r0,#0xffff            ;743
000152  4285              CMP      r5,r0                 ;743
000154  d3c3              BCC      |L26.222|
                  |L26.342|
000156  f64f70ff          MOV      r0,#0xffff            ;792
00015a  4285              CMP      r5,r0                 ;792
00015c  d302              BCC      |L26.356|
00015e  241b              MOVS     r4,#0x1b              ;794
000160  4620              MOV      r0,r4                 ;795
000162  e777              B        |L26.84|
                  |L26.356|
000164  f0064080          AND      r0,r6,#0x40000000     ;800
000168  1e06              SUBS     r6,r0,#0              ;800
00016a  d002              BEQ      |L26.370|
00016c  2002              MOVS     r0,#2                 ;802
00016e  4904              LDR      r1,|L26.384|
000170  6008              STR      r0,[r1,#0]            ;802  ; CardType
                  |L26.370|
000172  4620              MOV      r0,r4                 ;807
000174  e76e              B        |L26.84|
;;;809    
                          ENDP

000176  0000              DCW      0x0000
                  |L26.376|
                          DCD      SDIO_InitStructure
                  |L26.380|
                          DCD      SDIO_CmdInitStructure
                  |L26.384|
                          DCD      CardType
                  |L26.388|
                          DCD      0x80100000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;2119    */
;;;2120   SD_Error SD_ProcessIRQSrc(void)
000000  b510              PUSH     {r4,lr}
;;;2121   {
;;;2122     if (StopCondition == 1)  //什么时候置1了？
000002  4811              LDR      r0,|L27.72|
000004  6800              LDR      r0,[r0,#0]  ; StopCondition
000006  2801              CMP      r0,#1
000008  d10b              BNE      |L27.34|
;;;2123     {
;;;2124       SDIO->ARG = 0x0;   //命令参数寄存器
00000a  2000              MOVS     r0,#0
00000c  490f              LDR      r1,|L27.76|
00000e  6088              STR      r0,[r1,#8]
;;;2125       SDIO->CMD = 0x44C;	  // 命令寄存器： 0100 	01 	 	001100
000010  f240404c          MOV      r0,#0x44c
000014  60c8              STR      r0,[r1,#0xc]
;;;2126   						//						[7:6]  	[5:0]
;;;2127   						//				CPSMEN  WAITRESP CMDINDEX
;;;2128   						//		开启命令状态机	短响应   cmd12 STOP_ TRANSMISSION						
;;;2129       TransferError = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000016  200c              MOVS     r0,#0xc
000018  f7fffffe          BL       CmdResp1Error
00001c  490c              LDR      r1,|L27.80|
00001e  7008              STRB     r0,[r1,#0]
000020  e002              B        |L27.40|
                  |L27.34|
;;;2130     }
;;;2131     else
;;;2132     {
;;;2133       TransferError = SD_OK;
000022  2000              MOVS     r0,#0
000024  490a              LDR      r1,|L27.80|
000026  7008              STRB     r0,[r1,#0]
                  |L27.40|
;;;2134     }
;;;2135     SDIO_ClearITPendingBit(SDIO_IT_DATAEND); //清中断
000028  f44f7080          MOV      r0,#0x100
00002c  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2136     SDIO_ITConfig(SDIO_IT_DATAEND, DISABLE); //关闭sdio中断使能
000030  2100              MOVS     r1,#0
000032  f44f7080          MOV      r0,#0x100
000036  f7fffffe          BL       SDIO_ITConfig
;;;2137     TransferEnd = 1;
00003a  2001              MOVS     r0,#1
00003c  4905              LDR      r1,|L27.84|
00003e  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;2138     return(TransferError);
000040  4803              LDR      r0,|L27.80|
000042  7800              LDRB     r0,[r0,#0]  ; TransferError
;;;2139   }
000044  bd10              POP      {r4,pc}
;;;2140   
                          ENDP

000046  0000              DCW      0x0000
                  |L27.72|
                          DCD      StopCondition
                  |L27.76|
                          DCD      0x40018000
                  |L27.80|
                          DCD      TransferError
                  |L27.84|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;1335     */
;;;1336   SD_Error SD_ReadBlock(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1337   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;1338     SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;1339   #if defined (SD_POLLING_MODE) 
;;;1340     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
;;;1341   #endif
;;;1342   
;;;1343     TransferError = SD_OK;
00000c  2000              MOVS     r0,#0
00000e  492c              LDR      r1,|L28.192|
000010  7008              STRB     r0,[r1,#0]
;;;1344     TransferEnd = 0;	 //传输结束标置位，在中断服务置1
000012  492c              LDR      r1,|L28.196|
000014  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1345     StopCondition = 0;  //怎么用的？
000016  492c              LDR      r1,|L28.200|
000018  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1346     
;;;1347     SDIO->DCTRL = 0x0;
00001a  492c              LDR      r1,|L28.204|
00001c  62c8              STR      r0,[r1,#0x2c]
;;;1348   
;;;1349     
;;;1350     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
00001e  482c              LDR      r0,|L28.208|
000020  6800              LDR      r0,[r0,#0]  ; CardType
000022  2802              CMP      r0,#2
000024  d101              BNE      |L28.42|
;;;1351     {
;;;1352       BlockSize = 512;
000026  0204              LSLS     r4,r0,#8
;;;1353       ReadAddr /= 512;
000028  0a6d              LSRS     r5,r5,#9
                  |L28.42|
;;;1354     }
;;;1355     /*******************add，没有这一段容易卡死在DMA检测中*************************************/
;;;1356     /* Set Block Size for Card，cmd16,
;;;1357   	 * 若是sdsc卡，可以用来设置块大小，
;;;1358   	 * 若是sdhc卡，块大小为512字节，不受cmd16影响 
;;;1359   	 */
;;;1360     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
00002a  482a              LDR      r0,|L28.212|
00002c  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1361     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
00002e  2010              MOVS     r0,#0x10
000030  4928              LDR      r1,|L28.212|
000032  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1362     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   //r1
000034  2040              MOVS     r0,#0x40
000036  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1363     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000038  2000              MOVS     r0,#0
00003a  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1364     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00003c  f44f6080          MOV      r0,#0x400
000040  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1365     SDIO_SendCommand(&SDIO_CmdInitStructure);
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       SDIO_SendCommand
;;;1366   
;;;1367     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000048  2010              MOVS     r0,#0x10
00004a  f7fffffe          BL       CmdResp1Error
00004e  4606              MOV      r6,r0
;;;1368   
;;;1369     if (SD_OK != errorstatus)
000050  b116              CBZ      r6,|L28.88|
;;;1370     {
;;;1371       return(errorstatus);
000052  4630              MOV      r0,r6
                  |L28.84|
;;;1372     }
;;;1373    /*********************************************************************************/
;;;1374     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1375     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1376     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
;;;1377     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1378     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1379     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1380     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1381   
;;;1382     /*!< Send CMD17 READ_SINGLE_BLOCK */
;;;1383     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1384     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;1385     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1386     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1387     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1388     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1389   
;;;1390     errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
;;;1391   
;;;1392     if (errorstatus != SD_OK)
;;;1393     {
;;;1394       return(errorstatus);
;;;1395     }
;;;1396   
;;;1397   #if defined (SD_POLLING_MODE)  
;;;1398     /*!< In case of single block transfer, no need of stop transfer at all.*/
;;;1399     /*!< Polling mode */
;;;1400     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1401     {
;;;1402       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1403       {
;;;1404         for (count = 0; count < 8; count++)
;;;1405         {
;;;1406           *(tempbuff + count) = SDIO_ReadData();
;;;1407         }
;;;1408         tempbuff += 8;
;;;1409       }
;;;1410     }
;;;1411   
;;;1412     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1413     {
;;;1414       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1415       errorstatus = SD_DATA_TIMEOUT;
;;;1416       return(errorstatus);
;;;1417     }
;;;1418     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1419     {
;;;1420       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1421       errorstatus = SD_DATA_CRC_FAIL;
;;;1422       return(errorstatus);
;;;1423     }
;;;1424     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1425     {
;;;1426       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1427       errorstatus = SD_RX_OVERRUN;
;;;1428       return(errorstatus);
;;;1429     }
;;;1430     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1431     {
;;;1432       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1433       errorstatus = SD_START_BIT_ERR;
;;;1434       return(errorstatus);
;;;1435     }
;;;1436     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;1437     {
;;;1438       *tempbuff = SDIO_ReadData();
;;;1439       tempbuff++;
;;;1440     }
;;;1441     
;;;1442     /*!< Clear all the static flags */
;;;1443     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1444   
;;;1445   #elif defined (SD_DMA_MODE)
;;;1446       SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);
;;;1447       SDIO_DMACmd(ENABLE);
;;;1448       SD_DMA_RxConfig((uint32_t *)readbuff, BlockSize);
;;;1449   #endif
;;;1450   
;;;1451     return(errorstatus);
;;;1452   }
000054  e8bd81f0          POP      {r4-r8,pc}
                  |L28.88|
000058  f04f30ff          MOV      r0,#0xffffffff        ;1374
00005c  491e              LDR      r1,|L28.216|
00005e  6008              STR      r0,[r1,#0]            ;1374  ; SDIO_DataInitStructure
000060  4608              MOV      r0,r1                 ;1375
000062  6044              STR      r4,[r0,#4]            ;1375  ; SDIO_DataInitStructure
000064  2090              MOVS     r0,#0x90              ;1376
000066  6088              STR      r0,[r1,#8]            ;1376  ; SDIO_DataInitStructure
000068  2002              MOVS     r0,#2                 ;1377
00006a  60c8              STR      r0,[r1,#0xc]          ;1377  ; SDIO_DataInitStructure
00006c  2000              MOVS     r0,#0                 ;1378
00006e  6108              STR      r0,[r1,#0x10]         ;1378  ; SDIO_DataInitStructure
000070  2001              MOVS     r0,#1                 ;1379
000072  6148              STR      r0,[r1,#0x14]         ;1379  ; SDIO_DataInitStructure
000074  4608              MOV      r0,r1                 ;1380
000076  f7fffffe          BL       SDIO_DataConfig
00007a  4816              LDR      r0,|L28.212|
00007c  6005              STR      r5,[r0,#0]            ;1383  ; SDIO_CmdInitStructure
00007e  2011              MOVS     r0,#0x11              ;1384
000080  4914              LDR      r1,|L28.212|
000082  6048              STR      r0,[r1,#4]            ;1384  ; SDIO_CmdInitStructure
000084  2040              MOVS     r0,#0x40              ;1385
000086  6088              STR      r0,[r1,#8]            ;1385  ; SDIO_CmdInitStructure
000088  2000              MOVS     r0,#0                 ;1386
00008a  60c8              STR      r0,[r1,#0xc]          ;1386  ; SDIO_CmdInitStructure
00008c  f44f6080          MOV      r0,#0x400             ;1387
000090  6108              STR      r0,[r1,#0x10]         ;1387  ; SDIO_CmdInitStructure
000092  4608              MOV      r0,r1                 ;1388
000094  f7fffffe          BL       SDIO_SendCommand
000098  2011              MOVS     r0,#0x11              ;1390
00009a  f7fffffe          BL       CmdResp1Error
00009e  4606              MOV      r6,r0                 ;1390
0000a0  b10e              CBZ      r6,|L28.166|
0000a2  4630              MOV      r0,r6                 ;1394
0000a4  e7d6              B        |L28.84|
                  |L28.166|
0000a6  2101              MOVS     r1,#1                 ;1446
0000a8  0208              LSLS     r0,r1,#8              ;1446
0000aa  f7fffffe          BL       SDIO_ITConfig
0000ae  2001              MOVS     r0,#1                 ;1447
0000b0  f7fffffe          BL       SDIO_DMACmd
0000b4  4621              MOV      r1,r4                 ;1448
0000b6  4638              MOV      r0,r7                 ;1448
0000b8  f7fffffe          BL       SD_DMA_RxConfig
0000bc  4630              MOV      r0,r6                 ;1451
0000be  e7c9              B        |L28.84|
;;;1453   
                          ENDP

                  |L28.192|
                          DCD      TransferError
                  |L28.196|
                          DCD      TransferEnd
                  |L28.200|
                          DCD      StopCondition
                  |L28.204|
                          DCD      0x40018000
                  |L28.208|
                          DCD      CardType
                  |L28.212|
                          DCD      SDIO_CmdInitStructure
                  |L28.216|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;1468     */
;;;1469   SD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1470   {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;1471     SD_Error errorstatus = SD_OK;
00000c  2700              MOVS     r7,#0
;;;1472     TransferError = SD_OK;
00000e  2000              MOVS     r0,#0
000010  492e              LDR      r1,|L29.204|
000012  7008              STRB     r0,[r1,#0]
;;;1473     TransferEnd = 0;
000014  492e              LDR      r1,|L29.208|
000016  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1474     StopCondition = 1;
000018  2001              MOVS     r0,#1
00001a  492e              LDR      r1,|L29.212|
00001c  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1475   	
;;;1476     SDIO->DCTRL = 0x0;	 //复位数据控制寄存器
00001e  2000              MOVS     r0,#0
000020  492d              LDR      r1,|L29.216|
000022  62c8              STR      r0,[r1,#0x2c]
;;;1477   
;;;1478     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)//sdhc卡的地址以块为单位，每块512字节
000024  482d              LDR      r0,|L29.220|
000026  6800              LDR      r0,[r0,#0]  ; CardType
000028  2802              CMP      r0,#2
00002a  d101              BNE      |L29.48|
;;;1479     {
;;;1480       BlockSize = 512;
00002c  0204              LSLS     r4,r0,#8
;;;1481       ReadAddr /= 512;
00002e  0a6d              LSRS     r5,r5,#9
                  |L29.48|
;;;1482     }
;;;1483   
;;;1484     /*!< Set Block Size for Card，cmd16,若是sdsc卡，可以用来设置块大小，若是sdhc卡，块大小为512字节，不受cmd16影响 */
;;;1485     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
000030  482b              LDR      r0,|L29.224|
000032  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1486     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000034  2010              MOVS     r0,#0x10
000036  492a              LDR      r1,|L29.224|
000038  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1487     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   //r1
00003a  2040              MOVS     r0,#0x40
00003c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1488     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00003e  2000              MOVS     r0,#0
000040  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1489     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000042  f44f6080          MOV      r0,#0x400
000046  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1490     SDIO_SendCommand(&SDIO_CmdInitStructure);
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       SDIO_SendCommand
;;;1491   
;;;1492     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
00004e  2010              MOVS     r0,#0x10
000050  f7fffffe          BL       CmdResp1Error
000054  4607              MOV      r7,r0
;;;1493   
;;;1494     if (SD_OK != errorstatus)
000056  b117              CBZ      r7,|L29.94|
;;;1495     {
;;;1496       return(errorstatus);
000058  4638              MOV      r0,r7
                  |L29.90|
;;;1497     }
;;;1498       
;;;1499     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;	 //等待超时限制
;;;1500     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;	 //对于块数据传输，数据长度寄存器中的数值必须是数据块长度(见SDIO_DCTRL)的倍数
;;;1501     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4; //直接用参数多好。。。SDIO_DataBlockSize_512b
;;;1502     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;//传输方向
;;;1503     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block; //传输模式
;;;1504     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;	//开启数据状态机
;;;1505     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1506   
;;;1507     /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
;;;1508     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;	//起始地址
;;;1509     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;1510     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short; //r1
;;;1511     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1512     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1513     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1514   
;;;1515     errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
;;;1516   
;;;1517     if (errorstatus != SD_OK)
;;;1518     {
;;;1519       return(errorstatus);
;;;1520     }
;;;1521   
;;;1522     SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);  //开启数据传输结束中断 ，Data end (data counter, SDIDCOUNT, is zero) interrupt 
;;;1523     SDIO_DMACmd(ENABLE); //使能dma方式
;;;1524     SD_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));//配置DMA接收
;;;1525   
;;;1526     return(errorstatus);
;;;1527   }
00005a  e8bd81f0          POP      {r4-r8,pc}
                  |L29.94|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;1499
000062  4920              LDR      r1,|L29.228|
000064  6008              STR      r0,[r1,#0]            ;1499  ; SDIO_DataInitStructure
000066  fb06f004          MUL      r0,r6,r4              ;1500
00006a  6048              STR      r0,[r1,#4]            ;1500  ; SDIO_DataInitStructure
00006c  2090              MOVS     r0,#0x90              ;1501
00006e  6088              STR      r0,[r1,#8]            ;1501  ; SDIO_DataInitStructure
000070  2002              MOVS     r0,#2                 ;1502
000072  60c8              STR      r0,[r1,#0xc]          ;1502  ; SDIO_DataInitStructure
000074  2000              MOVS     r0,#0                 ;1503
000076  6108              STR      r0,[r1,#0x10]         ;1503  ; SDIO_DataInitStructure
000078  2001              MOVS     r0,#1                 ;1504
00007a  6148              STR      r0,[r1,#0x14]         ;1504  ; SDIO_DataInitStructure
00007c  4608              MOV      r0,r1                 ;1505
00007e  f7fffffe          BL       SDIO_DataConfig
000082  4817              LDR      r0,|L29.224|
000084  6005              STR      r5,[r0,#0]            ;1508  ; SDIO_CmdInitStructure
000086  2012              MOVS     r0,#0x12              ;1509
000088  4915              LDR      r1,|L29.224|
00008a  6048              STR      r0,[r1,#4]            ;1509  ; SDIO_CmdInitStructure
00008c  2040              MOVS     r0,#0x40              ;1510
00008e  6088              STR      r0,[r1,#8]            ;1510  ; SDIO_CmdInitStructure
000090  2000              MOVS     r0,#0                 ;1511
000092  60c8              STR      r0,[r1,#0xc]          ;1511  ; SDIO_CmdInitStructure
000094  f44f6080          MOV      r0,#0x400             ;1512
000098  6108              STR      r0,[r1,#0x10]         ;1512  ; SDIO_CmdInitStructure
00009a  4608              MOV      r0,r1                 ;1513
00009c  f7fffffe          BL       SDIO_SendCommand
0000a0  2012              MOVS     r0,#0x12              ;1515
0000a2  f7fffffe          BL       CmdResp1Error
0000a6  4607              MOV      r7,r0                 ;1515
0000a8  b10f              CBZ      r7,|L29.174|
0000aa  4638              MOV      r0,r7                 ;1519
0000ac  e7d5              B        |L29.90|
                  |L29.174|
0000ae  2101              MOVS     r1,#1                 ;1522
0000b0  0208              LSLS     r0,r1,#8              ;1522
0000b2  f7fffffe          BL       SDIO_ITConfig
0000b6  2001              MOVS     r0,#1                 ;1523
0000b8  f7fffffe          BL       SDIO_DMACmd
0000bc  fb06f104          MUL      r1,r6,r4              ;1524
0000c0  4640              MOV      r0,r8                 ;1524
0000c2  f7fffffe          BL       SD_DMA_RxConfig
0000c6  4638              MOV      r0,r7                 ;1526
0000c8  e7c7              B        |L29.90|
;;;1528   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L29.204|
                          DCD      TransferError
                  |L29.208|
                          DCD      TransferEnd
                  |L29.212|
                          DCD      StopCondition
                  |L29.216|
                          DCD      0x40018000
                  |L29.220|
                          DCD      CardType
                  |L29.224|
                          DCD      SDIO_CmdInitStructure
                  |L29.228|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;1304    */	
;;;1305   SD_Error SD_SelectDeselect(uint32_t addr)
000000  b570              PUSH     {r4-r6,lr}
;;;1306   {
000002  4604              MOV      r4,r0
;;;1307     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1308   
;;;1309     /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
;;;1310     SDIO_CmdInitStructure.SDIO_Argument =  addr;
000006  480a              LDR      r0,|L30.48|
000008  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1311     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
00000a  2007              MOVS     r0,#7
00000c  4908              LDR      r1,|L30.48|
00000e  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1312     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000010  2040              MOVS     r0,#0x40
000012  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1313     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000014  2000              MOVS     r0,#0
000016  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1314     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000018  f44f6080          MOV      r0,#0x400
00001c  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1315     SDIO_SendCommand(&SDIO_CmdInitStructure);
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       SDIO_SendCommand
;;;1316   
;;;1317     errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CmdResp1Error
00002a  4605              MOV      r5,r0
;;;1318   
;;;1319     return(errorstatus);
00002c  4628              MOV      r0,r5
;;;1320   }
00002e  bd70              POP      {r4-r6,pc}
;;;1321   
                          ENDP

                  |L30.48|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SendSDStatus||, CODE, READONLY, ALIGN=2

                  SD_SendSDStatus PROC
;;;2002     */
;;;2003   SD_Error SD_SendSDStatus(uint32_t *psdstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;2004   {
000002  4604              MOV      r4,r0
;;;2005     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;2006     uint32_t count = 0;
000006  2600              MOVS     r6,#0
;;;2007   
;;;2008     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_GetResponse
00000e  f0007000          AND      r0,r0,#0x2000000
000012  b110              CBZ      r0,|L31.26|
;;;2009     {
;;;2010       errorstatus = SD_LOCK_UNLOCK_FAILED;
000014  250e              MOVS     r5,#0xe
;;;2011       return(errorstatus);
000016  4628              MOV      r0,r5
                  |L31.24|
;;;2012     }
;;;2013   
;;;2014     /*!< Set block size for card if it is not equal to current block size for card. */
;;;2015     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;2016     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;2017     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2018     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2019     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2020     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2021   
;;;2022     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;2023   
;;;2024     if (errorstatus != SD_OK)
;;;2025     {
;;;2026       return(errorstatus);
;;;2027     }
;;;2028   
;;;2029     /*!< CMD55 */
;;;2030     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2031     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2032     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2033     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2034     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2035     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2036     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2037   
;;;2038     if (errorstatus != SD_OK)
;;;2039     {
;;;2040       return(errorstatus);
;;;2041     }
;;;2042   
;;;2043     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2044     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;2045     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;2046     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2047     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2048     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2049     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2050   
;;;2051     /*!< Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;2052     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;2053     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;
;;;2054     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2055     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2056     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2057     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2058     errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);
;;;2059   
;;;2060     if (errorstatus != SD_OK)
;;;2061     {
;;;2062       return(errorstatus);
;;;2063     }
;;;2064   
;;;2065     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2066     {
;;;2067       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;2068       {
;;;2069         for (count = 0; count < 8; count++)
;;;2070         {
;;;2071           *(psdstatus + count) = SDIO_ReadData();
;;;2072         }
;;;2073         psdstatus += 8;
;;;2074       }
;;;2075     }
;;;2076   
;;;2077     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2078     {
;;;2079       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2080       errorstatus = SD_DATA_TIMEOUT;
;;;2081       return(errorstatus);
;;;2082     }
;;;2083     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2084     {
;;;2085       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2086       errorstatus = SD_DATA_CRC_FAIL;
;;;2087       return(errorstatus);
;;;2088     }
;;;2089     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2090     {
;;;2091       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2092       errorstatus = SD_RX_OVERRUN;
;;;2093       return(errorstatus);
;;;2094     }
;;;2095     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2096     {
;;;2097       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2098       errorstatus = SD_START_BIT_ERR;
;;;2099       return(errorstatus);
;;;2100     }
;;;2101   
;;;2102     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2103     {
;;;2104       *psdstatus = SDIO_ReadData();
;;;2105       psdstatus++;
;;;2106     }
;;;2107   
;;;2108     /*!< Clear all the static status flags*/
;;;2109     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2110   
;;;2111     return(errorstatus);
;;;2112   }
000018  bd70              POP      {r4-r6,pc}
                  |L31.26|
00001a  2040              MOVS     r0,#0x40              ;2015
00001c  4952              LDR      r1,|L31.360|
00001e  6008              STR      r0,[r1,#0]            ;2015  ; SDIO_CmdInitStructure
000020  2010              MOVS     r0,#0x10              ;2016
000022  6048              STR      r0,[r1,#4]            ;2016  ; SDIO_CmdInitStructure
000024  2040              MOVS     r0,#0x40              ;2017
000026  6088              STR      r0,[r1,#8]            ;2017  ; SDIO_CmdInitStructure
000028  2000              MOVS     r0,#0                 ;2018
00002a  60c8              STR      r0,[r1,#0xc]          ;2018  ; SDIO_CmdInitStructure
00002c  f44f6080          MOV      r0,#0x400             ;2019
000030  6108              STR      r0,[r1,#0x10]         ;2019  ; SDIO_CmdInitStructure
000032  4608              MOV      r0,r1                 ;2020
000034  f7fffffe          BL       SDIO_SendCommand
000038  2010              MOVS     r0,#0x10              ;2022
00003a  f7fffffe          BL       CmdResp1Error
00003e  4605              MOV      r5,r0                 ;2022
000040  b10d              CBZ      r5,|L31.70|
000042  4628              MOV      r0,r5                 ;2026
000044  e7e8              B        |L31.24|
                  |L31.70|
000046  4849              LDR      r0,|L31.364|
000048  8800              LDRH     r0,[r0,#0]            ;2030  ; RCA
00004a  0400              LSLS     r0,r0,#16             ;2030
00004c  4946              LDR      r1,|L31.360|
00004e  6008              STR      r0,[r1,#0]            ;2030  ; SDIO_CmdInitStructure
000050  2037              MOVS     r0,#0x37              ;2031
000052  6048              STR      r0,[r1,#4]            ;2031  ; SDIO_CmdInitStructure
000054  2040              MOVS     r0,#0x40              ;2032
000056  6088              STR      r0,[r1,#8]            ;2032  ; SDIO_CmdInitStructure
000058  2000              MOVS     r0,#0                 ;2033
00005a  60c8              STR      r0,[r1,#0xc]          ;2033  ; SDIO_CmdInitStructure
00005c  f44f6080          MOV      r0,#0x400             ;2034
000060  6108              STR      r0,[r1,#0x10]         ;2034  ; SDIO_CmdInitStructure
000062  4608              MOV      r0,r1                 ;2035
000064  f7fffffe          BL       SDIO_SendCommand
000068  2037              MOVS     r0,#0x37              ;2036
00006a  f7fffffe          BL       CmdResp1Error
00006e  4605              MOV      r5,r0                 ;2036
000070  b10d              CBZ      r5,|L31.118|
000072  4628              MOV      r0,r5                 ;2040
000074  e7d0              B        |L31.24|
                  |L31.118|
000076  f04f30ff          MOV      r0,#0xffffffff        ;2043
00007a  493d              LDR      r1,|L31.368|
00007c  6008              STR      r0,[r1,#0]            ;2043  ; SDIO_DataInitStructure
00007e  2040              MOVS     r0,#0x40              ;2044
000080  6048              STR      r0,[r1,#4]            ;2044  ; SDIO_DataInitStructure
000082  2060              MOVS     r0,#0x60              ;2045
000084  6088              STR      r0,[r1,#8]            ;2045  ; SDIO_DataInitStructure
000086  2002              MOVS     r0,#2                 ;2046
000088  60c8              STR      r0,[r1,#0xc]          ;2046  ; SDIO_DataInitStructure
00008a  2000              MOVS     r0,#0                 ;2047
00008c  6108              STR      r0,[r1,#0x10]         ;2047  ; SDIO_DataInitStructure
00008e  2001              MOVS     r0,#1                 ;2048
000090  6148              STR      r0,[r1,#0x14]         ;2048  ; SDIO_DataInitStructure
000092  4608              MOV      r0,r1                 ;2049
000094  f7fffffe          BL       SDIO_DataConfig
000098  2000              MOVS     r0,#0                 ;2052
00009a  4933              LDR      r1,|L31.360|
00009c  6008              STR      r0,[r1,#0]            ;2052  ; SDIO_CmdInitStructure
00009e  200d              MOVS     r0,#0xd               ;2053
0000a0  6048              STR      r0,[r1,#4]            ;2053  ; SDIO_CmdInitStructure
0000a2  2040              MOVS     r0,#0x40              ;2054
0000a4  6088              STR      r0,[r1,#8]            ;2054  ; SDIO_CmdInitStructure
0000a6  2000              MOVS     r0,#0                 ;2055
0000a8  60c8              STR      r0,[r1,#0xc]          ;2055  ; SDIO_CmdInitStructure
0000aa  f44f6080          MOV      r0,#0x400             ;2056
0000ae  6108              STR      r0,[r1,#0x10]         ;2056  ; SDIO_CmdInitStructure
0000b0  4608              MOV      r0,r1                 ;2057
0000b2  f7fffffe          BL       SDIO_SendCommand
0000b6  200d              MOVS     r0,#0xd               ;2058
0000b8  f7fffffe          BL       CmdResp1Error
0000bc  4605              MOV      r5,r0                 ;2058
0000be  b10d              CBZ      r5,|L31.196|
0000c0  4628              MOV      r0,r5                 ;2062
0000c2  e7a9              B        |L31.24|
                  |L31.196|
0000c4  e00e              B        |L31.228|
                  |L31.198|
0000c6  f44f4000          MOV      r0,#0x8000            ;2067
0000ca  f7fffffe          BL       SDIO_GetFlagStatus
0000ce  b148              CBZ      r0,|L31.228|
0000d0  2600              MOVS     r6,#0                 ;2069
0000d2  e004              B        |L31.222|
                  |L31.212|
0000d4  f7fffffe          BL       SDIO_ReadData
0000d8  f8440026          STR      r0,[r4,r6,LSL #2]     ;2071
0000dc  1c76              ADDS     r6,r6,#1              ;2069
                  |L31.222|
0000de  2e08              CMP      r6,#8                 ;2069
0000e0  d3f8              BCC      |L31.212|
0000e2  3420              ADDS     r4,r4,#0x20           ;2073
                  |L31.228|
0000e4  4823              LDR      r0,|L31.372|
0000e6  6b40              LDR      r0,[r0,#0x34]         ;2065
0000e8  f240612a          MOV      r1,#0x62a             ;2065
0000ec  4008              ANDS     r0,r0,r1              ;2065
0000ee  2800              CMP      r0,#0                 ;2065
0000f0  d0e9              BEQ      |L31.198|
0000f2  2008              MOVS     r0,#8                 ;2077
0000f4  f7fffffe          BL       SDIO_GetFlagStatus
0000f8  b128              CBZ      r0,|L31.262|
0000fa  2008              MOVS     r0,#8                 ;2079
0000fc  f7fffffe          BL       SDIO_ClearFlag
000100  2504              MOVS     r5,#4                 ;2080
000102  4628              MOV      r0,r5                 ;2081
000104  e788              B        |L31.24|
                  |L31.262|
000106  2002              MOVS     r0,#2                 ;2083
000108  f7fffffe          BL       SDIO_GetFlagStatus
00010c  b128              CBZ      r0,|L31.282|
00010e  2002              MOVS     r0,#2                 ;2085
000110  f7fffffe          BL       SDIO_ClearFlag
000114  2502              MOVS     r5,#2                 ;2086
000116  4628              MOV      r0,r5                 ;2087
000118  e77e              B        |L31.24|
                  |L31.282|
00011a  2020              MOVS     r0,#0x20              ;2089
00011c  f7fffffe          BL       SDIO_GetFlagStatus
000120  b128              CBZ      r0,|L31.302|
000122  2020              MOVS     r0,#0x20              ;2091
000124  f7fffffe          BL       SDIO_ClearFlag
000128  2506              MOVS     r5,#6                 ;2092
00012a  4628              MOV      r0,r5                 ;2093
00012c  e774              B        |L31.24|
                  |L31.302|
00012e  f44f7000          MOV      r0,#0x200             ;2095
000132  f7fffffe          BL       SDIO_GetFlagStatus
000136  b130              CBZ      r0,|L31.326|
000138  f44f7000          MOV      r0,#0x200             ;2097
00013c  f7fffffe          BL       SDIO_ClearFlag
000140  2507              MOVS     r5,#7                 ;2098
000142  4628              MOV      r0,r5                 ;2099
000144  e768              B        |L31.24|
                  |L31.326|
000146  e003              B        |L31.336|
                  |L31.328|
000148  f7fffffe          BL       SDIO_ReadData
00014c  6020              STR      r0,[r4,#0]            ;2104
00014e  1d24              ADDS     r4,r4,#4              ;2105
                  |L31.336|
000150  f44f1000          MOV      r0,#0x200000          ;2102
000154  f7fffffe          BL       SDIO_GetFlagStatus
000158  2800              CMP      r0,#0                 ;2102
00015a  d1f5              BNE      |L31.328|
00015c  f24050ff          MOV      r0,#0x5ff             ;2109
000160  f7fffffe          BL       SDIO_ClearFlag
000164  4628              MOV      r0,r5                 ;2111
000166  e757              B        |L31.24|
;;;2113   
                          ENDP

                  |L31.360|
                          DCD      SDIO_CmdInitStructure
                  |L31.364|
                          DCD      ||RCA||
                  |L31.368|
                          DCD      SDIO_DataInitStructure
                  |L31.372|
                          DCD      0x40018000

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1978     */
;;;1979   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1980   {
000002  4604              MOV      r4,r0
;;;1981     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1982   
;;;1983     SDIO->ARG = (uint32_t) RCA << 16;
000006  480a              LDR      r0,|L32.48|
000008  8800              LDRH     r0,[r0,#0]  ; RCA
00000a  0400              LSLS     r0,r0,#16
00000c  4909              LDR      r1,|L32.52|
00000e  6088              STR      r0,[r1,#8]
;;;1984     SDIO->CMD = 0x44D;
000010  f240404d          MOV      r0,#0x44d
000014  60c8              STR      r0,[r1,#0xc]
;;;1985     
;;;1986     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
000016  200d              MOVS     r0,#0xd
000018  f7fffffe          BL       CmdResp1Error
00001c  4605              MOV      r5,r0
;;;1987   
;;;1988     if (errorstatus != SD_OK)
00001e  b10d              CBZ      r5,|L32.36|
;;;1989     {
;;;1990       return(errorstatus);
000020  4628              MOV      r0,r5
                  |L32.34|
;;;1991     }
;;;1992   
;;;1993     *pcardstatus = SDIO->RESP1;
;;;1994     return(errorstatus);
;;;1995   }
000022  bd70              POP      {r4-r6,pc}
                  |L32.36|
000024  4803              LDR      r0,|L32.52|
000026  6940              LDR      r0,[r0,#0x14]         ;1993
000028  6020              STR      r0,[r4,#0]            ;1993
00002a  4628              MOV      r0,r5                 ;1994
00002c  e7f9              B        |L32.34|
;;;1996   
                          ENDP

00002e  0000              DCW      0x0000
                  |L32.48|
                          DCD      ||RCA||
                  |L32.52|
                          DCD      0x40018000

                          AREA ||i.SD_StopTransfer||, CODE, READONLY, ALIGN=2

                  SD_StopTransfer PROC
;;;1865     */
;;;1866   SD_Error SD_StopTransfer(void)
000000  b510              PUSH     {r4,lr}
;;;1867   {
;;;1868     SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;1869   
;;;1870     /*!< Send CMD12 STOP_TRANSMISSION  */
;;;1871     SDIO->ARG = 0x0;
000004  2000              MOVS     r0,#0
000006  4905              LDR      r1,|L33.28|
000008  6088              STR      r0,[r1,#8]
;;;1872     SDIO->CMD = 0x44C;
00000a  f240404c          MOV      r0,#0x44c
00000e  60c8              STR      r0,[r1,#0xc]
;;;1873     errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000010  200c              MOVS     r0,#0xc
000012  f7fffffe          BL       CmdResp1Error
000016  4604              MOV      r4,r0
;;;1874   
;;;1875     return(errorstatus);
000018  4620              MOV      r0,r4
;;;1876   }
00001a  bd10              POP      {r4,pc}
;;;1877   
                          ENDP

                  |L33.28|
                          DCD      0x40018000

                          AREA ||i.SD_WaitReadOperation||, CODE, READONLY, ALIGN=2

                  SD_WaitReadOperation PROC
;;;1536     */
;;;1537   SD_Error SD_WaitReadOperation(void)
000000  b510              PUSH     {r4,lr}
;;;1538   {
;;;1539     SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;1540   		  //等待dma传输结束
;;;1541     while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
000004  bf00              NOP      
                  |L34.6|
000006  f7fffffe          BL       SD_DMAEndOfTransferStatus
00000a  b930              CBNZ     r0,|L34.26|
00000c  4807              LDR      r0,|L34.44|
00000e  6800              LDR      r0,[r0,#0]  ; TransferEnd
000010  b918              CBNZ     r0,|L34.26|
000012  4807              LDR      r0,|L34.48|
000014  7800              LDRB     r0,[r0,#0]  ; TransferError
000016  2800              CMP      r0,#0
000018  d0f5              BEQ      |L34.6|
                  |L34.26|
;;;1542     {}
;;;1543   
;;;1544     if (TransferError != SD_OK)
00001a  4805              LDR      r0,|L34.48|
00001c  7800              LDRB     r0,[r0,#0]  ; TransferError
00001e  b110              CBZ      r0,|L34.38|
;;;1545     {
;;;1546       return(TransferError);
000020  4803              LDR      r0,|L34.48|
000022  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L34.36|
;;;1547     }
;;;1548   
;;;1549     return(errorstatus);
;;;1550   }
000024  bd10              POP      {r4,pc}
                  |L34.38|
000026  4620              MOV      r0,r4                 ;1549
000028  e7fc              B        |L34.36|
;;;1551   
                          ENDP

00002a  0000              DCW      0x0000
                  |L34.44|
                          DCD      TransferEnd
                  |L34.48|
                          DCD      TransferError

                          AREA ||i.SD_WaitWriteOperation||, CODE, READONLY, ALIGN=2

                  SD_WaitWriteOperation PROC
;;;1822     */
;;;1823   SD_Error SD_WaitWriteOperation(void)
000000  b510              PUSH     {r4,lr}
;;;1824   {
;;;1825     SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;1826   		  //等待dma是否传输结束
;;;1827     while ((SD_DMAEndOfTransferStatus() == RESET) && (TransferEnd == 0) && (TransferError == SD_OK))
000004  bf00              NOP      
                  |L35.6|
000006  f7fffffe          BL       SD_DMAEndOfTransferStatus
00000a  b930              CBNZ     r0,|L35.26|
00000c  4809              LDR      r0,|L35.52|
00000e  6800              LDR      r0,[r0,#0]  ; TransferEnd
000010  b918              CBNZ     r0,|L35.26|
000012  4809              LDR      r0,|L35.56|
000014  7800              LDRB     r0,[r0,#0]  ; TransferError
000016  2800              CMP      r0,#0
000018  d0f5              BEQ      |L35.6|
                  |L35.26|
;;;1828     {}
;;;1829   
;;;1830     if (TransferError != SD_OK)
00001a  4807              LDR      r0,|L35.56|
00001c  7800              LDRB     r0,[r0,#0]  ; TransferError
00001e  b110              CBZ      r0,|L35.38|
;;;1831     {
;;;1832       return(TransferError);
000020  4805              LDR      r0,|L35.56|
000022  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L35.36|
;;;1833     }
;;;1834   
;;;1835     /*!< Clear all the static flags */
;;;1836     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1837   
;;;1838     return(errorstatus);
;;;1839   }
000024  bd10              POP      {r4,pc}
                  |L35.38|
000026  f24050ff          MOV      r0,#0x5ff             ;1836
00002a  f7fffffe          BL       SDIO_ClearFlag
00002e  4620              MOV      r0,r4                 ;1838
000030  e7f8              B        |L35.36|
;;;1840   
                          ENDP

000032  0000              DCW      0x0000
                  |L35.52|
                          DCD      TransferEnd
                  |L35.56|
                          DCD      TransferError

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;1565     */
;;;1566   SD_Error SD_WriteBlock(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1567   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;1568     SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;1569   
;;;1570   #if defined (SD_POLLING_MODE)
;;;1571     uint32_t bytestransferred = 0, count = 0, restwords = 0;
;;;1572     uint32_t *tempbuff = (uint32_t *)writebuff;
;;;1573   #endif
;;;1574   
;;;1575     TransferError = SD_OK;
00000c  2000              MOVS     r0,#0
00000e  492c              LDR      r1,|L36.192|
000010  7008              STRB     r0,[r1,#0]
;;;1576     TransferEnd = 0;
000012  492c              LDR      r1,|L36.196|
000014  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1577     StopCondition = 0;
000016  492c              LDR      r1,|L36.200|
000018  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1578     
;;;1579     SDIO->DCTRL = 0x0;
00001a  492c              LDR      r1,|L36.204|
00001c  62c8              STR      r0,[r1,#0x2c]
;;;1580   
;;;1581   
;;;1582     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
00001e  482c              LDR      r0,|L36.208|
000020  6800              LDR      r0,[r0,#0]  ; CardType
000022  2802              CMP      r0,#2
000024  d101              BNE      |L36.42|
;;;1583     {
;;;1584       BlockSize = 512;
000026  0204              LSLS     r4,r0,#8
;;;1585       WriteAddr /= 512;
000028  0a6d              LSRS     r5,r5,#9
                  |L36.42|
;;;1586     }
;;;1587   
;;;1588   	/*-------------- add , 没有这一段容易卡死在DMA检测中 -------------------*/
;;;1589   	/* Set Block Size for Card，cmd16,
;;;1590   	 * 若是sdsc卡，可以用来设置块大小，
;;;1591   	 * 若是sdhc卡，块大小为512字节，不受cmd16影响 
;;;1592   	 */
;;;1593     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
00002a  482a              LDR      r0,|L36.212|
00002c  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1594     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
00002e  2010              MOVS     r0,#0x10
000030  4928              LDR      r1,|L36.212|
000032  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1595     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   
000034  2040              MOVS     r0,#0x40
000036  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1596     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000038  2000              MOVS     r0,#0
00003a  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1597     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00003c  f44f6080          MOV      r0,#0x400
000040  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1598     SDIO_SendCommand(&SDIO_CmdInitStructure);
000042  4608              MOV      r0,r1
000044  f7fffffe          BL       SDIO_SendCommand
;;;1599   
;;;1600     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000048  2010              MOVS     r0,#0x10
00004a  f7fffffe          BL       CmdResp1Error
00004e  4606              MOV      r6,r0
;;;1601   
;;;1602     if (SD_OK != errorstatus)
000050  b116              CBZ      r6,|L36.88|
;;;1603     {
;;;1604       return(errorstatus);
000052  4630              MOV      r0,r6
                  |L36.84|
;;;1605     }
;;;1606    /*********************************************************************************/
;;;1607     
;;;1608     /*!< Send CMD24 WRITE_SINGLE_BLOCK */
;;;1609     SDIO_CmdInitStructure.SDIO_Argument = WriteAddr;	  //写入地址
;;;1610     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;1611     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;	 //r1
;;;1612     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1613     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1614     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1615   
;;;1616     errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
;;;1617   
;;;1618     if (errorstatus != SD_OK)
;;;1619     {
;;;1620       return(errorstatus);
;;;1621     }
;;;1622   	
;;;1623   	//配置sdio的写数据寄存器
;;;1624     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1625     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1626     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;  //可用此参数代替SDIO_DataBlockSize_512b
;;;1627     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;//写数据，
;;;1628     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1629     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;	 //开启数据通道状态机
;;;1630     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1631   
;;;1632     /*!< In case of single data block transfer no need of stop command at all */
;;;1633   #if defined (SD_POLLING_MODE) //普通模式
;;;1634     while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1635     {
;;;1636       if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1637       {
;;;1638         if ((512 - bytestransferred) < 32)
;;;1639         {
;;;1640           restwords = ((512 - bytestransferred) % 4 == 0) ? ((512 - bytestransferred) / 4) : (( 512 -  bytestransferred) / 4 + 1);
;;;1641           for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1642           {
;;;1643             SDIO_WriteData(*tempbuff);
;;;1644           }
;;;1645         }
;;;1646         else
;;;1647         {
;;;1648           for (count = 0; count < 8; count++)
;;;1649           {
;;;1650             SDIO_WriteData(*(tempbuff + count));
;;;1651           }
;;;1652           tempbuff += 8;
;;;1653           bytestransferred += 32;
;;;1654         }
;;;1655       }
;;;1656     }
;;;1657     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1658     {
;;;1659       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1660       errorstatus = SD_DATA_TIMEOUT;
;;;1661       return(errorstatus);
;;;1662     }
;;;1663     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1664     {
;;;1665       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1666       errorstatus = SD_DATA_CRC_FAIL;
;;;1667       return(errorstatus);
;;;1668     }
;;;1669     else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1670     {
;;;1671       SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1672       errorstatus = SD_TX_UNDERRUN;
;;;1673       return(errorstatus);
;;;1674     }
;;;1675     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1676     {
;;;1677       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1678       errorstatus = SD_START_BIT_ERR;
;;;1679       return(errorstatus);
;;;1680     }
;;;1681   #elif defined (SD_DMA_MODE)	//dma模式
;;;1682     SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);  //数据传输结束中断
;;;1683     SD_DMA_TxConfig((uint32_t *)writebuff, BlockSize); //配置dma，跟rx类似
;;;1684     SDIO_DMACmd(ENABLE);	 //	使能sdio的dma请求
;;;1685   #endif
;;;1686   
;;;1687     return(errorstatus);
;;;1688   }
000054  e8bd81f0          POP      {r4-r8,pc}
                  |L36.88|
000058  481e              LDR      r0,|L36.212|
00005a  6005              STR      r5,[r0,#0]            ;1609  ; SDIO_CmdInitStructure
00005c  2018              MOVS     r0,#0x18              ;1610
00005e  491d              LDR      r1,|L36.212|
000060  6048              STR      r0,[r1,#4]            ;1610  ; SDIO_CmdInitStructure
000062  2040              MOVS     r0,#0x40              ;1611
000064  6088              STR      r0,[r1,#8]            ;1611  ; SDIO_CmdInitStructure
000066  2000              MOVS     r0,#0                 ;1612
000068  60c8              STR      r0,[r1,#0xc]          ;1612  ; SDIO_CmdInitStructure
00006a  f44f6080          MOV      r0,#0x400             ;1613
00006e  6108              STR      r0,[r1,#0x10]         ;1613  ; SDIO_CmdInitStructure
000070  4608              MOV      r0,r1                 ;1614
000072  f7fffffe          BL       SDIO_SendCommand
000076  2018              MOVS     r0,#0x18              ;1616
000078  f7fffffe          BL       CmdResp1Error
00007c  4606              MOV      r6,r0                 ;1616
00007e  b10e              CBZ      r6,|L36.132|
000080  4630              MOV      r0,r6                 ;1620
000082  e7e7              B        |L36.84|
                  |L36.132|
000084  f04f30ff          MOV      r0,#0xffffffff        ;1624
000088  4913              LDR      r1,|L36.216|
00008a  6008              STR      r0,[r1,#0]            ;1624  ; SDIO_DataInitStructure
00008c  4608              MOV      r0,r1                 ;1625
00008e  6044              STR      r4,[r0,#4]            ;1625  ; SDIO_DataInitStructure
000090  2090              MOVS     r0,#0x90              ;1626
000092  6088              STR      r0,[r1,#8]            ;1626  ; SDIO_DataInitStructure
000094  2000              MOVS     r0,#0                 ;1627
000096  60c8              STR      r0,[r1,#0xc]          ;1627  ; SDIO_DataInitStructure
000098  6108              STR      r0,[r1,#0x10]         ;1628  ; SDIO_DataInitStructure
00009a  2001              MOVS     r0,#1                 ;1629
00009c  6148              STR      r0,[r1,#0x14]         ;1629  ; SDIO_DataInitStructure
00009e  4608              MOV      r0,r1                 ;1630
0000a0  f7fffffe          BL       SDIO_DataConfig
0000a4  2101              MOVS     r1,#1                 ;1682
0000a6  0208              LSLS     r0,r1,#8              ;1682
0000a8  f7fffffe          BL       SDIO_ITConfig
0000ac  4621              MOV      r1,r4                 ;1683
0000ae  4638              MOV      r0,r7                 ;1683
0000b0  f7fffffe          BL       SD_DMA_TxConfig
0000b4  2001              MOVS     r0,#1                 ;1684
0000b6  f7fffffe          BL       SDIO_DMACmd
0000ba  4630              MOV      r0,r6                 ;1687
0000bc  e7ca              B        |L36.84|
;;;1689   
                          ENDP

0000be  0000              DCW      0x0000
                  |L36.192|
                          DCD      TransferError
                  |L36.196|
                          DCD      TransferEnd
                  |L36.200|
                          DCD      StopCondition
                  |L36.204|
                          DCD      0x40018000
                  |L36.208|
                          DCD      CardType
                  |L36.212|
                          DCD      SDIO_CmdInitStructure
                  |L36.216|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;1719    */
;;;1720   SD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1721   {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;1722     SD_Error errorstatus = SD_OK;
00000c  2400              MOVS     r4,#0
;;;1723     __IO uint32_t count = 0;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;1724   
;;;1725     TransferError = SD_OK;
000012  4945              LDR      r1,|L37.296|
000014  7008              STRB     r0,[r1,#0]
;;;1726     TransferEnd = 0;
000016  4945              LDR      r1,|L37.300|
000018  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1727     StopCondition = 1;
00001a  2001              MOVS     r0,#1
00001c  4944              LDR      r1,|L37.304|
00001e  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1728     
;;;1729     SDIO->DCTRL = 0x0;
000020  2000              MOVS     r0,#0
000022  4944              LDR      r1,|L37.308|
000024  62c8              STR      r0,[r1,#0x2c]
;;;1730   
;;;1731     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000026  4844              LDR      r0,|L37.312|
000028  6800              LDR      r0,[r0,#0]  ; CardType
00002a  2802              CMP      r0,#2
00002c  d101              BNE      |L37.50|
;;;1732     {
;;;1733       BlockSize = 512;
00002e  0205              LSLS     r5,r0,#8
;;;1734       WriteAddr /= 512;
000030  0a7f              LSRS     r7,r7,#9
                  |L37.50|
;;;1735     }
;;;1736   
;;;1737       /*******************add，没有这一段容易卡死在DMA检测中*************************************/
;;;1738       /*!< Set Block Size for Card，cmd16,若是sdsc卡，可以用来设置块大小，若是sdhc卡，块大小为512字节，不受cmd16影响 */
;;;1739     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
000032  4842              LDR      r0,|L37.316|
000034  6005              STR      r5,[r0,#0]  ; SDIO_CmdInitStructure
;;;1740     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000036  2010              MOVS     r0,#0x10
000038  4940              LDR      r1,|L37.316|
00003a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1741     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;   //r1
00003c  2040              MOVS     r0,#0x40
00003e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1742     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000040  2000              MOVS     r0,#0
000042  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1743     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000044  f44f6080          MOV      r0,#0x400
000048  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1744     SDIO_SendCommand(&SDIO_CmdInitStructure);
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       SDIO_SendCommand
;;;1745   
;;;1746     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000050  2010              MOVS     r0,#0x10
000052  f7fffffe          BL       CmdResp1Error
000056  4604              MOV      r4,r0
;;;1747   
;;;1748     if (SD_OK != errorstatus)
000058  b114              CBZ      r4,|L37.96|
;;;1749     {
;;;1750       return(errorstatus);
00005a  4620              MOV      r0,r4
                  |L37.92|
;;;1751     }
;;;1752    /*********************************************************************************/
;;;1753   
;;;1754     /*!< To improve performance  */
;;;1755     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1756     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;	// cmd55
;;;1757     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1758     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1759     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1760     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1761   
;;;1762   
;;;1763     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1764   
;;;1765     if (errorstatus != SD_OK)
;;;1766     {
;;;1767       return(errorstatus);
;;;1768     }
;;;1769     /*!< To improve performance *///  pre-erased，在多块写入时可发送此命令进行预擦除
;;;1770     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;  //参数为将要写入的块数目
;;;1771     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;	 //cmd23
;;;1772     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1773     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1774     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1775     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1776   
;;;1777     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
;;;1778   
;;;1779     if (errorstatus != SD_OK)
;;;1780     {
;;;1781       return(errorstatus);
;;;1782     }
;;;1783   
;;;1784   
;;;1785     /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
;;;1786     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
;;;1787     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1788     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1789     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1790     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1791     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1792   
;;;1793     errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
;;;1794   
;;;1795     if (SD_OK != errorstatus)
;;;1796     {
;;;1797       return(errorstatus);
;;;1798     }
;;;1799   
;;;1800     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1801     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1802     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
;;;1803     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1804     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1805     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1806     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1807   
;;;1808     SDIO_ITConfig(SDIO_IT_DATAEND, ENABLE);
;;;1809     SDIO_DMACmd(ENABLE);    
;;;1810     SD_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
;;;1811   
;;;1812     return(errorstatus);
;;;1813   }
00005c  e8bd83f8          POP      {r3-r9,pc}
                  |L37.96|
000060  4837              LDR      r0,|L37.320|
000062  8800              LDRH     r0,[r0,#0]            ;1755  ; RCA
000064  0400              LSLS     r0,r0,#16             ;1755
000066  4935              LDR      r1,|L37.316|
000068  6008              STR      r0,[r1,#0]            ;1755  ; SDIO_CmdInitStructure
00006a  2037              MOVS     r0,#0x37              ;1756
00006c  6048              STR      r0,[r1,#4]            ;1756  ; SDIO_CmdInitStructure
00006e  2040              MOVS     r0,#0x40              ;1757
000070  6088              STR      r0,[r1,#8]            ;1757  ; SDIO_CmdInitStructure
000072  2000              MOVS     r0,#0                 ;1758
000074  60c8              STR      r0,[r1,#0xc]          ;1758  ; SDIO_CmdInitStructure
000076  f44f6080          MOV      r0,#0x400             ;1759
00007a  6108              STR      r0,[r1,#0x10]         ;1759  ; SDIO_CmdInitStructure
00007c  4608              MOV      r0,r1                 ;1760
00007e  f7fffffe          BL       SDIO_SendCommand
000082  2037              MOVS     r0,#0x37              ;1763
000084  f7fffffe          BL       CmdResp1Error
000088  4604              MOV      r4,r0                 ;1763
00008a  b10c              CBZ      r4,|L37.144|
00008c  4620              MOV      r0,r4                 ;1767
00008e  e7e5              B        |L37.92|
                  |L37.144|
000090  482a              LDR      r0,|L37.316|
000092  6006              STR      r6,[r0,#0]            ;1770  ; SDIO_CmdInitStructure
000094  2017              MOVS     r0,#0x17              ;1771
000096  4929              LDR      r1,|L37.316|
000098  6048              STR      r0,[r1,#4]            ;1771  ; SDIO_CmdInitStructure
00009a  2040              MOVS     r0,#0x40              ;1772
00009c  6088              STR      r0,[r1,#8]            ;1772  ; SDIO_CmdInitStructure
00009e  2000              MOVS     r0,#0                 ;1773
0000a0  60c8              STR      r0,[r1,#0xc]          ;1773  ; SDIO_CmdInitStructure
0000a2  f44f6080          MOV      r0,#0x400             ;1774
0000a6  6108              STR      r0,[r1,#0x10]         ;1774  ; SDIO_CmdInitStructure
0000a8  4608              MOV      r0,r1                 ;1775
0000aa  f7fffffe          BL       SDIO_SendCommand
0000ae  2017              MOVS     r0,#0x17              ;1777
0000b0  f7fffffe          BL       CmdResp1Error
0000b4  4604              MOV      r4,r0                 ;1777
0000b6  b10c              CBZ      r4,|L37.188|
0000b8  4620              MOV      r0,r4                 ;1781
0000ba  e7cf              B        |L37.92|
                  |L37.188|
0000bc  481f              LDR      r0,|L37.316|
0000be  6007              STR      r7,[r0,#0]            ;1786  ; SDIO_CmdInitStructure
0000c0  2019              MOVS     r0,#0x19              ;1787
0000c2  491e              LDR      r1,|L37.316|
0000c4  6048              STR      r0,[r1,#4]            ;1787  ; SDIO_CmdInitStructure
0000c6  2040              MOVS     r0,#0x40              ;1788
0000c8  6088              STR      r0,[r1,#8]            ;1788  ; SDIO_CmdInitStructure
0000ca  2000              MOVS     r0,#0                 ;1789
0000cc  60c8              STR      r0,[r1,#0xc]          ;1789  ; SDIO_CmdInitStructure
0000ce  f44f6080          MOV      r0,#0x400             ;1790
0000d2  6108              STR      r0,[r1,#0x10]         ;1790  ; SDIO_CmdInitStructure
0000d4  4608              MOV      r0,r1                 ;1791
0000d6  f7fffffe          BL       SDIO_SendCommand
0000da  2019              MOVS     r0,#0x19              ;1793
0000dc  f7fffffe          BL       CmdResp1Error
0000e0  4604              MOV      r4,r0                 ;1793
0000e2  b10c              CBZ      r4,|L37.232|
0000e4  4620              MOV      r0,r4                 ;1797
0000e6  e7b9              B        |L37.92|
                  |L37.232|
0000e8  f04f30ff          MOV      r0,#0xffffffff        ;1800
0000ec  4915              LDR      r1,|L37.324|
0000ee  6008              STR      r0,[r1,#0]            ;1800  ; SDIO_DataInitStructure
0000f0  fb06f005          MUL      r0,r6,r5              ;1801
0000f4  6048              STR      r0,[r1,#4]            ;1801  ; SDIO_DataInitStructure
0000f6  2090              MOVS     r0,#0x90              ;1802
0000f8  6088              STR      r0,[r1,#8]            ;1802  ; SDIO_DataInitStructure
0000fa  2000              MOVS     r0,#0                 ;1803
0000fc  60c8              STR      r0,[r1,#0xc]          ;1803  ; SDIO_DataInitStructure
0000fe  6108              STR      r0,[r1,#0x10]         ;1804  ; SDIO_DataInitStructure
000100  2001              MOVS     r0,#1                 ;1805
000102  6148              STR      r0,[r1,#0x14]         ;1805  ; SDIO_DataInitStructure
000104  4608              MOV      r0,r1                 ;1806
000106  f7fffffe          BL       SDIO_DataConfig
00010a  2101              MOVS     r1,#1                 ;1808
00010c  0208              LSLS     r0,r1,#8              ;1808
00010e  f7fffffe          BL       SDIO_ITConfig
000112  2001              MOVS     r0,#1                 ;1809
000114  f7fffffe          BL       SDIO_DMACmd
000118  fb06f105          MUL      r1,r6,r5              ;1810
00011c  4640              MOV      r0,r8                 ;1810
00011e  f7fffffe          BL       SD_DMA_TxConfig
000122  4620              MOV      r0,r4                 ;1812
000124  e79a              B        |L37.92|
;;;1814   
                          ENDP

000126  0000              DCW      0x0000
                  |L37.296|
                          DCD      TransferError
                  |L37.300|
                          DCD      TransferEnd
                  |L37.304|
                          DCD      StopCondition
                  |L37.308|
                          DCD      0x40018000
                  |L37.312|
                          DCD      CardType
                  |L37.316|
                          DCD      SDIO_CmdInitStructure
                  |L37.320|
                          DCD      ||RCA||
                  |L37.324|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;2772     */
;;;2773   uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
000000  4601              MOV      r1,r0
;;;2774   {
;;;2775     uint8_t count = 0;
000002  2000              MOVS     r0,#0
;;;2776   
;;;2777     while (NumberOfBytes != 1)
000004  e002              B        |L38.12|
                  |L38.6|
;;;2778     {
;;;2779       NumberOfBytes >>= 1;
000006  1049              ASRS     r1,r1,#1
;;;2780       count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L38.12|
00000c  2901              CMP      r1,#1                 ;2777
00000e  d1fa              BNE      |L38.6|
;;;2781     }
;;;2782     return(count);
;;;2783   }
000010  4770              BX       lr
;;;2784   		   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDSTATUS_Tab
                          %        16
                  SDCardInfo
                          %        80
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  TransferError
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  TransferEnd
                          DCD      0x00000000
