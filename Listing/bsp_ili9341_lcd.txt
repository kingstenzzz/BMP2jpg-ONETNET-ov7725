; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\bsp_ili9341_lcd.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_ili9341_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\bsp_ili9341_lcd.crf ..\..\User\lcd\bsp_ili9341_lcd.c]
                          THUMB

                          AREA ||i.ILI9341_BackLed_Control||, CODE, READONLY, ALIGN=2

                  ILI9341_BackLed_Control PROC
;;;461     */
;;;462    void ILI9341_BackLed_Control ( FunctionalState enumState )
000000  b510              PUSH     {r4,lr}
;;;463    {
000002  4604              MOV      r4,r0
;;;464    	if ( enumState )
000004  b12c              CBZ      r4,|L1.18|
;;;465    		GPIO_ResetBits ( ILI9341_BK_PORT, ILI9341_BK_PIN );	
000006  f44f5180          MOV      r1,#0x1000
00000a  4805              LDR      r0,|L1.32|
00000c  f7fffffe          BL       GPIO_ResetBits
000010  e004              B        |L1.28|
                  |L1.18|
;;;466    	else
;;;467    		GPIO_SetBits ( ILI9341_BK_PORT, ILI9341_BK_PIN );
000012  f44f5180          MOV      r1,#0x1000
000016  4802              LDR      r0,|L1.32|
000018  f7fffffe          BL       GPIO_SetBits
                  |L1.28|
;;;468    		
;;;469    }
00001c  bd10              POP      {r4,pc}
;;;470    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40011400

                          AREA ||i.ILI9341_Clear||, CODE, READONLY, ALIGN=2

                  ILI9341_Clear PROC
;;;652     */
;;;653    void ILI9341_Clear ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;654    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;655    	ILI9341_OpenWindow ( usX, usY, usWidth, usHeight );
00000c  462b              MOV      r3,r5
00000e  4622              MOV      r2,r4
000010  4639              MOV      r1,r7
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       ILI9341_OpenWindow
;;;656    
;;;657    	ILI9341_FillColor ( usWidth * usHeight, CurrentBackColor );		
000018  fb04f005          MUL      r0,r4,r5
00001c  4902              LDR      r1,|L2.40|
00001e  8809              LDRH     r1,[r1,#0]  ; CurrentBackColor
000020  f7fffffe          BL       ILI9341_FillColor
;;;658    	
;;;659    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;660    
                          ENDP

                  |L2.40|
                          DCD      CurrentBackColor

                          AREA ||i.ILI9341_Delay||, CODE, READONLY, ALIGN=1

                  ILI9341_Delay PROC
;;;88       */	
;;;89     static void ILI9341_Delay ( __IO uint32_t nCount )
000000  b501              PUSH     {r0,lr}
;;;90     {
;;;91       for ( ; nCount != 0; nCount -- );
000002  e002              B        |L3.10|
                  |L3.4|
000004  9800              LDR      r0,[sp,#0]
000006  1e40              SUBS     r0,r0,#1
000008  9000              STR      r0,[sp,#0]
                  |L3.10|
00000a  9800              LDR      r0,[sp,#0]
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L3.4|
;;;92     	
;;;93     }
000010  bd08              POP      {r3,pc}
;;;94     
                          ENDP


                          AREA ||i.ILI9341_DispChar_EN||, CODE, READONLY, ALIGN=2

                  ILI9341_DispChar_EN PROC
;;;917     */
;;;918    void ILI9341_DispChar_EN ( uint16_t usX, uint16_t usY, const char cChar )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;919    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
;;;920    	uint8_t  byteCount, bitCount,fontLength;	
;;;921    	uint16_t ucRelativePositon;
;;;922    	uint8_t *Pfont;
;;;923    	
;;;924    	//对ascii码表偏移（字模表不包含ASCII表的前32个非图形符号）
;;;925    	ucRelativePositon = cChar - ' ';
00000a  f1a60020          SUB      r0,r6,#0x20
00000e  fa1ffa80          UXTH     r10,r0
;;;926    	
;;;927    	//每个字模的字节数
;;;928    	fontLength = (LCD_Currentfonts->Width*LCD_Currentfonts->Height)/8;
000012  491e              LDR      r1,|L4.140|
000014  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
000016  8889              LDRH     r1,[r1,#4]
000018  4a1c              LDR      r2,|L4.140|
00001a  6812              LDR      r2,[r2,#0]  ; LCD_Currentfonts
00001c  88d2              LDRH     r2,[r2,#6]
00001e  fb01f002          MUL      r0,r1,r2
000022  17c1              ASRS     r1,r0,#31
000024  eb007151          ADD      r1,r0,r1,LSR #29
000028  f3c107c7          UBFX     r7,r1,#3,#8
;;;929    		
;;;930    	//字模首地址
;;;931    	/*ascii码表偏移值乘以每个字模的字节数，求出字模的偏移位置*/
;;;932    	Pfont = (uint8_t *)&LCD_Currentfonts->table[ucRelativePositon * fontLength];
00002c  4817              LDR      r0,|L4.140|
00002e  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
000030  6800              LDR      r0,[r0,#0]
000032  fb0a0b07          MLA      r11,r10,r7,r0
;;;933    	
;;;934    	//设置显示窗口
;;;935    	ILI9341_OpenWindow ( usX, usY, LCD_Currentfonts->Width, LCD_Currentfonts->Height);
000036  4815              LDR      r0,|L4.140|
000038  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
00003a  88c3              LDRH     r3,[r0,#6]
00003c  4813              LDR      r0,|L4.140|
00003e  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
000040  8882              LDRH     r2,[r0,#4]
000042  4649              MOV      r1,r9
000044  4640              MOV      r0,r8
000046  f7fffffe          BL       ILI9341_OpenWindow
;;;936    	
;;;937    	ILI9341_Write_Cmd ( CMD_SetPixel );			
00004a  202c              MOVS     r0,#0x2c
00004c  f7fffffe          BL       ILI9341_Write_Cmd
;;;938    
;;;939    	//按字节读取字模数据
;;;940    	//由于前面直接设置了显示窗口，显示数据会自动换行
;;;941    	for ( byteCount = 0; byteCount < fontLength; byteCount++ )
000050  2400              MOVS     r4,#0
000052  e016              B        |L4.130|
                  |L4.84|
;;;942    	{
;;;943    			//一位一位处理要显示的颜色
;;;944    			for ( bitCount = 0; bitCount < 8; bitCount++ )
000054  2500              MOVS     r5,#0
000056  e010              B        |L4.122|
                  |L4.88|
;;;945    			{
;;;946    					if ( Pfont[byteCount] & (0x80>>bitCount) )
000058  f81b0004          LDRB     r0,[r11,r4]
00005c  2180              MOVS     r1,#0x80
00005e  4129              ASRS     r1,r1,r5
000060  4008              ANDS     r0,r0,r1
000062  b120              CBZ      r0,|L4.110|
;;;947    						ILI9341_Write_Data ( CurrentTextColor );			
000064  480a              LDR      r0,|L4.144|
000066  8800              LDRH     r0,[r0,#0]  ; CurrentTextColor
000068  f7fffffe          BL       ILI9341_Write_Data
00006c  e003              B        |L4.118|
                  |L4.110|
;;;948    					else
;;;949    						ILI9341_Write_Data ( CurrentBackColor );
00006e  4809              LDR      r0,|L4.148|
000070  8800              LDRH     r0,[r0,#0]  ; CurrentBackColor
000072  f7fffffe          BL       ILI9341_Write_Data
                  |L4.118|
000076  1c68              ADDS     r0,r5,#1              ;944
000078  b2c5              UXTB     r5,r0                 ;944
                  |L4.122|
00007a  2d08              CMP      r5,#8                 ;944
00007c  dbec              BLT      |L4.88|
00007e  1c60              ADDS     r0,r4,#1              ;941
000080  b2c4              UXTB     r4,r0                 ;941
                  |L4.130|
000082  42bc              CMP      r4,r7                 ;941
000084  dbe6              BLT      |L4.84|
;;;950    			}	
;;;951    	}	
;;;952    }
000086  e8bd8ff0          POP      {r4-r11,pc}
;;;953    
                          ENDP

00008a  0000              DCW      0x0000
                  |L4.140|
                          DCD      LCD_Currentfonts
                  |L4.144|
                          DCD      CurrentTextColor
                  |L4.148|
                          DCD      CurrentBackColor

                          AREA ||i.ILI9341_DispStringLine_EN||, CODE, READONLY, ALIGN=2

                  ILI9341_DispStringLine_EN PROC
;;;964     */
;;;965    void ILI9341_DispStringLine_EN (  uint16_t line,  char * pStr )
000000  b570              PUSH     {r4-r6,lr}
;;;966    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;967    	uint16_t usX = 0;
000006  2600              MOVS     r6,#0
;;;968    	
;;;969    	while ( * pStr != '\0' )
000008  e024              B        |L5.84|
                  |L5.10|
;;;970    	{
;;;971    		if ( ( usX - ILI9341_DispWindow_X_Star + LCD_Currentfonts->Width ) > LCD_X_LENGTH )
00000a  4630              MOV      r0,r6
00000c  4913              LDR      r1,|L5.92|
00000e  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
000010  8889              LDRH     r1,[r1,#4]
000012  4408              ADD      r0,r0,r1
000014  4912              LDR      r1,|L5.96|
000016  8809              LDRH     r1,[r1,#0]  ; LCD_X_LENGTH
000018  4288              CMP      r0,r1
00001a  dd05              BLE      |L5.40|
;;;972    		{
;;;973    			usX = ILI9341_DispWindow_X_Star;
00001c  2600              MOVS     r6,#0
;;;974    			line += LCD_Currentfonts->Height;
00001e  480f              LDR      r0,|L5.92|
000020  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
000022  88c0              LDRH     r0,[r0,#6]
000024  4420              ADD      r0,r0,r4
000026  b284              UXTH     r4,r0
                  |L5.40|
;;;975    		}
;;;976    		
;;;977    		if ( ( line - ILI9341_DispWindow_Y_Star + LCD_Currentfonts->Height ) > LCD_Y_LENGTH )
000028  4620              MOV      r0,r4
00002a  490c              LDR      r1,|L5.92|
00002c  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
00002e  88c9              LDRH     r1,[r1,#6]
000030  4408              ADD      r0,r0,r1
000032  490c              LDR      r1,|L5.100|
000034  8809              LDRH     r1,[r1,#0]  ; LCD_Y_LENGTH
000036  4288              CMP      r0,r1
000038  dd01              BLE      |L5.62|
;;;978    		{
;;;979    			usX = ILI9341_DispWindow_X_Star;
00003a  2600              MOVS     r6,#0
;;;980    			line = ILI9341_DispWindow_Y_Star;
00003c  2400              MOVS     r4,#0
                  |L5.62|
;;;981    		}
;;;982    		
;;;983    		ILI9341_DispChar_EN ( usX, line, * pStr);
00003e  782a              LDRB     r2,[r5,#0]
000040  4621              MOV      r1,r4
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       ILI9341_DispChar_EN
;;;984    		
;;;985    		pStr ++;
000048  1c6d              ADDS     r5,r5,#1
;;;986    		
;;;987    		usX += LCD_Currentfonts->Width;
00004a  4804              LDR      r0,|L5.92|
00004c  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
00004e  8880              LDRH     r0,[r0,#4]
000050  4430              ADD      r0,r0,r6
000052  b286              UXTH     r6,r0
                  |L5.84|
000054  7828              LDRB     r0,[r5,#0]            ;969
000056  2800              CMP      r0,#0                 ;969
000058  d1d7              BNE      |L5.10|
;;;988    		
;;;989    	}
;;;990    	
;;;991    }
00005a  bd70              POP      {r4-r6,pc}
;;;992    
                          ENDP

                  |L5.92|
                          DCD      LCD_Currentfonts
                  |L5.96|
                          DCD      LCD_X_LENGTH
                  |L5.100|
                          DCD      LCD_Y_LENGTH

                          AREA ||i.ILI9341_DispString_EN||, CODE, READONLY, ALIGN=2

                  ILI9341_DispString_EN PROC
;;;1001    */
;;;1002   void ILI9341_DispString_EN ( 	uint16_t usX ,uint16_t usY,  char * pStr )
000000  b570              PUSH     {r4-r6,lr}
;;;1003   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;1004   	while ( * pStr != '\0' )
000008  e024              B        |L6.84|
                  |L6.10|
;;;1005   	{
;;;1006   		if ( ( usX - ILI9341_DispWindow_X_Star + LCD_Currentfonts->Width ) > LCD_X_LENGTH )
00000a  4628              MOV      r0,r5
00000c  4913              LDR      r1,|L6.92|
00000e  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
000010  8889              LDRH     r1,[r1,#4]
000012  4408              ADD      r0,r0,r1
000014  4912              LDR      r1,|L6.96|
000016  8809              LDRH     r1,[r1,#0]  ; LCD_X_LENGTH
000018  4288              CMP      r0,r1
00001a  dd05              BLE      |L6.40|
;;;1007   		{
;;;1008   			usX = ILI9341_DispWindow_X_Star;
00001c  2500              MOVS     r5,#0
;;;1009   			usY += LCD_Currentfonts->Height;
00001e  480f              LDR      r0,|L6.92|
000020  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
000022  88c0              LDRH     r0,[r0,#6]
000024  4430              ADD      r0,r0,r6
000026  b286              UXTH     r6,r0
                  |L6.40|
;;;1010   		}
;;;1011   		
;;;1012   		if ( ( usY - ILI9341_DispWindow_Y_Star + LCD_Currentfonts->Height ) > LCD_Y_LENGTH )
000028  4630              MOV      r0,r6
00002a  490c              LDR      r1,|L6.92|
00002c  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
00002e  88c9              LDRH     r1,[r1,#6]
000030  4408              ADD      r0,r0,r1
000032  490c              LDR      r1,|L6.100|
000034  8809              LDRH     r1,[r1,#0]  ; LCD_Y_LENGTH
000036  4288              CMP      r0,r1
000038  dd01              BLE      |L6.62|
;;;1013   		{
;;;1014   			usX = ILI9341_DispWindow_X_Star;
00003a  2500              MOVS     r5,#0
;;;1015   			usY = ILI9341_DispWindow_Y_Star;
00003c  2600              MOVS     r6,#0
                  |L6.62|
;;;1016   		}
;;;1017   		
;;;1018   		ILI9341_DispChar_EN ( usX, usY, * pStr);
00003e  7822              LDRB     r2,[r4,#0]
000040  4631              MOV      r1,r6
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       ILI9341_DispChar_EN
;;;1019   		
;;;1020   		pStr ++;
000048  1c64              ADDS     r4,r4,#1
;;;1021   		
;;;1022   		usX += LCD_Currentfonts->Width;
00004a  4804              LDR      r0,|L6.92|
00004c  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
00004e  8880              LDRH     r0,[r0,#4]
000050  4428              ADD      r0,r0,r5
000052  b285              UXTH     r5,r0
                  |L6.84|
000054  7820              LDRB     r0,[r4,#0]            ;1004
000056  2800              CMP      r0,#0                 ;1004
000058  d1d7              BNE      |L6.10|
;;;1023   		
;;;1024   	}
;;;1025   	
;;;1026   }
00005a  bd70              POP      {r4-r6,pc}
;;;1027   
                          ENDP

                  |L6.92|
                          DCD      LCD_Currentfonts
                  |L6.96|
                          DCD      LCD_X_LENGTH
                  |L6.100|
                          DCD      LCD_Y_LENGTH

                          AREA ||i.ILI9341_DispString_EN_YDir||, CODE, READONLY, ALIGN=2

                  ILI9341_DispString_EN_YDir PROC
;;;1036    */
;;;1037   void ILI9341_DispString_EN_YDir (	 uint16_t usX,uint16_t usY ,  char * pStr )
000000  b570              PUSH     {r4-r6,lr}
;;;1038   {	
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;1039   	while ( * pStr != '\0' )
000008  e024              B        |L7.84|
                  |L7.10|
;;;1040   	{
;;;1041   		if ( ( usY - ILI9341_DispWindow_Y_Star + LCD_Currentfonts->Height ) >LCD_Y_LENGTH  )
00000a  4630              MOV      r0,r6
00000c  4913              LDR      r1,|L7.92|
00000e  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
000010  88c9              LDRH     r1,[r1,#6]
000012  4408              ADD      r0,r0,r1
000014  4912              LDR      r1,|L7.96|
000016  8809              LDRH     r1,[r1,#0]  ; LCD_Y_LENGTH
000018  4288              CMP      r0,r1
00001a  dd05              BLE      |L7.40|
;;;1042   		{
;;;1043   			usY = ILI9341_DispWindow_Y_Star;
00001c  2600              MOVS     r6,#0
;;;1044   			usX += LCD_Currentfonts->Width;
00001e  480f              LDR      r0,|L7.92|
000020  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
000022  8880              LDRH     r0,[r0,#4]
000024  4428              ADD      r0,r0,r5
000026  b285              UXTH     r5,r0
                  |L7.40|
;;;1045   		}
;;;1046   		
;;;1047   		if ( ( usX - ILI9341_DispWindow_X_Star + LCD_Currentfonts->Width ) >  LCD_X_LENGTH)
000028  4628              MOV      r0,r5
00002a  490c              LDR      r1,|L7.92|
00002c  6809              LDR      r1,[r1,#0]  ; LCD_Currentfonts
00002e  8889              LDRH     r1,[r1,#4]
000030  4408              ADD      r0,r0,r1
000032  490c              LDR      r1,|L7.100|
000034  8809              LDRH     r1,[r1,#0]  ; LCD_X_LENGTH
000036  4288              CMP      r0,r1
000038  dd01              BLE      |L7.62|
;;;1048   		{
;;;1049   			usX = ILI9341_DispWindow_X_Star;
00003a  2500              MOVS     r5,#0
;;;1050   			usY = ILI9341_DispWindow_Y_Star;
00003c  2600              MOVS     r6,#0
                  |L7.62|
;;;1051   		}
;;;1052   		
;;;1053   		ILI9341_DispChar_EN ( usX, usY, * pStr);
00003e  7822              LDRB     r2,[r4,#0]
000040  4631              MOV      r1,r6
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       ILI9341_DispChar_EN
;;;1054   		
;;;1055   		pStr ++;
000048  1c64              ADDS     r4,r4,#1
;;;1056   		
;;;1057   		usY += LCD_Currentfonts->Height;		
00004a  4804              LDR      r0,|L7.92|
00004c  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
00004e  88c0              LDRH     r0,[r0,#6]
000050  4430              ADD      r0,r0,r6
000052  b286              UXTH     r6,r0
                  |L7.84|
000054  7820              LDRB     r0,[r4,#0]            ;1039
000056  2800              CMP      r0,#0                 ;1039
000058  d1d7              BNE      |L7.10|
;;;1058   	}	
;;;1059   }
00005a  bd70              POP      {r4-r6,pc}
;;;1060   
                          ENDP

                  |L7.92|
                          DCD      LCD_Currentfonts
                  |L7.96|
                          DCD      LCD_Y_LENGTH
                  |L7.100|
                          DCD      LCD_X_LENGTH

                          AREA ||i.ILI9341_DrawCircle||, CODE, READONLY, ALIGN=1

                  ILI9341_DrawCircle PROC
;;;849     */
;;;850    void ILI9341_DrawCircle ( uint16_t usX_Center, uint16_t usY_Center, uint16_t usRadius, uint8_t ucFilled )
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;851    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  469b              MOV      r11,r3
;;;852    	int16_t sCurrentX, sCurrentY;
;;;853    	int16_t sError;
;;;854    	
;;;855    	
;;;856    	sCurrentX = 0; sCurrentY = usRadius;	  
00000c  2400              MOVS     r4,#0
00000e  fa0ff789          SXTH     r7,r9
;;;857    	
;;;858    	sError = 3 - ( usRadius << 1 );     //判断下个点位置的标志
000012  2003              MOVS     r0,#3
000014  eba00049          SUB      r0,r0,r9,LSL #1
000018  fa0ffa80          SXTH     r10,r0
;;;859    	
;;;860    	
;;;861    	while ( sCurrentX <= sCurrentY )
00001c  e087              B        |L8.302|
                  |L8.30|
;;;862    	{
;;;863    		int16_t sCountY;
;;;864    		
;;;865    		
;;;866    		if ( ucFilled ) 			
00001e  f1bb0f00          CMP      r11,#0
000022  d040              BEQ      |L8.166|
;;;867    			for ( sCountY = sCurrentX; sCountY <= sCurrentY; sCountY ++ ) 
000024  46a0              MOV      r8,r4
000026  e03b              B        |L8.160|
                  |L8.40|
;;;868    			{                      
;;;869    				ILI9341_SetPointPixel ( usX_Center + sCurrentX, usY_Center + sCountY );           //1，研究对象 
000028  eb060208          ADD      r2,r6,r8
00002c  b291              UXTH     r1,r2
00002e  192a              ADDS     r2,r5,r4
000030  b290              UXTH     r0,r2
000032  f7fffffe          BL       ILI9341_SetPointPixel
;;;870    				ILI9341_SetPointPixel ( usX_Center - sCurrentX, usY_Center + sCountY );           //2       
000036  eb060208          ADD      r2,r6,r8
00003a  b291              UXTH     r1,r2
00003c  1b2a              SUBS     r2,r5,r4
00003e  b290              UXTH     r0,r2
000040  f7fffffe          BL       ILI9341_SetPointPixel
;;;871    				ILI9341_SetPointPixel ( usX_Center - sCountY,   usY_Center + sCurrentX );           //3
000044  1932              ADDS     r2,r6,r4
000046  b291              UXTH     r1,r2
000048  eba50208          SUB      r2,r5,r8
00004c  b290              UXTH     r0,r2
00004e  f7fffffe          BL       ILI9341_SetPointPixel
;;;872    				ILI9341_SetPointPixel ( usX_Center - sCountY,   usY_Center - sCurrentX );           //4
000052  1b32              SUBS     r2,r6,r4
000054  b291              UXTH     r1,r2
000056  eba50208          SUB      r2,r5,r8
00005a  b290              UXTH     r0,r2
00005c  f7fffffe          BL       ILI9341_SetPointPixel
;;;873    				ILI9341_SetPointPixel ( usX_Center - sCurrentX, usY_Center - sCountY );           //5    
000060  eba60208          SUB      r2,r6,r8
000064  b291              UXTH     r1,r2
000066  1b2a              SUBS     r2,r5,r4
000068  b290              UXTH     r0,r2
00006a  f7fffffe          BL       ILI9341_SetPointPixel
;;;874            ILI9341_SetPointPixel ( usX_Center + sCurrentX, usY_Center - sCountY );           //6
00006e  eba60208          SUB      r2,r6,r8
000072  b291              UXTH     r1,r2
000074  192a              ADDS     r2,r5,r4
000076  b290              UXTH     r0,r2
000078  f7fffffe          BL       ILI9341_SetPointPixel
;;;875    				ILI9341_SetPointPixel ( usX_Center + sCountY,   usY_Center - sCurrentX );           //7 	
00007c  1b32              SUBS     r2,r6,r4
00007e  b291              UXTH     r1,r2
000080  eb050208          ADD      r2,r5,r8
000084  b290              UXTH     r0,r2
000086  f7fffffe          BL       ILI9341_SetPointPixel
;;;876            ILI9341_SetPointPixel ( usX_Center + sCountY,   usY_Center + sCurrentX );           //0				
00008a  1932              ADDS     r2,r6,r4
00008c  b291              UXTH     r1,r2
00008e  eb050208          ADD      r2,r5,r8
000092  b290              UXTH     r0,r2
000094  f7fffffe          BL       ILI9341_SetPointPixel
000098  f1080001          ADD      r0,r8,#1              ;867
00009c  fa0ff880          SXTH     r8,r0                 ;867
                  |L8.160|
0000a0  45b8              CMP      r8,r7                 ;867
0000a2  ddc1              BLE      |L8.40|
0000a4  e02f              B        |L8.262|
                  |L8.166|
;;;877    			}
;;;878    		
;;;879    		else
;;;880    		{          
;;;881    			ILI9341_SetPointPixel ( usX_Center + sCurrentX, usY_Center + sCurrentY );             //1，研究对象
0000a6  19f2              ADDS     r2,r6,r7
0000a8  b291              UXTH     r1,r2
0000aa  192a              ADDS     r2,r5,r4
0000ac  b290              UXTH     r0,r2
0000ae  f7fffffe          BL       ILI9341_SetPointPixel
;;;882    			ILI9341_SetPointPixel ( usX_Center - sCurrentX, usY_Center + sCurrentY );             //2      
0000b2  19f2              ADDS     r2,r6,r7
0000b4  b291              UXTH     r1,r2
0000b6  1b2a              SUBS     r2,r5,r4
0000b8  b290              UXTH     r0,r2
0000ba  f7fffffe          BL       ILI9341_SetPointPixel
;;;883    			ILI9341_SetPointPixel ( usX_Center - sCurrentY, usY_Center + sCurrentX );             //3
0000be  1932              ADDS     r2,r6,r4
0000c0  b291              UXTH     r1,r2
0000c2  1bea              SUBS     r2,r5,r7
0000c4  b290              UXTH     r0,r2
0000c6  f7fffffe          BL       ILI9341_SetPointPixel
;;;884    			ILI9341_SetPointPixel ( usX_Center - sCurrentY, usY_Center - sCurrentX );             //4
0000ca  1b32              SUBS     r2,r6,r4
0000cc  b291              UXTH     r1,r2
0000ce  1bea              SUBS     r2,r5,r7
0000d0  b290              UXTH     r0,r2
0000d2  f7fffffe          BL       ILI9341_SetPointPixel
;;;885    			ILI9341_SetPointPixel ( usX_Center - sCurrentX, usY_Center - sCurrentY );             //5       
0000d6  1bf2              SUBS     r2,r6,r7
0000d8  b291              UXTH     r1,r2
0000da  1b2a              SUBS     r2,r5,r4
0000dc  b290              UXTH     r0,r2
0000de  f7fffffe          BL       ILI9341_SetPointPixel
;;;886    			ILI9341_SetPointPixel ( usX_Center + sCurrentX, usY_Center - sCurrentY );             //6
0000e2  1bf2              SUBS     r2,r6,r7
0000e4  b291              UXTH     r1,r2
0000e6  192a              ADDS     r2,r5,r4
0000e8  b290              UXTH     r0,r2
0000ea  f7fffffe          BL       ILI9341_SetPointPixel
;;;887    			ILI9341_SetPointPixel ( usX_Center + sCurrentY, usY_Center - sCurrentX );             //7 
0000ee  1b32              SUBS     r2,r6,r4
0000f0  b291              UXTH     r1,r2
0000f2  19ea              ADDS     r2,r5,r7
0000f4  b290              UXTH     r0,r2
0000f6  f7fffffe          BL       ILI9341_SetPointPixel
;;;888    			ILI9341_SetPointPixel ( usX_Center + sCurrentY, usY_Center + sCurrentX );             //0
0000fa  1932              ADDS     r2,r6,r4
0000fc  b291              UXTH     r1,r2
0000fe  19ea              ADDS     r2,r5,r7
000100  b290              UXTH     r0,r2
000102  f7fffffe          BL       ILI9341_SetPointPixel
                  |L8.262|
;;;889        }			
;;;890    		
;;;891    		
;;;892    		sCurrentX ++;
000106  1c60              ADDS     r0,r4,#1
000108  b204              SXTH     r4,r0
;;;893    
;;;894    		
;;;895    		if ( sError < 0 ) 
00010a  f1ba0f00          CMP      r10,#0
00010e  da05              BGE      |L8.284|
;;;896    			sError += 4 * sCurrentX + 6;	  
000110  00a0              LSLS     r0,r4,#2
000112  1d80              ADDS     r0,r0,#6
000114  4450              ADD      r0,r0,r10
000116  fa0ffa80          SXTH     r10,r0
00011a  e007              B        |L8.300|
                  |L8.284|
;;;897    		
;;;898    		else
;;;899    		{
;;;900    			sError += 10 + 4 * ( sCurrentX - sCurrentY );   
00011c  1be0              SUBS     r0,r4,r7
00011e  0080              LSLS     r0,r0,#2
000120  300a              ADDS     r0,r0,#0xa
000122  4450              ADD      r0,r0,r10
000124  fa0ffa80          SXTH     r10,r0
;;;901    			sCurrentY --;
000128  1e78              SUBS     r0,r7,#1
00012a  b207              SXTH     r7,r0
                  |L8.300|
;;;902    		} 	
;;;903    		
;;;904    		
;;;905    	}
00012c  bf00              NOP      
                  |L8.302|
00012e  42bc              CMP      r4,r7                 ;861
000130  f77faf75          BLE      |L8.30|
;;;906    	
;;;907    	
;;;908    }
000134  e8bd9ff0          POP      {r4-r12,pc}
;;;909    
                          ENDP


                          AREA ||i.ILI9341_DrawLine||, CODE, READONLY, ALIGN=1

                  ILI9341_DrawLine PROC
;;;732     */
;;;733    void ILI9341_DrawLine ( uint16_t usX1, uint16_t usY1, uint16_t usX2, uint16_t usY2 )
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;734    {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
;;;735    	uint16_t us; 
;;;736    	uint16_t usX_Current, usY_Current;
;;;737    	
;;;738    	int32_t lError_X = 0, lError_Y = 0, lDelta_X, lDelta_Y, lDistance; 
000008  f04f0a00          MOV      r10,#0
00000c  46d3              MOV      r11,r10
;;;739    	int32_t lIncrease_X, lIncrease_Y; 	
;;;740    	
;;;741    	
;;;742    	lDelta_X = usX2 - usX1; //计算坐标增量 
00000e  9805              LDR      r0,[sp,#0x14]
000010  eba00509          SUB      r5,r0,r9
;;;743    	lDelta_Y = usY2 - usY1; 
000014  9904              LDR      r1,[sp,#0x10]
000016  9806              LDR      r0,[sp,#0x18]
000018  1a46              SUBS     r6,r0,r1
;;;744    	
;;;745    	usX_Current = usX1; 
00001a  f8cd9004          STR      r9,[sp,#4]
;;;746    	usY_Current = usY1; 
00001e  9804              LDR      r0,[sp,#0x10]
000020  9000              STR      r0,[sp,#0]
;;;747    	
;;;748    	
;;;749    	if ( lDelta_X > 0 ) 
000022  2d00              CMP      r5,#0
000024  dd01              BLE      |L9.42|
;;;750    		lIncrease_X = 1; //设置单步方向 
000026  2701              MOVS     r7,#1
000028  e005              B        |L9.54|
                  |L9.42|
;;;751    	
;;;752    	else if ( lDelta_X == 0 ) 
00002a  b90d              CBNZ     r5,|L9.48|
;;;753    		lIncrease_X = 0;//垂直线 
00002c  2700              MOVS     r7,#0
00002e  e002              B        |L9.54|
                  |L9.48|
;;;754    	
;;;755    	else 
;;;756      { 
;;;757        lIncrease_X = -1;
000030  f04f37ff          MOV      r7,#0xffffffff
;;;758        lDelta_X = - lDelta_X;
000034  426d              RSBS     r5,r5,#0
                  |L9.54|
;;;759      } 
;;;760    
;;;761    	
;;;762    	if ( lDelta_Y > 0 )
000036  2e00              CMP      r6,#0
000038  dd02              BLE      |L9.64|
;;;763    		lIncrease_Y = 1; 
00003a  f04f0801          MOV      r8,#1
00003e  e006              B        |L9.78|
                  |L9.64|
;;;764    	
;;;765    	else if ( lDelta_Y == 0 )
000040  b916              CBNZ     r6,|L9.72|
;;;766    		lIncrease_Y = 0;//水平线 
000042  f04f0800          MOV      r8,#0
000046  e002              B        |L9.78|
                  |L9.72|
;;;767    	
;;;768    	else 
;;;769      {
;;;770        lIncrease_Y = -1;
000048  f04f38ff          MOV      r8,#0xffffffff
;;;771        lDelta_Y = - lDelta_Y;
00004c  4276              RSBS     r6,r6,#0
                  |L9.78|
;;;772      } 
;;;773    
;;;774    	
;;;775    	if (  lDelta_X > lDelta_Y )
00004e  42b5              CMP      r5,r6
000050  dd01              BLE      |L9.86|
;;;776    		lDistance = lDelta_X; //选取基本增量坐标轴 
000052  462c              MOV      r4,r5
000054  e000              B        |L9.88|
                  |L9.86|
;;;777    	
;;;778    	else 
;;;779    		lDistance = lDelta_Y; 
000056  4634              MOV      r4,r6
                  |L9.88|
;;;780    
;;;781    	
;;;782    	for ( us = 0; us <= lDistance + 1; us ++ )//画线输出 
000058  2000              MOVS     r0,#0
00005a  9002              STR      r0,[sp,#8]
00005c  e019              B        |L9.146|
                  |L9.94|
;;;783    	{  
;;;784    		ILI9341_SetPointPixel ( usX_Current, usY_Current );//画点 
00005e  e9dd1000          LDRD     r1,r0,[sp,#0]
000062  f7fffffe          BL       ILI9341_SetPointPixel
;;;785    		
;;;786    		lError_X += lDelta_X ; 
000066  44aa              ADD      r10,r10,r5
;;;787    		lError_Y += lDelta_Y ; 
000068  44b3              ADD      r11,r11,r6
;;;788    		
;;;789    		if ( lError_X > lDistance ) 
00006a  45a2              CMP      r10,r4
00006c  dd05              BLE      |L9.122|
;;;790    		{ 
;;;791    			lError_X -= lDistance; 
00006e  ebaa0a04          SUB      r10,r10,r4
;;;792    			usX_Current += lIncrease_X; 
000072  9801              LDR      r0,[sp,#4]
000074  4438              ADD      r0,r0,r7
000076  b280              UXTH     r0,r0
000078  9001              STR      r0,[sp,#4]
                  |L9.122|
;;;793    		}  
;;;794    		
;;;795    		if ( lError_Y > lDistance ) 
00007a  45a3              CMP      r11,r4
00007c  dd05              BLE      |L9.138|
;;;796    		{ 
;;;797    			lError_Y -= lDistance; 
00007e  ebab0b04          SUB      r11,r11,r4
;;;798    			usY_Current += lIncrease_Y; 
000082  9800              LDR      r0,[sp,#0]
000084  4440              ADD      r0,r0,r8
000086  b280              UXTH     r0,r0
000088  9000              STR      r0,[sp,#0]
                  |L9.138|
00008a  9802              LDR      r0,[sp,#8]            ;782
00008c  1c40              ADDS     r0,r0,#1              ;782
00008e  b280              UXTH     r0,r0                 ;782
000090  9002              STR      r0,[sp,#8]            ;782
                  |L9.146|
000092  1c61              ADDS     r1,r4,#1              ;782
000094  9802              LDR      r0,[sp,#8]            ;782
000096  4288              CMP      r0,r1                 ;782
000098  dde1              BLE      |L9.94|
;;;799    		} 
;;;800    		
;;;801    	}  
;;;802    	
;;;803    	
;;;804    }   
00009a  b007              ADD      sp,sp,#0x1c
00009c  e8bd8ff0          POP      {r4-r11,pc}
;;;805    
                          ENDP


                          AREA ||i.ILI9341_DrawRectangle||, CODE, READONLY, ALIGN=2

                  ILI9341_DrawRectangle PROC
;;;819     */
;;;820    void ILI9341_DrawRectangle ( uint16_t usX_Start, uint16_t usY_Start, uint16_t usWidth, uint16_t usHeight, uint8_t ucFilled )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;821    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;822    	if ( ucFilled )
000010  f1b80f00          CMP      r8,#0
000014  d00c              BEQ      |L10.48|
;;;823    	{
;;;824    		ILI9341_OpenWindow ( usX_Start, usY_Start, usWidth, usHeight );
000016  463b              MOV      r3,r7
000018  4632              MOV      r2,r6
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       ILI9341_OpenWindow
;;;825    		ILI9341_FillColor ( usWidth * usHeight ,CurrentTextColor);	
000022  fb06f007          MUL      r0,r6,r7
000026  4917              LDR      r1,|L10.132|
000028  8809              LDRH     r1,[r1,#0]  ; CurrentTextColor
00002a  f7fffffe          BL       ILI9341_FillColor
00002e  e027              B        |L10.128|
                  |L10.48|
;;;826    	}
;;;827    	else
;;;828    	{
;;;829    		ILI9341_DrawLine ( usX_Start, usY_Start, usX_Start + usWidth - 1, usY_Start );
000030  19a0              ADDS     r0,r4,r6
000032  1e40              SUBS     r0,r0,#1
000034  b282              UXTH     r2,r0
000036  462b              MOV      r3,r5
000038  4629              MOV      r1,r5
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       ILI9341_DrawLine
;;;830    		ILI9341_DrawLine ( usX_Start, usY_Start + usHeight - 1, usX_Start + usWidth - 1, usY_Start + usHeight - 1 );
000040  19e8              ADDS     r0,r5,r7
000042  1e40              SUBS     r0,r0,#1
000044  b283              UXTH     r3,r0
000046  19a0              ADDS     r0,r4,r6
000048  1e40              SUBS     r0,r0,#1
00004a  b282              UXTH     r2,r0
00004c  19e8              ADDS     r0,r5,r7
00004e  1e40              SUBS     r0,r0,#1
000050  b281              UXTH     r1,r0
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       ILI9341_DrawLine
;;;831    		ILI9341_DrawLine ( usX_Start, usY_Start, usX_Start, usY_Start + usHeight - 1 );
000058  19e8              ADDS     r0,r5,r7
00005a  1e40              SUBS     r0,r0,#1
00005c  b283              UXTH     r3,r0
00005e  4622              MOV      r2,r4
000060  4629              MOV      r1,r5
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       ILI9341_DrawLine
;;;832    		ILI9341_DrawLine ( usX_Start + usWidth - 1, usY_Start, usX_Start + usWidth - 1, usY_Start + usHeight - 1 );		
000068  19e9              ADDS     r1,r5,r7
00006a  1e49              SUBS     r1,r1,#1
00006c  b28b              UXTH     r3,r1
00006e  19a1              ADDS     r1,r4,r6
000070  1e49              SUBS     r1,r1,#1
000072  b28a              UXTH     r2,r1
000074  19a1              ADDS     r1,r4,r6
000076  1e49              SUBS     r1,r1,#1
000078  b288              UXTH     r0,r1
00007a  4629              MOV      r1,r5
00007c  f7fffffe          BL       ILI9341_DrawLine
                  |L10.128|
;;;833    	}
;;;834    
;;;835    }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;836    
                          ENDP

                  |L10.132|
                          DCD      CurrentTextColor

                          AREA ||i.ILI9341_FSMC_Config||, CODE, READONLY, ALIGN=1

                  ILI9341_FSMC_Config PROC
;;;216      */
;;;217    static void ILI9341_FSMC_Config ( void )
000000  b500              PUSH     {lr}
;;;218    {
000002  b097              SUB      sp,sp,#0x5c
;;;219    	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;220    	FSMC_NORSRAMTimingInitTypeDef  readWriteTiming; 	
;;;221    	
;;;222    	/* 使能FSMC时钟*/
;;;223    	RCC_AHBPeriphClockCmd ( RCC_AHBPeriph_FSMC, ENABLE );
000004  2101              MOVS     r1,#1
000006  0208              LSLS     r0,r1,#8
000008  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;224    
;;;225    	//地址建立时间（ADDSET）为1个HCLK 2/72M=28ns
;;;226    	readWriteTiming.FSMC_AddressSetupTime      = 0x01;	 //地址建立时间
00000c  2001              MOVS     r0,#1
00000e  9001              STR      r0,[sp,#4]
;;;227    	//数据保持时间（DATAST）+ 1个HCLK = 5/72M=70ns	
;;;228    	readWriteTiming.FSMC_DataSetupTime         = 0x04;	 //数据建立时间
000010  2004              MOVS     r0,#4
000012  9003              STR      r0,[sp,#0xc]
;;;229    	//选择控制的模式
;;;230    	//模式B,异步NOR FLASH模式，与ILI9341的8080时序匹配
;;;231    	readWriteTiming.FSMC_AccessMode            = FSMC_AccessMode_B;	
000014  0680              LSLS     r0,r0,#26
000016  9007              STR      r0,[sp,#0x1c]
;;;232    	
;;;233    	/*以下配置与模式B无关*/
;;;234    	//地址保持时间（ADDHLD）模式A未用到
;;;235    	readWriteTiming.FSMC_AddressHoldTime       = 0x00;	 //地址保持时间
000018  2000              MOVS     r0,#0
00001a  9002              STR      r0,[sp,#8]
;;;236    	//设置总线转换周期，仅用于复用模式的NOR操作
;;;237    	readWriteTiming.FSMC_BusTurnAroundDuration = 0x00;
00001c  9004              STR      r0,[sp,#0x10]
;;;238    	//设置时钟分频，仅用于同步类型的存储器
;;;239    	readWriteTiming.FSMC_CLKDivision           = 0x00;
00001e  9005              STR      r0,[sp,#0x14]
;;;240    	//数据保持时间，仅用于同步型的NOR	
;;;241    	readWriteTiming.FSMC_DataLatency           = 0x00;	
000020  9006              STR      r0,[sp,#0x18]
;;;242    
;;;243    	
;;;244    	FSMC_NORSRAMInitStructure.FSMC_Bank                  = FSMC_Bank1_NORSRAMx;
000022  9008              STR      r0,[sp,#0x20]
;;;245    	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux        = FSMC_DataAddressMux_Disable;
000024  9009              STR      r0,[sp,#0x24]
;;;246    	FSMC_NORSRAMInitStructure.FSMC_MemoryType            = FSMC_MemoryType_NOR;
000026  2008              MOVS     r0,#8
000028  900a              STR      r0,[sp,#0x28]
;;;247    	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth       = FSMC_MemoryDataWidth_16b;
00002a  2010              MOVS     r0,#0x10
00002c  900b              STR      r0,[sp,#0x2c]
;;;248    	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode       = FSMC_BurstAccessMode_Disable;
00002e  2000              MOVS     r0,#0
000030  900c              STR      r0,[sp,#0x30]
;;;249    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity    = FSMC_WaitSignalPolarity_Low;
000032  900e              STR      r0,[sp,#0x38]
;;;250    	FSMC_NORSRAMInitStructure.FSMC_WrapMode              = FSMC_WrapMode_Disable;
000034  900f              STR      r0,[sp,#0x3c]
;;;251    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive      = FSMC_WaitSignalActive_BeforeWaitState;
000036  9010              STR      r0,[sp,#0x40]
;;;252    	FSMC_NORSRAMInitStructure.FSMC_WriteOperation        = FSMC_WriteOperation_Enable;
000038  f44f5080          MOV      r0,#0x1000
00003c  9011              STR      r0,[sp,#0x44]
;;;253    	FSMC_NORSRAMInitStructure.FSMC_WaitSignal            = FSMC_WaitSignal_Disable;
00003e  2000              MOVS     r0,#0
000040  9012              STR      r0,[sp,#0x48]
;;;254    	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode          = FSMC_ExtendedMode_Disable;
000042  9013              STR      r0,[sp,#0x4c]
;;;255    	FSMC_NORSRAMInitStructure.FSMC_WriteBurst            = FSMC_WriteBurst_Disable;
000044  9014              STR      r0,[sp,#0x50]
;;;256    	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &readWriteTiming;
000046  a801              ADD      r0,sp,#4
000048  9015              STR      r0,[sp,#0x54]
;;;257    	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct     = &readWriteTiming;  
00004a  9016              STR      r0,[sp,#0x58]
;;;258    	
;;;259    	FSMC_NORSRAMInit ( & FSMC_NORSRAMInitStructure ); 
00004c  a808              ADD      r0,sp,#0x20
00004e  f7fffffe          BL       FSMC_NORSRAMInit
;;;260    	
;;;261    	
;;;262    	/* 使能 FSMC_Bank1_NORSRAM4 */
;;;263    	FSMC_NORSRAMCmd ( FSMC_Bank1_NORSRAMx, ENABLE );  
000052  2101              MOVS     r1,#1
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       FSMC_NORSRAMCmd
;;;264    		
;;;265    		
;;;266    }
00005a  b017              ADD      sp,sp,#0x5c
00005c  bd00              POP      {pc}
;;;267    
                          ENDP


                          AREA ||i.ILI9341_FillColor||, CODE, READONLY, ALIGN=1

                  ILI9341_FillColor PROC
;;;628     */
;;;629    static __inline void ILI9341_FillColor ( uint32_t ulAmout_Point, uint16_t usColor )
000000  b510              PUSH     {r4,lr}
;;;630    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;631    	uint32_t i = 0;
000006  2400              MOVS     r4,#0
;;;632    	
;;;633    	
;;;634    	/* memory write */
;;;635    	ILI9341_Write_Cmd ( CMD_SetPixel );	
000008  202c              MOVS     r0,#0x2c
00000a  f7fffffe          BL       ILI9341_Write_Cmd
;;;636    		
;;;637    	for ( i = 0; i < ulAmout_Point; i ++ )
00000e  bf00              NOP      
000010  e003              B        |L12.26|
                  |L12.18|
;;;638    		ILI9341_Write_Data ( usColor );
000012  4618              MOV      r0,r3
000014  f7fffffe          BL       ILI9341_Write_Data
000018  1c64              ADDS     r4,r4,#1              ;637
                  |L12.26|
00001a  4294              CMP      r4,r2                 ;637
00001c  d3f9              BCC      |L12.18|
;;;639    		
;;;640    	
;;;641    }
00001e  bd10              POP      {r4,pc}
;;;642    
                          ENDP


                          AREA ||i.ILI9341_GPIO_Config||, CODE, READONLY, ALIGN=2

                  ILI9341_GPIO_Config PROC
;;;100      */
;;;101    static void ILI9341_GPIO_Config ( void )
000000  b508              PUSH     {r3,lr}
;;;102    {
;;;103    	GPIO_InitTypeDef GPIO_InitStructure;
;;;104    
;;;105    	/* 使能FSMC对应相应管脚时钟*/
;;;106    	RCC_APB2PeriphClockCmd ( 	
000002  2101              MOVS     r1,#1
000004  2060              MOVS     r0,#0x60
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;107    													/*控制信号*/
;;;108    													ILI9341_CS_CLK|ILI9341_DC_CLK|ILI9341_WR_CLK|
;;;109    													ILI9341_RD_CLK	|ILI9341_BK_CLK|ILI9341_RST_CLK|
;;;110    													/*数据信号*/
;;;111    													ILI9341_D0_CLK|ILI9341_D1_CLK|	ILI9341_D2_CLK | 
;;;112    													ILI9341_D3_CLK | ILI9341_D4_CLK|ILI9341_D5_CLK|
;;;113    													ILI9341_D6_CLK | ILI9341_D7_CLK|ILI9341_D8_CLK|
;;;114    													ILI9341_D9_CLK | ILI9341_D10_CLK|ILI9341_D11_CLK|
;;;115    													ILI9341_D12_CLK | ILI9341_D13_CLK|ILI9341_D14_CLK|
;;;116    													ILI9341_D15_CLK	, ENABLE );
;;;117    		
;;;118    	
;;;119    	/* 配置FSMC相对应的数据线,FSMC-D0~D15 */	
;;;120    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;121    	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_AF_PP;
000010  2018              MOVS     r0,#0x18
000012  f88d0003          STRB     r0,[sp,#3]
;;;122    	
;;;123    	GPIO_InitStructure.GPIO_Pin = ILI9341_D0_PIN;
000016  f44f4080          MOV      r0,#0x4000
00001a  f8ad0000          STRH     r0,[sp,#0]
;;;124    	GPIO_Init ( ILI9341_D0_PORT, & GPIO_InitStructure );
00001e  4669              MOV      r1,sp
000020  485b              LDR      r0,|L13.400|
000022  f7fffffe          BL       GPIO_Init
;;;125    
;;;126    	GPIO_InitStructure.GPIO_Pin = ILI9341_D1_PIN;
000026  f44f4000          MOV      r0,#0x8000
00002a  f8ad0000          STRH     r0,[sp,#0]
;;;127    	GPIO_Init ( ILI9341_D1_PORT, & GPIO_InitStructure );
00002e  4669              MOV      r1,sp
000030  4857              LDR      r0,|L13.400|
000032  f7fffffe          BL       GPIO_Init
;;;128    	
;;;129    	GPIO_InitStructure.GPIO_Pin = ILI9341_D2_PIN;
000036  2001              MOVS     r0,#1
000038  f8ad0000          STRH     r0,[sp,#0]
;;;130    	GPIO_Init ( ILI9341_D2_PORT, & GPIO_InitStructure );
00003c  4669              MOV      r1,sp
00003e  4854              LDR      r0,|L13.400|
000040  f7fffffe          BL       GPIO_Init
;;;131    	
;;;132    	GPIO_InitStructure.GPIO_Pin = ILI9341_D3_PIN;
000044  2002              MOVS     r0,#2
000046  f8ad0000          STRH     r0,[sp,#0]
;;;133    	GPIO_Init ( ILI9341_D3_PORT, & GPIO_InitStructure );
00004a  4669              MOV      r1,sp
00004c  4850              LDR      r0,|L13.400|
00004e  f7fffffe          BL       GPIO_Init
;;;134    	
;;;135    	GPIO_InitStructure.GPIO_Pin = ILI9341_D4_PIN;
000052  2080              MOVS     r0,#0x80
000054  f8ad0000          STRH     r0,[sp,#0]
;;;136    	GPIO_Init ( ILI9341_D4_PORT, & GPIO_InitStructure );
000058  4669              MOV      r1,sp
00005a  484e              LDR      r0,|L13.404|
00005c  f7fffffe          BL       GPIO_Init
;;;137    	
;;;138    	GPIO_InitStructure.GPIO_Pin = ILI9341_D5_PIN;
000060  f44f7080          MOV      r0,#0x100
000064  f8ad0000          STRH     r0,[sp,#0]
;;;139    	GPIO_Init ( ILI9341_D5_PORT, & GPIO_InitStructure );
000068  4669              MOV      r1,sp
00006a  484a              LDR      r0,|L13.404|
00006c  f7fffffe          BL       GPIO_Init
;;;140    	
;;;141    	GPIO_InitStructure.GPIO_Pin = ILI9341_D6_PIN;
000070  f44f7000          MOV      r0,#0x200
000074  f8ad0000          STRH     r0,[sp,#0]
;;;142    	GPIO_Init ( ILI9341_D6_PORT, & GPIO_InitStructure );
000078  4669              MOV      r1,sp
00007a  4846              LDR      r0,|L13.404|
00007c  f7fffffe          BL       GPIO_Init
;;;143    	
;;;144    	GPIO_InitStructure.GPIO_Pin = ILI9341_D7_PIN;
000080  f44f6080          MOV      r0,#0x400
000084  f8ad0000          STRH     r0,[sp,#0]
;;;145    	GPIO_Init ( ILI9341_D7_PORT, & GPIO_InitStructure );
000088  4669              MOV      r1,sp
00008a  4842              LDR      r0,|L13.404|
00008c  f7fffffe          BL       GPIO_Init
;;;146    	
;;;147    	GPIO_InitStructure.GPIO_Pin = ILI9341_D8_PIN;
000090  f44f6000          MOV      r0,#0x800
000094  f8ad0000          STRH     r0,[sp,#0]
;;;148    	GPIO_Init ( ILI9341_D8_PORT, & GPIO_InitStructure );
000098  4669              MOV      r1,sp
00009a  483e              LDR      r0,|L13.404|
00009c  f7fffffe          BL       GPIO_Init
;;;149    	
;;;150    	GPIO_InitStructure.GPIO_Pin = ILI9341_D9_PIN;
0000a0  f44f5080          MOV      r0,#0x1000
0000a4  f8ad0000          STRH     r0,[sp,#0]
;;;151    	GPIO_Init ( ILI9341_D9_PORT, & GPIO_InitStructure );
0000a8  4669              MOV      r1,sp
0000aa  483a              LDR      r0,|L13.404|
0000ac  f7fffffe          BL       GPIO_Init
;;;152    	
;;;153    	GPIO_InitStructure.GPIO_Pin = ILI9341_D10_PIN;
0000b0  f44f5000          MOV      r0,#0x2000
0000b4  f8ad0000          STRH     r0,[sp,#0]
;;;154    	GPIO_Init ( ILI9341_D10_PORT, & GPIO_InitStructure );
0000b8  4669              MOV      r1,sp
0000ba  4836              LDR      r0,|L13.404|
0000bc  f7fffffe          BL       GPIO_Init
;;;155    	
;;;156    	GPIO_InitStructure.GPIO_Pin = ILI9341_D11_PIN;
0000c0  f44f4080          MOV      r0,#0x4000
0000c4  f8ad0000          STRH     r0,[sp,#0]
;;;157    	GPIO_Init ( ILI9341_D11_PORT, & GPIO_InitStructure );
0000c8  4669              MOV      r1,sp
0000ca  4832              LDR      r0,|L13.404|
0000cc  f7fffffe          BL       GPIO_Init
;;;158    
;;;159    	GPIO_InitStructure.GPIO_Pin = ILI9341_D12_PIN;
0000d0  f44f4000          MOV      r0,#0x8000
0000d4  f8ad0000          STRH     r0,[sp,#0]
;;;160    	GPIO_Init ( ILI9341_D12_PORT, & GPIO_InitStructure );	
0000d8  4669              MOV      r1,sp
0000da  482e              LDR      r0,|L13.404|
0000dc  f7fffffe          BL       GPIO_Init
;;;161    	
;;;162    	GPIO_InitStructure.GPIO_Pin = ILI9341_D13_PIN;
0000e0  f44f7080          MOV      r0,#0x100
0000e4  f8ad0000          STRH     r0,[sp,#0]
;;;163    	GPIO_Init ( ILI9341_D13_PORT, & GPIO_InitStructure );
0000e8  4669              MOV      r1,sp
0000ea  4829              LDR      r0,|L13.400|
0000ec  f7fffffe          BL       GPIO_Init
;;;164    	
;;;165    	GPIO_InitStructure.GPIO_Pin = ILI9341_D14_PIN;
0000f0  f44f7000          MOV      r0,#0x200
0000f4  f8ad0000          STRH     r0,[sp,#0]
;;;166    	GPIO_Init ( ILI9341_D14_PORT, & GPIO_InitStructure );
0000f8  4669              MOV      r1,sp
0000fa  4825              LDR      r0,|L13.400|
0000fc  f7fffffe          BL       GPIO_Init
;;;167    	
;;;168    	GPIO_InitStructure.GPIO_Pin = ILI9341_D15_PIN;
000100  f44f6080          MOV      r0,#0x400
000104  f8ad0000          STRH     r0,[sp,#0]
;;;169    	GPIO_Init ( ILI9341_D15_PORT, & GPIO_InitStructure );
000108  4669              MOV      r1,sp
00010a  4821              LDR      r0,|L13.400|
00010c  f7fffffe          BL       GPIO_Init
;;;170    	
;;;171    
;;;172    	
;;;173    	/* 配置FSMC相对应的控制线
;;;174    	 * FSMC_NOE   :LCD-RD
;;;175    	 * FSMC_NWE   :LCD-WR
;;;176    	 * FSMC_NE1   :LCD-CS
;;;177    	 * FSMC_A16  	:LCD-DC
;;;178    	 */
;;;179    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000110  2003              MOVS     r0,#3
000112  f88d0002          STRB     r0,[sp,#2]
;;;180    	GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_AF_PP;
000116  2018              MOVS     r0,#0x18
000118  f88d0003          STRB     r0,[sp,#3]
;;;181    	
;;;182    	GPIO_InitStructure.GPIO_Pin = ILI9341_RD_PIN; 
00011c  2010              MOVS     r0,#0x10
00011e  f8ad0000          STRH     r0,[sp,#0]
;;;183    	GPIO_Init (ILI9341_RD_PORT, & GPIO_InitStructure );
000122  4669              MOV      r1,sp
000124  481a              LDR      r0,|L13.400|
000126  f7fffffe          BL       GPIO_Init
;;;184    	
;;;185    	GPIO_InitStructure.GPIO_Pin = ILI9341_WR_PIN; 
00012a  2020              MOVS     r0,#0x20
00012c  f8ad0000          STRH     r0,[sp,#0]
;;;186    	GPIO_Init (ILI9341_WR_PORT, & GPIO_InitStructure );
000130  4669              MOV      r1,sp
000132  4817              LDR      r0,|L13.400|
000134  f7fffffe          BL       GPIO_Init
;;;187    	
;;;188    	GPIO_InitStructure.GPIO_Pin = ILI9341_CS_PIN; 
000138  2080              MOVS     r0,#0x80
00013a  f8ad0000          STRH     r0,[sp,#0]
;;;189    	GPIO_Init ( ILI9341_CS_PORT, & GPIO_InitStructure );  
00013e  4669              MOV      r1,sp
000140  4813              LDR      r0,|L13.400|
000142  f7fffffe          BL       GPIO_Init
;;;190    	
;;;191    	GPIO_InitStructure.GPIO_Pin = ILI9341_DC_PIN; 
000146  f44f6000          MOV      r0,#0x800
00014a  f8ad0000          STRH     r0,[sp,#0]
;;;192    	GPIO_Init ( ILI9341_DC_PORT, & GPIO_InitStructure );
00014e  4669              MOV      r1,sp
000150  480f              LDR      r0,|L13.400|
000152  f7fffffe          BL       GPIO_Init
;;;193    	
;;;194    
;;;195      /* 配置LCD复位RST控制管脚*/
;;;196    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000156  2010              MOVS     r0,#0x10
000158  f88d0003          STRB     r0,[sp,#3]
;;;197    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00015c  2003              MOVS     r0,#3
00015e  f88d0002          STRB     r0,[sp,#2]
;;;198    	
;;;199    	GPIO_InitStructure.GPIO_Pin = ILI9341_RST_PIN; 
000162  2002              MOVS     r0,#2
000164  f8ad0000          STRH     r0,[sp,#0]
;;;200    	GPIO_Init ( ILI9341_RST_PORT, & GPIO_InitStructure );
000168  4669              MOV      r1,sp
00016a  480a              LDR      r0,|L13.404|
00016c  f7fffffe          BL       GPIO_Init
;;;201    	
;;;202    	
;;;203    	/* 配置LCD背光控制管脚BK*/
;;;204    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000170  2010              MOVS     r0,#0x10
000172  f88d0003          STRB     r0,[sp,#3]
;;;205    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
000176  2003              MOVS     r0,#3
000178  f88d0002          STRB     r0,[sp,#2]
;;;206    	
;;;207    	GPIO_InitStructure.GPIO_Pin = ILI9341_BK_PIN; 
00017c  f44f5080          MOV      r0,#0x1000
000180  f8ad0000          STRH     r0,[sp,#0]
;;;208    	GPIO_Init ( ILI9341_BK_PORT, & GPIO_InitStructure );
000184  4669              MOV      r1,sp
000186  4802              LDR      r0,|L13.400|
000188  f7fffffe          BL       GPIO_Init
;;;209    }
00018c  bd08              POP      {r3,pc}
;;;210    
                          ENDP

00018e  0000              DCW      0x0000
                  |L13.400|
                          DCD      0x40011400
                  |L13.404|
                          DCD      0x40011800

                          AREA ||i.ILI9341_GetPointPixel||, CODE, READONLY, ALIGN=1

                  ILI9341_GetPointPixel PROC
;;;709     */
;;;710    uint16_t ILI9341_GetPointPixel ( uint16_t usX, uint16_t usY )
000000  b570              PUSH     {r4-r6,lr}
;;;711    { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;712    	uint16_t usPixelData;
;;;713    
;;;714    	
;;;715    	ILI9341_SetCursor ( usX, usY );
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ILI9341_SetCursor
;;;716    	
;;;717    	usPixelData = ILI9341_Read_PixelData ();
00000e  f7fffffe          BL       ILI9341_Read_PixelData
000012  4606              MOV      r6,r0
;;;718    	
;;;719    	return usPixelData;
000014  4630              MOV      r0,r6
;;;720    	
;;;721    }
000016  bd70              POP      {r4-r6,pc}
;;;722    
                          ENDP


                          AREA ||i.ILI9341_GramScan||, CODE, READONLY, ALIGN=2

                  ILI9341_GramScan PROC
;;;541     *******************************************************/
;;;542    void ILI9341_GramScan ( uint8_t ucOption )
000000  b500              PUSH     {lr}
;;;543    {	
000002  4602              MOV      r2,r0
;;;544    	//参数检查，只可输入0-7
;;;545    	if(ucOption >7 )
000004  2a07              CMP      r2,#7
000006  dd00              BLE      |L15.10|
                  |L15.8|
;;;546    		return;
;;;547    	
;;;548    	//根据模式更新LCD_SCAN_MODE的值，主要用于触摸屏选择计算参数
;;;549    	LCD_SCAN_MODE = ucOption;
;;;550    	
;;;551    	//根据模式更新XY方向的像素宽度
;;;552    	if(ucOption%2 == 0)	
;;;553    	{
;;;554    		//0 2 4 6模式下X方向像素宽度为240，Y方向为320
;;;555    		LCD_X_LENGTH = ILI9341_LESS_PIXEL;
;;;556    		LCD_Y_LENGTH =	ILI9341_MORE_PIXEL;
;;;557    	}
;;;558    	else				
;;;559    	{
;;;560    		//1 3 5 7模式下X方向像素宽度为320，Y方向为240
;;;561    		LCD_X_LENGTH = ILI9341_MORE_PIXEL;
;;;562    		LCD_Y_LENGTH =	ILI9341_LESS_PIXEL; 
;;;563    	}
;;;564    
;;;565    	//0x36命令参数的高3位可用于设置GRAM扫描方向	
;;;566    	ILI9341_Write_Cmd ( 0x36 ); 
;;;567    	ILI9341_Write_Data ( 0x08 |(ucOption<<5));//根据ucOption的值设置LCD参数，共0-7种模式
;;;568    	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 
;;;569    	ILI9341_Write_Data ( 0x00 );		/* x 起始坐标高8位 */
;;;570    	ILI9341_Write_Data ( 0x00 );		/* x 起始坐标低8位 */
;;;571    	ILI9341_Write_Data ( ((LCD_X_LENGTH-1)>>8)&0xFF ); /* x 结束坐标高8位 */	
;;;572    	ILI9341_Write_Data ( (LCD_X_LENGTH-1)&0xFF );				/* x 结束坐标低8位 */
;;;573    
;;;574    	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 
;;;575    	ILI9341_Write_Data ( 0x00 );		/* y 起始坐标高8位 */
;;;576    	ILI9341_Write_Data ( 0x00 );		/* y 起始坐标低8位 */
;;;577    	ILI9341_Write_Data ( ((LCD_Y_LENGTH-1)>>8)&0xFF );	/* y 结束坐标高8位 */	 
;;;578    	ILI9341_Write_Data ( (LCD_Y_LENGTH-1)&0xFF );				/* y 结束坐标低8位 */
;;;579    
;;;580    	/* write gram start */
;;;581    	ILI9341_Write_Cmd ( CMD_SetPixel );	
;;;582    }
000008  bd00              POP      {pc}
                  |L15.10|
00000a  4828              LDR      r0,|L15.172|
00000c  7002              STRB     r2,[r0,#0]            ;549
00000e  4610              MOV      r0,r2                 ;552
000010  eb0271d0          ADD      r1,r2,r0,LSR #31      ;552
000014  1049              ASRS     r1,r1,#1              ;552
000016  eba20141          SUB      r1,r2,r1,LSL #1       ;552
00001a  b939              CBNZ     r1,|L15.44|
00001c  20f0              MOVS     r0,#0xf0              ;555
00001e  4924              LDR      r1,|L15.176|
000020  8008              STRH     r0,[r1,#0]            ;555
000022  f44f70a0          MOV      r0,#0x140             ;556
000026  4923              LDR      r1,|L15.180|
000028  8008              STRH     r0,[r1,#0]            ;556
00002a  e006              B        |L15.58|
                  |L15.44|
00002c  f44f70a0          MOV      r0,#0x140             ;561
000030  491f              LDR      r1,|L15.176|
000032  8008              STRH     r0,[r1,#0]            ;561
000034  20f0              MOVS     r0,#0xf0              ;562
000036  491f              LDR      r1,|L15.180|
000038  8008              STRH     r0,[r1,#0]            ;562
                  |L15.58|
00003a  2036              MOVS     r0,#0x36              ;566
00003c  f7fffffe          BL       ILI9341_Write_Cmd
000040  2108              MOVS     r1,#8                 ;567
000042  ea411042          ORR      r0,r1,r2,LSL #5       ;567
000046  f7fffffe          BL       ILI9341_Write_Data
00004a  202a              MOVS     r0,#0x2a              ;568
00004c  f7fffffe          BL       ILI9341_Write_Cmd
000050  2000              MOVS     r0,#0                 ;569
000052  f7fffffe          BL       ILI9341_Write_Data
000056  2000              MOVS     r0,#0                 ;570
000058  f7fffffe          BL       ILI9341_Write_Data
00005c  4914              LDR      r1,|L15.176|
00005e  8809              LDRH     r1,[r1,#0]            ;571  ; LCD_X_LENGTH
000060  1e49              SUBS     r1,r1,#1              ;571
000062  f3c12007          UBFX     r0,r1,#8,#8           ;571
000066  f7fffffe          BL       ILI9341_Write_Data
00006a  4911              LDR      r1,|L15.176|
00006c  7809              LDRB     r1,[r1,#0]            ;572  ; LCD_X_LENGTH
00006e  1e49              SUBS     r1,r1,#1              ;572
000070  b2c8              UXTB     r0,r1                 ;572
000072  f7fffffe          BL       ILI9341_Write_Data
000076  202b              MOVS     r0,#0x2b              ;574
000078  f7fffffe          BL       ILI9341_Write_Cmd
00007c  2000              MOVS     r0,#0                 ;575
00007e  f7fffffe          BL       ILI9341_Write_Data
000082  2000              MOVS     r0,#0                 ;576
000084  f7fffffe          BL       ILI9341_Write_Data
000088  490a              LDR      r1,|L15.180|
00008a  8809              LDRH     r1,[r1,#0]            ;577  ; LCD_Y_LENGTH
00008c  1e49              SUBS     r1,r1,#1              ;577
00008e  f3c12007          UBFX     r0,r1,#8,#8           ;577
000092  f7fffffe          BL       ILI9341_Write_Data
000096  4907              LDR      r1,|L15.180|
000098  7809              LDRB     r1,[r1,#0]            ;578  ; LCD_Y_LENGTH
00009a  1e49              SUBS     r1,r1,#1              ;578
00009c  b2c8              UXTB     r0,r1                 ;578
00009e  f7fffffe          BL       ILI9341_Write_Data
0000a2  202c              MOVS     r0,#0x2c              ;581
0000a4  f7fffffe          BL       ILI9341_Write_Cmd
0000a8  bf00              NOP      
0000aa  e7ad              B        |L15.8|
;;;583    
                          ENDP

                  |L15.172|
                          DCD      LCD_SCAN_MODE
                  |L15.176|
                          DCD      LCD_X_LENGTH
                  |L15.180|
                          DCD      LCD_Y_LENGTH

                          AREA ||i.ILI9341_Init||, CODE, READONLY, ALIGN=2

                  ILI9341_Init PROC
;;;436     */
;;;437    void ILI9341_Init ( void )
000000  b510              PUSH     {r4,lr}
;;;438    {
;;;439    	ILI9341_GPIO_Config ();
000002  f7fffffe          BL       ILI9341_GPIO_Config
;;;440    	ILI9341_FSMC_Config ();
000006  f7fffffe          BL       ILI9341_FSMC_Config
;;;441    	
;;;442    	ILI9341_BackLed_Control ( ENABLE );      //点亮LCD背光灯
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       ILI9341_BackLed_Control
;;;443    	ILI9341_Rst ();
000010  f7fffffe          BL       ILI9341_Rst
;;;444    	ILI9341_REG_Config ();
000014  f7fffffe          BL       ILI9341_REG_Config
;;;445    	
;;;446    	//设置默认扫描方向，其中 6 模式为大部分液晶例程的默认显示方向  
;;;447    	ILI9341_GramScan ( 3 );
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       ILI9341_GramScan
;;;448    	LCD_SetFont(&Font8x16);
00001e  4808              LDR      r0,|L16.64|
000020  f7fffffe          BL       LCD_SetFont
;;;449    	LCD_SetColors(RED,BLACK);
000024  2100              MOVS     r1,#0
000026  f44f4078          MOV      r0,#0xf800
00002a  f7fffffe          BL       LCD_SetColors
;;;450      ILI9341_Clear(0,0,LCD_X_LENGTH,LCD_Y_LENGTH);	/* 清屏，显示全黑 */
00002e  4805              LDR      r0,|L16.68|
000030  8803              LDRH     r3,[r0,#0]  ; LCD_Y_LENGTH
000032  4805              LDR      r0,|L16.72|
000034  8802              LDRH     r2,[r0,#0]  ; LCD_X_LENGTH
000036  2100              MOVS     r1,#0
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       ILI9341_Clear
;;;451    }
00003e  bd10              POP      {r4,pc}
;;;452    
                          ENDP

                  |L16.64|
                          DCD      Font8x16
                  |L16.68|
                          DCD      LCD_Y_LENGTH
                  |L16.72|
                          DCD      LCD_X_LENGTH

                          AREA ||i.ILI9341_OpenWindow||, CODE, READONLY, ALIGN=1

                  ILI9341_OpenWindow PROC
;;;593     */
;;;594    void ILI9341_OpenWindow ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
000000  b530              PUSH     {r4,r5,lr}
;;;595    {	
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;596    	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 				 /* 设置X坐标 */
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       ILI9341_Write_Cmd
;;;597    	ILI9341_Write_Data ( usX >> 8  );	 /* 先高8位，然后低8位 */
00000c  1220              ASRS     r0,r4,#8
00000e  f7fffffe          BL       ILI9341_Write_Data
;;;598    	ILI9341_Write_Data ( usX & 0xff  );	 /* 设置起始点和结束点*/
000012  b2e0              UXTB     r0,r4
000014  f7fffffe          BL       ILI9341_Write_Data
;;;599    	ILI9341_Write_Data ( ( usX + usWidth - 1 ) >> 8  );
000018  18a1              ADDS     r1,r4,r2
00001a  1e49              SUBS     r1,r1,#1
00001c  f3c1200f          UBFX     r0,r1,#8,#16
000020  f7fffffe          BL       ILI9341_Write_Data
;;;600    	ILI9341_Write_Data ( ( usX + usWidth - 1 ) & 0xff  );
000024  18a1              ADDS     r1,r4,r2
000026  1e49              SUBS     r1,r1,#1
000028  b2c8              UXTB     r0,r1
00002a  f7fffffe          BL       ILI9341_Write_Data
;;;601    
;;;602    	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 			     /* 设置Y坐标*/
00002e  202b              MOVS     r0,#0x2b
000030  f7fffffe          BL       ILI9341_Write_Cmd
;;;603    	ILI9341_Write_Data ( usY >> 8  );
000034  1228              ASRS     r0,r5,#8
000036  f7fffffe          BL       ILI9341_Write_Data
;;;604    	ILI9341_Write_Data ( usY & 0xff  );
00003a  b2e8              UXTB     r0,r5
00003c  f7fffffe          BL       ILI9341_Write_Data
;;;605    	ILI9341_Write_Data ( ( usY + usHeight - 1 ) >> 8 );
000040  18e9              ADDS     r1,r5,r3
000042  1e49              SUBS     r1,r1,#1
000044  f3c1200f          UBFX     r0,r1,#8,#16
000048  f7fffffe          BL       ILI9341_Write_Data
;;;606    	ILI9341_Write_Data ( ( usY + usHeight - 1) & 0xff );
00004c  18e9              ADDS     r1,r5,r3
00004e  1e49              SUBS     r1,r1,#1
000050  b2c8              UXTB     r0,r1
000052  f7fffffe          BL       ILI9341_Write_Data
;;;607    	
;;;608    }
000056  bd30              POP      {r4,r5,pc}
;;;609    
                          ENDP


                          AREA ||i.ILI9341_REG_Config||, CODE, READONLY, ALIGN=2

                  ILI9341_REG_Config PROC
;;;273     */
;;;274    static void ILI9341_REG_Config ( void )
000000  b510              PUSH     {r4,lr}
;;;275    {
;;;276    	/*  Power control B (CFh)  */
;;;277    	DEBUG_DELAY  ();
;;;278    	ILI9341_Write_Cmd ( 0xCF  );
000002  20cf              MOVS     r0,#0xcf
000004  f7fffffe          BL       ILI9341_Write_Cmd
;;;279    	ILI9341_Write_Data ( 0x00  );
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       ILI9341_Write_Data
;;;280    	ILI9341_Write_Data ( 0x81  );
00000e  2081              MOVS     r0,#0x81
000010  f7fffffe          BL       ILI9341_Write_Data
;;;281    	ILI9341_Write_Data ( 0x30  );
000014  2030              MOVS     r0,#0x30
000016  f7fffffe          BL       ILI9341_Write_Data
;;;282    	
;;;283    	/*  Power on sequence control (EDh) */
;;;284    	DEBUG_DELAY ();
;;;285    	ILI9341_Write_Cmd ( 0xED );
00001a  20ed              MOVS     r0,#0xed
00001c  f7fffffe          BL       ILI9341_Write_Cmd
;;;286    	ILI9341_Write_Data ( 0x64 );
000020  2064              MOVS     r0,#0x64
000022  f7fffffe          BL       ILI9341_Write_Data
;;;287    	ILI9341_Write_Data ( 0x03 );
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       ILI9341_Write_Data
;;;288    	ILI9341_Write_Data ( 0x12 );
00002c  2012              MOVS     r0,#0x12
00002e  f7fffffe          BL       ILI9341_Write_Data
;;;289    	ILI9341_Write_Data ( 0x81 );
000032  2081              MOVS     r0,#0x81
000034  f7fffffe          BL       ILI9341_Write_Data
;;;290    	
;;;291    	/*  Driver timing control A (E8h) */
;;;292    	DEBUG_DELAY ();
;;;293    	ILI9341_Write_Cmd ( 0xE8 );
000038  20e8              MOVS     r0,#0xe8
00003a  f7fffffe          BL       ILI9341_Write_Cmd
;;;294    	ILI9341_Write_Data ( 0x85 );
00003e  2085              MOVS     r0,#0x85
000040  f7fffffe          BL       ILI9341_Write_Data
;;;295    	ILI9341_Write_Data ( 0x10 );
000044  2010              MOVS     r0,#0x10
000046  f7fffffe          BL       ILI9341_Write_Data
;;;296    	ILI9341_Write_Data ( 0x78 );
00004a  2078              MOVS     r0,#0x78
00004c  f7fffffe          BL       ILI9341_Write_Data
;;;297    	
;;;298    	/*  Power control A (CBh) */
;;;299    	DEBUG_DELAY ();
;;;300    	ILI9341_Write_Cmd ( 0xCB );
000050  20cb              MOVS     r0,#0xcb
000052  f7fffffe          BL       ILI9341_Write_Cmd
;;;301    	ILI9341_Write_Data ( 0x39 );
000056  2039              MOVS     r0,#0x39
000058  f7fffffe          BL       ILI9341_Write_Data
;;;302    	ILI9341_Write_Data ( 0x2C );
00005c  202c              MOVS     r0,#0x2c
00005e  f7fffffe          BL       ILI9341_Write_Data
;;;303    	ILI9341_Write_Data ( 0x00 );
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       ILI9341_Write_Data
;;;304    	ILI9341_Write_Data ( 0x34 );
000068  2034              MOVS     r0,#0x34
00006a  f7fffffe          BL       ILI9341_Write_Data
;;;305    	ILI9341_Write_Data ( 0x02 );
00006e  2002              MOVS     r0,#2
000070  f7fffffe          BL       ILI9341_Write_Data
;;;306    	
;;;307    	/* Pump ratio control (F7h) */
;;;308    	DEBUG_DELAY ();
;;;309    	ILI9341_Write_Cmd ( 0xF7 );
000074  20f7              MOVS     r0,#0xf7
000076  f7fffffe          BL       ILI9341_Write_Cmd
;;;310    	ILI9341_Write_Data ( 0x20 );
00007a  2020              MOVS     r0,#0x20
00007c  f7fffffe          BL       ILI9341_Write_Data
;;;311    	
;;;312    	/* Driver timing control B */
;;;313    	DEBUG_DELAY ();
;;;314    	ILI9341_Write_Cmd ( 0xEA );
000080  20ea              MOVS     r0,#0xea
000082  f7fffffe          BL       ILI9341_Write_Cmd
;;;315    	ILI9341_Write_Data ( 0x00 );
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       ILI9341_Write_Data
;;;316    	ILI9341_Write_Data ( 0x00 );
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       ILI9341_Write_Data
;;;317    	
;;;318    	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
;;;319    	DEBUG_DELAY ();
;;;320    	ILI9341_Write_Cmd ( 0xB1 );
000092  20b1              MOVS     r0,#0xb1
000094  f7fffffe          BL       ILI9341_Write_Cmd
;;;321    	ILI9341_Write_Data ( 0x00 );
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       ILI9341_Write_Data
;;;322    	ILI9341_Write_Data ( 0x1B );
00009e  201b              MOVS     r0,#0x1b
0000a0  f7fffffe          BL       ILI9341_Write_Data
;;;323    	
;;;324    	/*  Display Function Control (B6h) */
;;;325    	DEBUG_DELAY ();
;;;326    	ILI9341_Write_Cmd ( 0xB6 );
0000a4  20b6              MOVS     r0,#0xb6
0000a6  f7fffffe          BL       ILI9341_Write_Cmd
;;;327    	ILI9341_Write_Data ( 0x0A );
0000aa  200a              MOVS     r0,#0xa
0000ac  f7fffffe          BL       ILI9341_Write_Data
;;;328    	ILI9341_Write_Data ( 0xA2 );
0000b0  20a2              MOVS     r0,#0xa2
0000b2  f7fffffe          BL       ILI9341_Write_Data
;;;329    	
;;;330    	/* Power Control 1 (C0h) */
;;;331    	DEBUG_DELAY ();
;;;332    	ILI9341_Write_Cmd ( 0xC0 );
0000b6  20c0              MOVS     r0,#0xc0
0000b8  f7fffffe          BL       ILI9341_Write_Cmd
;;;333    	ILI9341_Write_Data ( 0x35 );
0000bc  2035              MOVS     r0,#0x35
0000be  f7fffffe          BL       ILI9341_Write_Data
;;;334    	
;;;335    	/* Power Control 2 (C1h) */
;;;336    	DEBUG_DELAY ();
;;;337    	ILI9341_Write_Cmd ( 0xC1 );
0000c2  20c1              MOVS     r0,#0xc1
0000c4  f7fffffe          BL       ILI9341_Write_Cmd
;;;338    	ILI9341_Write_Data ( 0x11 );
0000c8  2011              MOVS     r0,#0x11
0000ca  f7fffffe          BL       ILI9341_Write_Data
;;;339    	
;;;340    	/* VCOM Control 1 (C5h) */
;;;341    	ILI9341_Write_Cmd ( 0xC5 );
0000ce  20c5              MOVS     r0,#0xc5
0000d0  f7fffffe          BL       ILI9341_Write_Cmd
;;;342    	ILI9341_Write_Data ( 0x45 );
0000d4  2045              MOVS     r0,#0x45
0000d6  f7fffffe          BL       ILI9341_Write_Data
;;;343    	ILI9341_Write_Data ( 0x45 );
0000da  2045              MOVS     r0,#0x45
0000dc  f7fffffe          BL       ILI9341_Write_Data
;;;344    	
;;;345    	/*  VCOM Control 2 (C7h)  */
;;;346    	ILI9341_Write_Cmd ( 0xC7 );
0000e0  20c7              MOVS     r0,#0xc7
0000e2  f7fffffe          BL       ILI9341_Write_Cmd
;;;347    	ILI9341_Write_Data ( 0xA2 );
0000e6  20a2              MOVS     r0,#0xa2
0000e8  f7fffffe          BL       ILI9341_Write_Data
;;;348    	
;;;349    	/* Enable 3G (F2h) */
;;;350    	ILI9341_Write_Cmd ( 0xF2 );
0000ec  20f2              MOVS     r0,#0xf2
0000ee  f7fffffe          BL       ILI9341_Write_Cmd
;;;351    	ILI9341_Write_Data ( 0x00 );
0000f2  2000              MOVS     r0,#0
0000f4  f7fffffe          BL       ILI9341_Write_Data
;;;352    	
;;;353    	/* Gamma Set (26h) */
;;;354    	ILI9341_Write_Cmd ( 0x26 );
0000f8  2026              MOVS     r0,#0x26
0000fa  f7fffffe          BL       ILI9341_Write_Cmd
;;;355    	ILI9341_Write_Data ( 0x01 );
0000fe  2001              MOVS     r0,#1
000100  f7fffffe          BL       ILI9341_Write_Data
;;;356    	DEBUG_DELAY ();
;;;357    	
;;;358    	/* Positive Gamma Correction */
;;;359    	ILI9341_Write_Cmd ( 0xE0 ); //Set Gamma
000104  20e0              MOVS     r0,#0xe0
000106  f7fffffe          BL       ILI9341_Write_Cmd
;;;360    	ILI9341_Write_Data ( 0x0F );
00010a  200f              MOVS     r0,#0xf
00010c  f7fffffe          BL       ILI9341_Write_Data
;;;361    	ILI9341_Write_Data ( 0x26 );
000110  2026              MOVS     r0,#0x26
000112  f7fffffe          BL       ILI9341_Write_Data
;;;362    	ILI9341_Write_Data ( 0x24 );
000116  2024              MOVS     r0,#0x24
000118  f7fffffe          BL       ILI9341_Write_Data
;;;363    	ILI9341_Write_Data ( 0x0B );
00011c  200b              MOVS     r0,#0xb
00011e  f7fffffe          BL       ILI9341_Write_Data
;;;364    	ILI9341_Write_Data ( 0x0E );
000122  200e              MOVS     r0,#0xe
000124  f7fffffe          BL       ILI9341_Write_Data
;;;365    	ILI9341_Write_Data ( 0x09 );
000128  2009              MOVS     r0,#9
00012a  f7fffffe          BL       ILI9341_Write_Data
;;;366    	ILI9341_Write_Data ( 0x54 );
00012e  2054              MOVS     r0,#0x54
000130  f7fffffe          BL       ILI9341_Write_Data
;;;367    	ILI9341_Write_Data ( 0xA8 );
000134  20a8              MOVS     r0,#0xa8
000136  f7fffffe          BL       ILI9341_Write_Data
;;;368    	ILI9341_Write_Data ( 0x46 );
00013a  2046              MOVS     r0,#0x46
00013c  f7fffffe          BL       ILI9341_Write_Data
;;;369    	ILI9341_Write_Data ( 0x0C );
000140  200c              MOVS     r0,#0xc
000142  f7fffffe          BL       ILI9341_Write_Data
;;;370    	ILI9341_Write_Data ( 0x17 );
000146  2017              MOVS     r0,#0x17
000148  f7fffffe          BL       ILI9341_Write_Data
;;;371    	ILI9341_Write_Data ( 0x09 );
00014c  2009              MOVS     r0,#9
00014e  f7fffffe          BL       ILI9341_Write_Data
;;;372    	ILI9341_Write_Data ( 0x0F );
000152  200f              MOVS     r0,#0xf
000154  f7fffffe          BL       ILI9341_Write_Data
;;;373    	ILI9341_Write_Data ( 0x07 );
000158  2007              MOVS     r0,#7
00015a  f7fffffe          BL       ILI9341_Write_Data
;;;374    	ILI9341_Write_Data ( 0x00 );
00015e  2000              MOVS     r0,#0
000160  f7fffffe          BL       ILI9341_Write_Data
;;;375    	
;;;376    	/* Negative Gamma Correction (E1h) */
;;;377    	ILI9341_Write_Cmd ( 0XE1 ); //Set Gamma
000164  20e1              MOVS     r0,#0xe1
000166  f7fffffe          BL       ILI9341_Write_Cmd
;;;378    	ILI9341_Write_Data ( 0x00 );
00016a  2000              MOVS     r0,#0
00016c  f7fffffe          BL       ILI9341_Write_Data
;;;379    	ILI9341_Write_Data ( 0x19 );
000170  2019              MOVS     r0,#0x19
000172  f7fffffe          BL       ILI9341_Write_Data
;;;380    	ILI9341_Write_Data ( 0x1B );
000176  201b              MOVS     r0,#0x1b
000178  f7fffffe          BL       ILI9341_Write_Data
;;;381    	ILI9341_Write_Data ( 0x04 );
00017c  2004              MOVS     r0,#4
00017e  f7fffffe          BL       ILI9341_Write_Data
;;;382    	ILI9341_Write_Data ( 0x10 );
000182  2010              MOVS     r0,#0x10
000184  f7fffffe          BL       ILI9341_Write_Data
;;;383    	ILI9341_Write_Data ( 0x07 );
000188  2007              MOVS     r0,#7
00018a  f7fffffe          BL       ILI9341_Write_Data
;;;384    	ILI9341_Write_Data ( 0x2A );
00018e  202a              MOVS     r0,#0x2a
000190  f7fffffe          BL       ILI9341_Write_Data
;;;385    	ILI9341_Write_Data ( 0x47 );
000194  2047              MOVS     r0,#0x47
000196  f7fffffe          BL       ILI9341_Write_Data
;;;386    	ILI9341_Write_Data ( 0x39 );
00019a  2039              MOVS     r0,#0x39
00019c  f7fffffe          BL       ILI9341_Write_Data
;;;387    	ILI9341_Write_Data ( 0x03 );
0001a0  2003              MOVS     r0,#3
0001a2  f7fffffe          BL       ILI9341_Write_Data
;;;388    	ILI9341_Write_Data ( 0x06 );
0001a6  2006              MOVS     r0,#6
0001a8  f7fffffe          BL       ILI9341_Write_Data
;;;389    	ILI9341_Write_Data ( 0x06 );
0001ac  2006              MOVS     r0,#6
0001ae  f7fffffe          BL       ILI9341_Write_Data
;;;390    	ILI9341_Write_Data ( 0x30 );
0001b2  2030              MOVS     r0,#0x30
0001b4  f7fffffe          BL       ILI9341_Write_Data
;;;391    	ILI9341_Write_Data ( 0x38 );
0001b8  2038              MOVS     r0,#0x38
0001ba  f7fffffe          BL       ILI9341_Write_Data
;;;392    	ILI9341_Write_Data ( 0x0F );
0001be  200f              MOVS     r0,#0xf
0001c0  f7fffffe          BL       ILI9341_Write_Data
;;;393    	
;;;394    	/* memory access control set */
;;;395    	DEBUG_DELAY ();
;;;396    	ILI9341_Write_Cmd ( 0x36 ); 	
0001c4  2036              MOVS     r0,#0x36
0001c6  f7fffffe          BL       ILI9341_Write_Cmd
;;;397    	ILI9341_Write_Data ( 0xC8 );    /*竖屏  左上角到 (起点)到右下角 (终点)扫描方式*/
0001ca  20c8              MOVS     r0,#0xc8
0001cc  f7fffffe          BL       ILI9341_Write_Data
;;;398    	DEBUG_DELAY ();
;;;399    	
;;;400    	/* column address control set */
;;;401    	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 
0001d0  202a              MOVS     r0,#0x2a
0001d2  f7fffffe          BL       ILI9341_Write_Cmd
;;;402    	ILI9341_Write_Data ( 0x00 );
0001d6  2000              MOVS     r0,#0
0001d8  f7fffffe          BL       ILI9341_Write_Data
;;;403    	ILI9341_Write_Data ( 0x00 );
0001dc  2000              MOVS     r0,#0
0001de  f7fffffe          BL       ILI9341_Write_Data
;;;404    	ILI9341_Write_Data ( 0x00 );
0001e2  2000              MOVS     r0,#0
0001e4  f7fffffe          BL       ILI9341_Write_Data
;;;405    	ILI9341_Write_Data ( 0xEF );
0001e8  20ef              MOVS     r0,#0xef
0001ea  f7fffffe          BL       ILI9341_Write_Data
;;;406    	
;;;407    	/* page address control set */
;;;408    	DEBUG_DELAY ();
;;;409    	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 
0001ee  202b              MOVS     r0,#0x2b
0001f0  f7fffffe          BL       ILI9341_Write_Cmd
;;;410    	ILI9341_Write_Data ( 0x00 );
0001f4  2000              MOVS     r0,#0
0001f6  f7fffffe          BL       ILI9341_Write_Data
;;;411    	ILI9341_Write_Data ( 0x00 );
0001fa  2000              MOVS     r0,#0
0001fc  f7fffffe          BL       ILI9341_Write_Data
;;;412    	ILI9341_Write_Data ( 0x01 );
000200  2001              MOVS     r0,#1
000202  f7fffffe          BL       ILI9341_Write_Data
;;;413    	ILI9341_Write_Data ( 0x3F );
000206  203f              MOVS     r0,#0x3f
000208  f7fffffe          BL       ILI9341_Write_Data
;;;414    	
;;;415    	/*  Pixel Format Set (3Ah)  */
;;;416    	DEBUG_DELAY ();
;;;417    	ILI9341_Write_Cmd ( 0x3a ); 
00020c  203a              MOVS     r0,#0x3a
00020e  f7fffffe          BL       ILI9341_Write_Cmd
;;;418    	ILI9341_Write_Data ( 0x55 );
000212  2055              MOVS     r0,#0x55
000214  f7fffffe          BL       ILI9341_Write_Data
;;;419    	
;;;420    	/* Sleep Out (11h)  */
;;;421    	ILI9341_Write_Cmd ( 0x11 );	
000218  2011              MOVS     r0,#0x11
00021a  f7fffffe          BL       ILI9341_Write_Cmd
;;;422    	ILI9341_Delay ( 0xAFFf<<2 );
00021e  4803              LDR      r0,|L18.556|
000220  f7fffffe          BL       ILI9341_Delay
;;;423    	DEBUG_DELAY ();
;;;424    	
;;;425    	/* Display ON (29h) */
;;;426    	ILI9341_Write_Cmd ( 0x29 ); 
000224  2029              MOVS     r0,#0x29
000226  f7fffffe          BL       ILI9341_Write_Cmd
;;;427    	
;;;428    	
;;;429    }
00022a  bd10              POP      {r4,pc}
;;;430    
                          ENDP

                  |L18.556|
                          DCD      0x0002bffc

                          AREA ||i.ILI9341_Read_Data||, CODE, READONLY, ALIGN=2

                  ILI9341_Read_Data PROC
;;;76       */	
;;;77      uint16_t ILI9341_Read_Data ( void )
000000  4801              LDR      r0,|L19.8|
;;;78     {
;;;79     	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
000002  8800              LDRH     r0,[r0,#0]
;;;80     	
;;;81     }
000004  4770              BX       lr
;;;82     
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x60020000

                          AREA ||i.ILI9341_Read_PixelData||, CODE, READONLY, ALIGN=1

                  ILI9341_Read_PixelData PROC
;;;685     */
;;;686    static uint16_t ILI9341_Read_PixelData ( void )	
000000  b510              PUSH     {r4,lr}
;;;687    {	
;;;688    	uint16_t usR=0, usG=0, usB=0 ;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
;;;689    
;;;690    	
;;;691    	ILI9341_Write_Cmd ( 0x2E );   /* 读数据 */
000008  202e              MOVS     r0,#0x2e
00000a  f7fffffe          BL       ILI9341_Write_Cmd
;;;692    	
;;;693    	usR = ILI9341_Read_Data (); 	/*FIRST READ OUT DUMMY DATA*/
00000e  f7fffffe          BL       ILI9341_Read_Data
000012  4602              MOV      r2,r0
;;;694    	
;;;695    	usR = ILI9341_Read_Data ();  	/*READ OUT RED DATA  */
000014  f7fffffe          BL       ILI9341_Read_Data
000018  4602              MOV      r2,r0
;;;696    	usB = ILI9341_Read_Data ();  	/*READ OUT BLUE DATA*/
00001a  f7fffffe          BL       ILI9341_Read_Data
00001e  4604              MOV      r4,r0
;;;697    	usG = ILI9341_Read_Data ();  	/*READ OUT GREEN DATA*/	
000020  f7fffffe          BL       ILI9341_Read_Data
000024  4603              MOV      r3,r0
;;;698    	
;;;699      return ( ( ( usR >> 11 ) << 11 ) | ( ( usG >> 10 ) << 5 ) | ( usB >> 11 ) );
000026  12d0              ASRS     r0,r2,#11
000028  02c0              LSLS     r0,r0,#11
00002a  1299              ASRS     r1,r3,#10
00002c  ea401041          ORR      r0,r0,r1,LSL #5
000030  ea4020e4          ORR      r0,r0,r4,ASR #11
;;;700    	
;;;701    }
000034  bd10              POP      {r4,pc}
;;;702    
                          ENDP


                          AREA ||i.ILI9341_Rst||, CODE, READONLY, ALIGN=2

                  ILI9341_Rst PROC
;;;477     */
;;;478    void ILI9341_Rst ( void )
000000  b510              PUSH     {r4,lr}
;;;479    {			
;;;480    	GPIO_ResetBits ( ILI9341_RST_PORT, ILI9341_RST_PIN );	 //低电平复位
000002  2102              MOVS     r1,#2
000004  4807              LDR      r0,|L21.36|
000006  f7fffffe          BL       GPIO_ResetBits
;;;481    
;;;482    	ILI9341_Delay ( 0xAFF ); 					   
00000a  f64020ff          MOV      r0,#0xaff
00000e  f7fffffe          BL       ILI9341_Delay
;;;483    
;;;484    	GPIO_SetBits ( ILI9341_RST_PORT, ILI9341_RST_PIN );		 	 
000012  2102              MOVS     r1,#2
000014  4803              LDR      r0,|L21.36|
000016  f7fffffe          BL       GPIO_SetBits
;;;485    
;;;486    	ILI9341_Delay ( 0xAFF ); 	
00001a  f64020ff          MOV      r0,#0xaff
00001e  f7fffffe          BL       ILI9341_Delay
;;;487    	
;;;488    }
000022  bd10              POP      {r4,pc}
;;;489    
                          ENDP

                  |L21.36|
                          DCD      0x40011800

                          AREA ||i.ILI9341_SetCursor||, CODE, READONLY, ALIGN=1

                  ILI9341_SetCursor PROC
;;;616     */
;;;617    static void ILI9341_SetCursor ( uint16_t usX, uint16_t usY )	
000000  b530              PUSH     {r4,r5,lr}
;;;618    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;619    	ILI9341_OpenWindow ( usX, usY, 1, 1 );
000006  2301              MOVS     r3,#1
000008  461a              MOV      r2,r3
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       ILI9341_OpenWindow
;;;620    }
000012  bd30              POP      {r4,r5,pc}
;;;621    
                          ENDP


                          AREA ||i.ILI9341_SetPointPixel||, CODE, READONLY, ALIGN=2

                  ILI9341_SetPointPixel PROC
;;;668     */
;;;669    void ILI9341_SetPointPixel ( uint16_t usX, uint16_t usY )	
000000  b570              PUSH     {r4-r6,lr}
;;;670    {	
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;671    	if ( ( usX < LCD_X_LENGTH ) && ( usY < LCD_Y_LENGTH ) )
000006  4809              LDR      r0,|L23.44|
000008  8800              LDRH     r0,[r0,#0]  ; LCD_X_LENGTH
00000a  4285              CMP      r5,r0
00000c  da0c              BGE      |L23.40|
00000e  4808              LDR      r0,|L23.48|
000010  8800              LDRH     r0,[r0,#0]  ; LCD_Y_LENGTH
000012  4284              CMP      r4,r0
000014  da08              BGE      |L23.40|
;;;672      {
;;;673    		ILI9341_SetCursor ( usX, usY );
000016  4621              MOV      r1,r4
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       ILI9341_SetCursor
;;;674    		
;;;675    		ILI9341_FillColor ( 1, CurrentTextColor );
00001e  4805              LDR      r0,|L23.52|
000020  8801              LDRH     r1,[r0,#0]  ; CurrentTextColor
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       ILI9341_FillColor
                  |L23.40|
;;;676    	}
;;;677    	
;;;678    }
000028  bd70              POP      {r4-r6,pc}
;;;679    
                          ENDP

00002a  0000              DCW      0x0000
                  |L23.44|
                          DCD      LCD_X_LENGTH
                  |L23.48|
                          DCD      LCD_Y_LENGTH
                  |L23.52|
                          DCD      CurrentTextColor

                          AREA ||i.ILI9341_Write_Cmd||, CODE, READONLY, ALIGN=1

                  ILI9341_Write_Cmd PROC
;;;52       */	
;;;53      void ILI9341_Write_Cmd ( uint16_t usCmd )
000000  f04f41c0          MOV      r1,#0x60000000
;;;54     {
;;;55     	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
000004  8008              STRH     r0,[r1,#0]
;;;56     	
;;;57     }
000006  4770              BX       lr
;;;58     
                          ENDP


                          AREA ||i.ILI9341_Write_Data||, CODE, READONLY, ALIGN=2

                  ILI9341_Write_Data PROC
;;;64       */	
;;;65      void ILI9341_Write_Data ( uint16_t usData )
000000  4901              LDR      r1,|L25.8|
;;;66     {
;;;67     	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
000002  8008              STRH     r0,[r1,#0]
;;;68     	
;;;69     }
000004  4770              BX       lr
;;;70     
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x60020000

                          AREA ||i.LCD_ClearLine||, CODE, READONLY, ALIGN=2

                  LCD_ClearLine PROC
;;;1137     */
;;;1138   void LCD_ClearLine(uint16_t Line)
000000  b570              PUSH     {r4-r6,lr}
;;;1139   {
000002  4604              MOV      r4,r0
;;;1140     ILI9341_Clear(0,Line,LCD_X_LENGTH,((sFONT *)LCD_GetFont())->Height);	/* 清屏，显示全黑 */
000004  f7fffffe          BL       LCD_GetFont
000008  88c5              LDRH     r5,[r0,#6]
00000a  462b              MOV      r3,r5
00000c  4803              LDR      r0,|L26.28|
00000e  8802              LDRH     r2,[r0,#0]  ; LCD_X_LENGTH
000010  4621              MOV      r1,r4
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       ILI9341_Clear
;;;1141   
;;;1142   }
000018  bd70              POP      {r4-r6,pc}
;;;1143   /*********************end of file*************************/
                          ENDP

00001a  0000              DCW      0x0000
                  |L26.28|
                          DCD      LCD_X_LENGTH

                          AREA ||i.LCD_GetColors||, CODE, READONLY, ALIGN=2

                  LCD_GetColors PROC
;;;1104     */
;;;1105   void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
000000  4a03              LDR      r2,|L27.16|
;;;1106   {
;;;1107     *TextColor = CurrentTextColor;
000002  8812              LDRH     r2,[r2,#0]  ; CurrentTextColor
000004  8002              STRH     r2,[r0,#0]
;;;1108     *BackColor = CurrentBackColor;
000006  4a03              LDR      r2,|L27.20|
000008  8812              LDRH     r2,[r2,#0]  ; CurrentBackColor
00000a  800a              STRH     r2,[r1,#0]
;;;1109   }
00000c  4770              BX       lr
;;;1110   
                          ENDP

00000e  0000              DCW      0x0000
                  |L27.16|
                          DCD      CurrentTextColor
                  |L27.20|
                          DCD      CurrentBackColor

                          AREA ||i.LCD_GetFont||, CODE, READONLY, ALIGN=2

                  LCD_GetFont PROC
;;;1080     */
;;;1081   sFONT *LCD_GetFont(void)
000000  4801              LDR      r0,|L28.8|
;;;1082   {
;;;1083     return LCD_Currentfonts;
000002  6800              LDR      r0,[r0,#0]  ; LCD_Currentfonts
;;;1084   }
000004  4770              BX       lr
;;;1085   
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      LCD_Currentfonts

                          AREA ||i.LCD_SetBackColor||, CODE, READONLY, ALIGN=2

                  LCD_SetBackColor PROC
;;;1125     */
;;;1126   void LCD_SetBackColor(uint16_t Color)
000000  4901              LDR      r1,|L29.8|
;;;1127   {
;;;1128     CurrentBackColor = Color;
000002  8008              STRH     r0,[r1,#0]
;;;1129   }
000004  4770              BX       lr
;;;1130   
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      CurrentBackColor

                          AREA ||i.LCD_SetColors||, CODE, READONLY, ALIGN=2

                  LCD_SetColors PROC
;;;1092     */
;;;1093   void LCD_SetColors(uint16_t TextColor, uint16_t BackColor) 
000000  4a02              LDR      r2,|L30.12|
;;;1094   {
;;;1095     CurrentTextColor = TextColor; 
000002  8010              STRH     r0,[r2,#0]
;;;1096     CurrentBackColor = BackColor;
000004  4a02              LDR      r2,|L30.16|
000006  8011              STRH     r1,[r2,#0]
;;;1097   }
000008  4770              BX       lr
;;;1098   
                          ENDP

00000a  0000              DCW      0x0000
                  |L30.12|
                          DCD      CurrentTextColor
                  |L30.16|
                          DCD      CurrentBackColor

                          AREA ||i.LCD_SetFont||, CODE, READONLY, ALIGN=2

                  LCD_SetFont PROC
;;;1070     */
;;;1071   void LCD_SetFont(sFONT *fonts)
000000  4901              LDR      r1,|L31.8|
;;;1072   {
;;;1073     LCD_Currentfonts = fonts;
000002  6008              STR      r0,[r1,#0]  ; LCD_Currentfonts
;;;1074   }
000004  4770              BX       lr
;;;1075   
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      LCD_Currentfonts

                          AREA ||i.LCD_SetTextColor||, CODE, READONLY, ALIGN=2

                  LCD_SetTextColor PROC
;;;1115     */
;;;1116   void LCD_SetTextColor(uint16_t Color)
000000  4901              LDR      r1,|L32.8|
;;;1117   {
;;;1118     CurrentTextColor = Color;
000002  8008              STRH     r0,[r1,#0]
;;;1119   }
000004  4770              BX       lr
;;;1120   
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      CurrentTextColor

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_X_LENGTH
000000  00f0              DCW      0x00f0
                  LCD_Y_LENGTH
000002  0140              DCW      0x0140
                  LCD_SCAN_MODE
000004  06000000          DCB      0x06,0x00,0x00,0x00
                  LCD_Currentfonts
                          DCD      Font8x16
                  CurrentTextColor
00000c  0000              DCW      0x0000
                  CurrentBackColor
00000e  ffff              DCW      0xffff
