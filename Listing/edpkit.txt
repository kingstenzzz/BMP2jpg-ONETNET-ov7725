; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\edpkit.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\edpkit.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\edpkit.crf ..\..\User\EDP\EdpKit.c]
                          THUMB

                          AREA ||i.EDP_DeleteBuffer||, CODE, READONLY, ALIGN=1

                  EDP_DeleteBuffer PROC
;;;86     //==========================================================
;;;87     void EDP_DeleteBuffer(EDP_PACKET_STRUCTURE *edpPacket)
000000  b510              PUSH     {r4,lr}
;;;88     {
000002  4604              MOV      r4,r0
;;;89     
;;;90     	if(edpPacket->_memFlag == MEM_FLAG_ALLOC)
000004  7b20              LDRB     r0,[r4,#0xc]
000006  2801              CMP      r0,#1
000008  d102              BNE      |L1.16|
;;;91     		EDP_FreeBuffer(edpPacket->_data);
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       free
                  |L1.16|
;;;92     	
;;;93     	edpPacket->_data = NULL;
000010  2000              MOVS     r0,#0
000012  6020              STR      r0,[r4,#0]
;;;94     	edpPacket->_len = 0;
000014  6060              STR      r0,[r4,#4]
;;;95     	edpPacket->_size = 0;
000016  60a0              STR      r0,[r4,#8]
;;;96     	edpPacket->_memFlag = MEM_FLAG_NULL;
000018  7320              STRB     r0,[r4,#0xc]
;;;97     
;;;98     }
00001a  bd10              POP      {r4,pc}
;;;99     
                          ENDP


                          AREA ||i.EDP_NewBuffer||, CODE, READONLY, ALIGN=1

                  EDP_NewBuffer PROC
;;;40     //==========================================================
;;;41     void EDP_NewBuffer(EDP_PACKET_STRUCTURE *edpPacket, uint32 size)
000000  b570              PUSH     {r4-r6,lr}
;;;42     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;43     	
;;;44     	uint32 i = 0;
000006  2500              MOVS     r5,#0
;;;45     
;;;46     	if(edpPacket->_data == NULL)
000008  6820              LDR      r0,[r4,#0]
00000a  b998              CBNZ     r0,|L2.52|
;;;47     	{
;;;48     		edpPacket->_memFlag = MEM_FLAG_ALLOC;
00000c  2001              MOVS     r0,#1
00000e  7320              STRB     r0,[r4,#0xc]
;;;49     		
;;;50     		edpPacket->_data = (uint8 *)EDP_MallocBuffer(size);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       malloc
000016  6020              STR      r0,[r4,#0]
;;;51     		if(edpPacket->_data != NULL)
000018  6820              LDR      r0,[r4,#0]
00001a  b1e0              CBZ      r0,|L2.86|
;;;52     		{
;;;53     			edpPacket->_len = 0;
00001c  2000              MOVS     r0,#0
00001e  6060              STR      r0,[r4,#4]
;;;54     			
;;;55     			edpPacket->_size = size;
000020  60a6              STR      r6,[r4,#8]
;;;56     
;;;57     			for(; i < edpPacket->_size; i++)
000022  e003              B        |L2.44|
                  |L2.36|
;;;58     				edpPacket->_data[i] = 0;
000024  2000              MOVS     r0,#0
000026  6821              LDR      r1,[r4,#0]
000028  5548              STRB     r0,[r1,r5]
00002a  1c6d              ADDS     r5,r5,#1              ;57
                  |L2.44|
00002c  68a0              LDR      r0,[r4,#8]            ;57
00002e  42a8              CMP      r0,r5                 ;57
000030  d8f8              BHI      |L2.36|
000032  e010              B        |L2.86|
                  |L2.52|
;;;59     		}
;;;60     	}
;;;61     	else
;;;62     	{
;;;63     		edpPacket->_memFlag = MEM_FLAG_STATIC;
000034  2002              MOVS     r0,#2
000036  7320              STRB     r0,[r4,#0xc]
;;;64     		
;;;65     		for(; i < edpPacket->_size; i++)
000038  e003              B        |L2.66|
                  |L2.58|
;;;66     			edpPacket->_data[i] = 0;
00003a  2000              MOVS     r0,#0
00003c  6821              LDR      r1,[r4,#0]
00003e  5548              STRB     r0,[r1,r5]
000040  1c6d              ADDS     r5,r5,#1              ;65
                  |L2.66|
000042  68a0              LDR      r0,[r4,#8]            ;65
000044  42a8              CMP      r0,r5                 ;65
000046  d8f8              BHI      |L2.58|
;;;67     		
;;;68     		edpPacket->_len = 0;
000048  2000              MOVS     r0,#0
00004a  6060              STR      r0,[r4,#4]
;;;69     		
;;;70     		if(edpPacket->_size < size)
00004c  68a0              LDR      r0,[r4,#8]
00004e  42b0              CMP      r0,r6
000050  d201              BCS      |L2.86|
;;;71     			edpPacket->_data = NULL;
000052  2000              MOVS     r0,#0
000054  6020              STR      r0,[r4,#0]
                  |L2.86|
;;;72     	}
;;;73     
;;;74     }
000056  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP


                          AREA ||i.EDP_PacketCmdResp||, CODE, READONLY, ALIGN=1

                  EDP_PacketCmdResp PROC
;;;658    //==========================================================
;;;659    uint1 EDP_PacketCmdResp(const int8 *cmdid, uint16 cmdid_len, const int8 *resp, uint32 resp_len, EDP_PACKET_STRUCTURE *edpPacket)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;660    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461d              MOV      r5,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;661    	
;;;662    	uint32 remain_len = cmdid_len + resp_len + (resp_len ? 6 : 2);
00000e  1970              ADDS     r0,r6,r5
000010  b10d              CBZ      r5,|L3.22|
000012  2106              MOVS     r1,#6
000014  e000              B        |L3.24|
                  |L3.22|
000016  2102              MOVS     r1,#2
                  |L3.24|
000018  1847              ADDS     r7,r0,r1
;;;663    	
;;;664    	EDP_NewBuffer(edpPacket, remain_len + 5);
00001a  1d79              ADDS     r1,r7,#5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       EDP_NewBuffer
;;;665    	if(edpPacket->_data == NULL)
000022  6820              LDR      r0,[r4,#0]
000024  b910              CBNZ     r0,|L3.44|
;;;666    		return 1;
000026  2001              MOVS     r0,#1
                  |L3.40|
;;;667    	
;;;668    	//Byte0：CMDRESP消息------------------------------------------------------------
;;;669    	edpPacket->_data[edpPacket->_len++] = CMDRESP;
;;;670    	
;;;671    	//写入剩余长度------------------------------------------------------------------
;;;672    	edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
;;;673    	
;;;674    	//写入cmdid长度------------------------------------------------------------------
;;;675    	edpPacket->_data[edpPacket->_len++] = cmdid_len >> 8;
;;;676    	edpPacket->_data[edpPacket->_len++] = cmdid_len & 0x00FF;
;;;677    	
;;;678    	//写入cmdid----------------------------------------------------------------------
;;;679    	memcpy((int8 *)edpPacket->_data + edpPacket->_len, cmdid, cmdid_len);
;;;680    	edpPacket->_len += cmdid_len;
;;;681    	
;;;682    	if(resp_len)
;;;683    	{
;;;684    		//写入req长度-----------------------------------------------------------------
;;;685    		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len >> 24);
;;;686    		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len >> 16);
;;;687    		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len >> 8);
;;;688    		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len & 0x00FF);
;;;689    		
;;;690    		//写入req---------------------------------------------------------------------
;;;691    		memcpy((int8 *)edpPacket->_data + edpPacket->_len, resp, resp_len);
;;;692    		
;;;693    		edpPacket->_len += resp_len;
;;;694    	}
;;;695    
;;;696    	return 0;
;;;697    
;;;698    }
000028  e8bd87f0          POP      {r4-r10,pc}
                  |L3.44|
00002c  21b0              MOVS     r1,#0xb0              ;669
00002e  6862              LDR      r2,[r4,#4]            ;669
000030  1c50              ADDS     r0,r2,#1              ;669
000032  6060              STR      r0,[r4,#4]            ;669
000034  6820              LDR      r0,[r4,#0]            ;669
000036  5481              STRB     r1,[r0,r2]            ;669
000038  88a1              LDRH     r1,[r4,#4]            ;672
00003a  b28a              UXTH     r2,r1                 ;672
00003c  4639              MOV      r1,r7                 ;672
00003e  6820              LDR      r0,[r4,#0]            ;672
000040  f7fffffe          BL       WriteRemainlen
000044  6861              LDR      r1,[r4,#4]            ;672
000046  4408              ADD      r0,r0,r1              ;672
000048  6060              STR      r0,[r4,#4]            ;672
00004a  1231              ASRS     r1,r6,#8              ;675
00004c  6862              LDR      r2,[r4,#4]            ;675
00004e  1c50              ADDS     r0,r2,#1              ;675
000050  6060              STR      r0,[r4,#4]            ;675
000052  6820              LDR      r0,[r4,#0]            ;675
000054  5481              STRB     r1,[r0,r2]            ;675
000056  6862              LDR      r2,[r4,#4]            ;676
000058  1c50              ADDS     r0,r2,#1              ;676
00005a  6060              STR      r0,[r4,#4]            ;676
00005c  6820              LDR      r0,[r4,#0]            ;676
00005e  5486              STRB     r6,[r0,r2]            ;676
000060  e9d41200          LDRD     r1,r2,[r4,#0]         ;679
000064  1888              ADDS     r0,r1,r2              ;679
000066  4632              MOV      r2,r6                 ;679
000068  4641              MOV      r1,r8                 ;679
00006a  f7fffffe          BL       __aeabi_memcpy
00006e  6860              LDR      r0,[r4,#4]            ;680
000070  4430              ADD      r0,r0,r6              ;680
000072  6060              STR      r0,[r4,#4]            ;680
000074  b315              CBZ      r5,|L3.188|
000076  0e29              LSRS     r1,r5,#24             ;685
000078  6862              LDR      r2,[r4,#4]            ;685
00007a  1c50              ADDS     r0,r2,#1              ;685
00007c  6060              STR      r0,[r4,#4]            ;685
00007e  6820              LDR      r0,[r4,#0]            ;685
000080  5481              STRB     r1,[r0,r2]            ;685
000082  f3c54107          UBFX     r1,r5,#16,#8          ;686
000086  6862              LDR      r2,[r4,#4]            ;686
000088  1c50              ADDS     r0,r2,#1              ;686
00008a  6060              STR      r0,[r4,#4]            ;686
00008c  6820              LDR      r0,[r4,#0]            ;686
00008e  5481              STRB     r1,[r0,r2]            ;686
000090  f3c52107          UBFX     r1,r5,#8,#8           ;687
000094  6862              LDR      r2,[r4,#4]            ;687
000096  1c50              ADDS     r0,r2,#1              ;687
000098  6060              STR      r0,[r4,#4]            ;687
00009a  6820              LDR      r0,[r4,#0]            ;687
00009c  5481              STRB     r1,[r0,r2]            ;687
00009e  6862              LDR      r2,[r4,#4]            ;688
0000a0  1c50              ADDS     r0,r2,#1              ;688
0000a2  6060              STR      r0,[r4,#4]            ;688
0000a4  6820              LDR      r0,[r4,#0]            ;688
0000a6  5485              STRB     r5,[r0,r2]            ;688
0000a8  e9d41200          LDRD     r1,r2,[r4,#0]         ;691
0000ac  1888              ADDS     r0,r1,r2              ;691
0000ae  462a              MOV      r2,r5                 ;691
0000b0  4649              MOV      r1,r9                 ;691
0000b2  f7fffffe          BL       __aeabi_memcpy
0000b6  6860              LDR      r0,[r4,#4]            ;693
0000b8  4428              ADD      r0,r0,r5              ;693
0000ba  6060              STR      r0,[r4,#4]            ;693
                  |L3.188|
0000bc  2000              MOVS     r0,#0                 ;696
0000be  e7b3              B        |L3.40|
;;;699    
                          ENDP


                          AREA ||i.EDP_PacketConnect1||, CODE, READONLY, ALIGN=2

                  EDP_PacketConnect1 PROC
;;;131    //==========================================================
;;;132    uint1 EDP_PacketConnect1(const int8 *devid, const int8 *apikey, uint16 cTime, EDP_PACKET_STRUCTURE *edpPacket)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;133    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;134    	
;;;135    	uint8 devid_len = strlen(devid);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       strlen
000012  b2c5              UXTB     r5,r0
;;;136    	uint8 apikey_len = strlen(apikey);
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       strlen
00001a  b2c6              UXTB     r6,r0
;;;137    
;;;138    	//分配内存---------------------------------------------------------------------
;;;139    	EDP_NewBuffer(edpPacket, 56);
00001c  2138              MOVS     r1,#0x38
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       EDP_NewBuffer
;;;140    	if(edpPacket->_data == NULL)
000024  6820              LDR      r0,[r4,#0]
000026  b910              CBNZ     r0,|L4.46|
;;;141    		return 1;
000028  2001              MOVS     r0,#1
                  |L4.42|
;;;142    	
;;;143    	//Byte0：连接类型--------------------------------------------------------------
;;;144    	edpPacket->_data[0] = CONNREQ;
;;;145    	edpPacket->_len++;
;;;146    	
;;;147    	//Byte1：剩余消息长度----------------------------------------------------------
;;;148    	edpPacket->_data[1] = 13 + devid_len + apikey_len;
;;;149    	edpPacket->_len++;
;;;150    	
;;;151    	//Byte2~3：协议名长度----------------------------------------------------------
;;;152    	edpPacket->_data[2] = 0;
;;;153    	edpPacket->_data[3] = 3;
;;;154    	edpPacket->_len += 2;
;;;155    	
;;;156    	//Byte4~6：协议名--------------------------------------------------------------
;;;157    	strncat((int8 *)edpPacket->_data + 4, "EDP", 3);
;;;158    	edpPacket->_len += 3;
;;;159    	
;;;160    	//Byte7：协议版本--------------------------------------------------------------
;;;161    	edpPacket->_data[7] = 1;
;;;162    	edpPacket->_len++;
;;;163    	
;;;164    	//Byte8：连接标志--------------------------------------------------------------
;;;165    	edpPacket->_data[8] = 0x40;
;;;166    	edpPacket->_len++;
;;;167    	
;;;168    	//Byte9~10：连接保持时间-------------------------------------------------------
;;;169    	edpPacket->_data[9] = MOSQ_MSB(cTime);
;;;170    	edpPacket->_data[10] = MOSQ_LSB(cTime);
;;;171    	edpPacket->_len += 2;
;;;172    	
;;;173    	//Byte11~12：DEVID长度---------------------------------------------------------
;;;174    	edpPacket->_data[11] = MOSQ_MSB(devid_len);
;;;175    	edpPacket->_data[12] = MOSQ_LSB(devid_len);
;;;176    	edpPacket->_len += 2;
;;;177    	
;;;178    	//Byte13~13+devid_len：DEVID---------------------------------------------------
;;;179    	strncat((int8 *)edpPacket->_data + 13, devid, devid_len);
;;;180    	edpPacket->_len += devid_len;
;;;181    	
;;;182    	//Byte13+devid_len~13+devid_len+2：APIKEY长度----------------------------------
;;;183    	edpPacket->_data[13 + devid_len] = MOSQ_MSB(apikey_len);
;;;184    	edpPacket->_data[14 + devid_len] = MOSQ_LSB(apikey_len);
;;;185    	edpPacket->_len += 2;
;;;186    	
;;;187    	//Byte15+devid_len~15+devid_len+apikey_len：APIKEY-----------------------------
;;;188    	strncat((int8 *)edpPacket->_data + 15 + devid_len, apikey, apikey_len);
;;;189    	edpPacket->_len += apikey_len;
;;;190    	
;;;191    	return 0;
;;;192    
;;;193    }
00002a  e8bd87f0          POP      {r4-r10,pc}
                  |L4.46|
00002e  2010              MOVS     r0,#0x10              ;144
000030  6821              LDR      r1,[r4,#0]            ;144
000032  7008              STRB     r0,[r1,#0]            ;144
000034  6860              LDR      r0,[r4,#4]            ;145
000036  1c40              ADDS     r0,r0,#1              ;145
000038  6060              STR      r0,[r4,#4]            ;145
00003a  f105000d          ADD      r0,r5,#0xd            ;148
00003e  4430              ADD      r0,r0,r6              ;148
000040  6821              LDR      r1,[r4,#0]            ;148
000042  7048              STRB     r0,[r1,#1]            ;148
000044  6860              LDR      r0,[r4,#4]            ;149
000046  1c40              ADDS     r0,r0,#1              ;149
000048  6060              STR      r0,[r4,#4]            ;149
00004a  2000              MOVS     r0,#0                 ;152
00004c  6821              LDR      r1,[r4,#0]            ;152
00004e  7088              STRB     r0,[r1,#2]            ;152
000050  2003              MOVS     r0,#3                 ;153
000052  6821              LDR      r1,[r4,#0]            ;153
000054  70c8              STRB     r0,[r1,#3]            ;153
000056  6860              LDR      r0,[r4,#4]            ;154
000058  1c80              ADDS     r0,r0,#2              ;154
00005a  6060              STR      r0,[r4,#4]            ;154
00005c  6821              LDR      r1,[r4,#0]            ;157
00005e  1d08              ADDS     r0,r1,#4              ;157
000060  2203              MOVS     r2,#3                 ;157
000062  a121              ADR      r1,|L4.232|
000064  f7fffffe          BL       strncat
000068  6860              LDR      r0,[r4,#4]            ;158
00006a  1cc0              ADDS     r0,r0,#3              ;158
00006c  6060              STR      r0,[r4,#4]            ;158
00006e  2001              MOVS     r0,#1                 ;161
000070  6821              LDR      r1,[r4,#0]            ;161
000072  71c8              STRB     r0,[r1,#7]            ;161
000074  6860              LDR      r0,[r4,#4]            ;162
000076  1c40              ADDS     r0,r0,#1              ;162
000078  6060              STR      r0,[r4,#4]            ;162
00007a  2040              MOVS     r0,#0x40              ;165
00007c  6821              LDR      r1,[r4,#0]            ;165
00007e  7208              STRB     r0,[r1,#8]            ;165
000080  6860              LDR      r0,[r4,#4]            ;166
000082  1c40              ADDS     r0,r0,#1              ;166
000084  6060              STR      r0,[r4,#4]            ;166
000086  0a38              LSRS     r0,r7,#8              ;169
000088  6821              LDR      r1,[r4,#0]            ;169
00008a  7248              STRB     r0,[r1,#9]            ;169
00008c  6821              LDR      r1,[r4,#0]            ;170
00008e  728f              STRB     r7,[r1,#0xa]          ;170
000090  6860              LDR      r0,[r4,#4]            ;171
000092  1c80              ADDS     r0,r0,#2              ;171
000094  6060              STR      r0,[r4,#4]            ;171
000096  2000              MOVS     r0,#0                 ;174
000098  6821              LDR      r1,[r4,#0]            ;174
00009a  72c8              STRB     r0,[r1,#0xb]          ;174
00009c  6821              LDR      r1,[r4,#0]            ;175
00009e  730d              STRB     r5,[r1,#0xc]          ;175
0000a0  6860              LDR      r0,[r4,#4]            ;176
0000a2  1c80              ADDS     r0,r0,#2              ;176
0000a4  6060              STR      r0,[r4,#4]            ;176
0000a6  6821              LDR      r1,[r4,#0]            ;179
0000a8  f101000d          ADD      r0,r1,#0xd            ;179
0000ac  462a              MOV      r2,r5                 ;179
0000ae  4641              MOV      r1,r8                 ;179
0000b0  f7fffffe          BL       strncat
0000b4  6860              LDR      r0,[r4,#4]            ;180
0000b6  4428              ADD      r0,r0,r5              ;180
0000b8  6060              STR      r0,[r4,#4]            ;180
0000ba  2100              MOVS     r1,#0                 ;183
0000bc  f105000d          ADD      r0,r5,#0xd            ;183
0000c0  6822              LDR      r2,[r4,#0]            ;183
0000c2  5411              STRB     r1,[r2,r0]            ;183
0000c4  1c40              ADDS     r0,r0,#1              ;184
0000c6  6822              LDR      r2,[r4,#0]            ;184
0000c8  5416              STRB     r6,[r2,r0]            ;184
0000ca  6860              LDR      r0,[r4,#4]            ;185
0000cc  1c80              ADDS     r0,r0,#2              ;185
0000ce  6060              STR      r0,[r4,#4]            ;185
0000d0  6821              LDR      r1,[r4,#0]            ;188
0000d2  310f              ADDS     r1,r1,#0xf            ;188
0000d4  1948              ADDS     r0,r1,r5              ;188
0000d6  4632              MOV      r2,r6                 ;188
0000d8  4649              MOV      r1,r9                 ;188
0000da  f7fffffe          BL       strncat
0000de  6860              LDR      r0,[r4,#4]            ;189
0000e0  4430              ADD      r0,r0,r6              ;189
0000e2  6060              STR      r0,[r4,#4]            ;189
0000e4  2000              MOVS     r0,#0                 ;191
0000e6  e7a0              B        |L4.42|
;;;194    
                          ENDP

                  |L4.232|
0000e8  45445000          DCB      "EDP",0

                          AREA ||i.EDP_PacketConnect2||, CODE, READONLY, ALIGN=2

                  EDP_PacketConnect2 PROC
;;;208    //==========================================================
;;;209    uint1 EDP_PacketConnect2(const int8 *proid, const int8 *auth_key, uint16 cTime, EDP_PACKET_STRUCTURE *edpPacket)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;210    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;211    	
;;;212    	uint8 proid_len = strlen(proid);
00000c  4640              MOV      r0,r8
00000e  f7fffffe          BL       strlen
000012  b2c5              UXTB     r5,r0
;;;213    	uint8 authkey_len = strlen(auth_key);
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       strlen
00001a  b2c6              UXTB     r6,r0
;;;214    
;;;215    	//分配内存---------------------------------------------------------------------
;;;216    	EDP_NewBuffer(edpPacket, 56);
00001c  2138              MOVS     r1,#0x38
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       EDP_NewBuffer
;;;217    	if(edpPacket->_data == NULL)
000024  6820              LDR      r0,[r4,#0]
000026  b910              CBNZ     r0,|L5.46|
;;;218    		return 1;
000028  2001              MOVS     r0,#1
                  |L5.42|
;;;219    	
;;;220    	//Byte0：连接类型--------------------------------------------------------------
;;;221    	edpPacket->_data[0] = CONNREQ;
;;;222    	edpPacket->_len++;
;;;223    	
;;;224    	//Byte1：剩余消息长度----------------------------------------------------------
;;;225    	edpPacket->_data[1] = 15 + proid_len + authkey_len;
;;;226    	edpPacket->_len++;
;;;227    	
;;;228    	//Byte2~3：协议名长度----------------------------------------------------------
;;;229    	edpPacket->_data[2] = 0;
;;;230    	edpPacket->_data[3] = 3;
;;;231    	edpPacket->_len += 2;
;;;232    	
;;;233    	//Byte4~6：协议名--------------------------------------------------------------
;;;234    	strncat((int8 *)edpPacket->_data + 4, "EDP", 3);
;;;235    	edpPacket->_len += 3;
;;;236    	
;;;237    	//Byte7：协议版本--------------------------------------------------------------
;;;238    	edpPacket->_data[7] = 1;
;;;239    	edpPacket->_len++;
;;;240    	
;;;241    	//Byte8：连接标志--------------------------------------------------------------
;;;242    	edpPacket->_data[8] = 0xC0;
;;;243    	edpPacket->_len++;
;;;244    	
;;;245    	//Byte9~10：连接保持时间-------------------------------------------------------
;;;246    	edpPacket->_data[9] = MOSQ_MSB(cTime);
;;;247    	edpPacket->_data[10] = MOSQ_LSB(cTime);
;;;248    	edpPacket->_len += 2;
;;;249    	
;;;250    	//Byte11~12：DEVID长度---------------------------------------------------------
;;;251    	edpPacket->_data[11] = 0;
;;;252    	edpPacket->_data[12] = 0;
;;;253    	edpPacket->_len += 2;
;;;254    	
;;;255    	//Byte13~14：PROID长度---------------------------------------------------------
;;;256    	edpPacket->_data[13] = MOSQ_MSB(proid_len);
;;;257    	edpPacket->_data[14] = MOSQ_LSB(proid_len);
;;;258    	edpPacket->_len += 2;
;;;259    	
;;;260    	//Byte15~15+proid_len：RPOID---------------------------------------------------
;;;261    	strncat((int8 *)edpPacket->_data + 15, proid, proid_len);
;;;262    	edpPacket->_len += proid_len;
;;;263    	
;;;264    	//Byte15+devid_len~15+proid_len+1：APIKEY长度----------------------------------
;;;265    	edpPacket->_data[15 + proid_len] = MOSQ_MSB(authkey_len);
;;;266    	edpPacket->_data[16 + proid_len] = MOSQ_LSB(authkey_len);
;;;267    	edpPacket->_len += 2;
;;;268    	
;;;269    	//Byte17+proid_len~17+proid_len+apikey_len：APIKEY-----------------------------
;;;270    	strncat((int8 *)edpPacket->_data + 17 + proid_len, auth_key, authkey_len);
;;;271    	edpPacket->_len += authkey_len;
;;;272    	
;;;273    	return 0;
;;;274    
;;;275    }
00002a  e8bd87f0          POP      {r4-r10,pc}
                  |L5.46|
00002e  2010              MOVS     r0,#0x10              ;221
000030  6821              LDR      r1,[r4,#0]            ;221
000032  7008              STRB     r0,[r1,#0]            ;221
000034  6860              LDR      r0,[r4,#4]            ;222
000036  1c40              ADDS     r0,r0,#1              ;222
000038  6060              STR      r0,[r4,#4]            ;222
00003a  f105000f          ADD      r0,r5,#0xf            ;225
00003e  4430              ADD      r0,r0,r6              ;225
000040  6821              LDR      r1,[r4,#0]            ;225
000042  7048              STRB     r0,[r1,#1]            ;225
000044  6860              LDR      r0,[r4,#4]            ;226
000046  1c40              ADDS     r0,r0,#1              ;226
000048  6060              STR      r0,[r4,#4]            ;226
00004a  2000              MOVS     r0,#0                 ;229
00004c  6821              LDR      r1,[r4,#0]            ;229
00004e  7088              STRB     r0,[r1,#2]            ;229
000050  2003              MOVS     r0,#3                 ;230
000052  6821              LDR      r1,[r4,#0]            ;230
000054  70c8              STRB     r0,[r1,#3]            ;230
000056  6860              LDR      r0,[r4,#4]            ;231
000058  1c80              ADDS     r0,r0,#2              ;231
00005a  6060              STR      r0,[r4,#4]            ;231
00005c  6821              LDR      r1,[r4,#0]            ;234
00005e  1d08              ADDS     r0,r1,#4              ;234
000060  2203              MOVS     r2,#3                 ;234
000062  a125              ADR      r1,|L5.248|
000064  f7fffffe          BL       strncat
000068  6860              LDR      r0,[r4,#4]            ;235
00006a  1cc0              ADDS     r0,r0,#3              ;235
00006c  6060              STR      r0,[r4,#4]            ;235
00006e  2001              MOVS     r0,#1                 ;238
000070  6821              LDR      r1,[r4,#0]            ;238
000072  71c8              STRB     r0,[r1,#7]            ;238
000074  6860              LDR      r0,[r4,#4]            ;239
000076  1c40              ADDS     r0,r0,#1              ;239
000078  6060              STR      r0,[r4,#4]            ;239
00007a  20c0              MOVS     r0,#0xc0              ;242
00007c  6821              LDR      r1,[r4,#0]            ;242
00007e  7208              STRB     r0,[r1,#8]            ;242
000080  6860              LDR      r0,[r4,#4]            ;243
000082  1c40              ADDS     r0,r0,#1              ;243
000084  6060              STR      r0,[r4,#4]            ;243
000086  0a38              LSRS     r0,r7,#8              ;246
000088  6821              LDR      r1,[r4,#0]            ;246
00008a  7248              STRB     r0,[r1,#9]            ;246
00008c  6821              LDR      r1,[r4,#0]            ;247
00008e  728f              STRB     r7,[r1,#0xa]          ;247
000090  6860              LDR      r0,[r4,#4]            ;248
000092  1c80              ADDS     r0,r0,#2              ;248
000094  6060              STR      r0,[r4,#4]            ;248
000096  2000              MOVS     r0,#0                 ;251
000098  6821              LDR      r1,[r4,#0]            ;251
00009a  72c8              STRB     r0,[r1,#0xb]          ;251
00009c  6821              LDR      r1,[r4,#0]            ;252
00009e  7308              STRB     r0,[r1,#0xc]          ;252
0000a0  6860              LDR      r0,[r4,#4]            ;253
0000a2  1c80              ADDS     r0,r0,#2              ;253
0000a4  6060              STR      r0,[r4,#4]            ;253
0000a6  2000              MOVS     r0,#0                 ;256
0000a8  6821              LDR      r1,[r4,#0]            ;256
0000aa  7348              STRB     r0,[r1,#0xd]          ;256
0000ac  6821              LDR      r1,[r4,#0]            ;257
0000ae  738d              STRB     r5,[r1,#0xe]          ;257
0000b0  6860              LDR      r0,[r4,#4]            ;258
0000b2  1c80              ADDS     r0,r0,#2              ;258
0000b4  6060              STR      r0,[r4,#4]            ;258
0000b6  6821              LDR      r1,[r4,#0]            ;261
0000b8  f101000f          ADD      r0,r1,#0xf            ;261
0000bc  462a              MOV      r2,r5                 ;261
0000be  4641              MOV      r1,r8                 ;261
0000c0  f7fffffe          BL       strncat
0000c4  6860              LDR      r0,[r4,#4]            ;262
0000c6  4428              ADD      r0,r0,r5              ;262
0000c8  6060              STR      r0,[r4,#4]            ;262
0000ca  2100              MOVS     r1,#0                 ;265
0000cc  f105000f          ADD      r0,r5,#0xf            ;265
0000d0  6822              LDR      r2,[r4,#0]            ;265
0000d2  5411              STRB     r1,[r2,r0]            ;265
0000d4  1c40              ADDS     r0,r0,#1              ;266
0000d6  6822              LDR      r2,[r4,#0]            ;266
0000d8  5416              STRB     r6,[r2,r0]            ;266
0000da  6860              LDR      r0,[r4,#4]            ;267
0000dc  1c80              ADDS     r0,r0,#2              ;267
0000de  6060              STR      r0,[r4,#4]            ;267
0000e0  6821              LDR      r1,[r4,#0]            ;270
0000e2  3111              ADDS     r1,r1,#0x11           ;270
0000e4  1948              ADDS     r0,r1,r5              ;270
0000e6  4632              MOV      r2,r6                 ;270
0000e8  4649              MOV      r1,r9                 ;270
0000ea  f7fffffe          BL       strncat
0000ee  6860              LDR      r0,[r4,#4]            ;271
0000f0  4430              ADD      r0,r0,r6              ;271
0000f2  6060              STR      r0,[r4,#4]            ;271
0000f4  2000              MOVS     r0,#0                 ;273
0000f6  e798              B        |L5.42|
;;;276    
                          ENDP

                  |L5.248|
0000f8  45445000          DCB      "EDP",0

                          AREA ||i.EDP_PacketPing||, CODE, READONLY, ALIGN=1

                  EDP_PacketPing PROC
;;;710    //==========================================================
;;;711    uint1 EDP_PacketPing(EDP_PACKET_STRUCTURE *edpPacket)
000000  b510              PUSH     {r4,lr}
;;;712    {
000002  4604              MOV      r4,r0
;;;713    
;;;714    	EDP_NewBuffer(edpPacket, 2);
000004  2102              MOVS     r1,#2
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       EDP_NewBuffer
;;;715    	if(edpPacket->_data == NULL)
00000c  6820              LDR      r0,[r4,#0]
00000e  b908              CBNZ     r0,|L6.20|
;;;716    		return 1;
000010  2001              MOVS     r0,#1
                  |L6.18|
;;;717    	
;;;718    	//Byte0：PINGREQ消息------------------------------------------------------------
;;;719    	edpPacket->_data[edpPacket->_len++] = PINGREQ;
;;;720    	
;;;721    	//Byte1：0----------------------------------------------------------------------
;;;722    	edpPacket->_data[edpPacket->_len++] = 0;
;;;723    	
;;;724    	return 0;
;;;725    
;;;726    }
000012  bd10              POP      {r4,pc}
                  |L6.20|
000014  21c0              MOVS     r1,#0xc0              ;719
000016  6862              LDR      r2,[r4,#4]            ;719
000018  1c50              ADDS     r0,r2,#1              ;719
00001a  6060              STR      r0,[r4,#4]            ;719
00001c  6820              LDR      r0,[r4,#0]            ;719
00001e  5481              STRB     r1,[r0,r2]            ;719
000020  2100              MOVS     r1,#0                 ;722
000022  6862              LDR      r2,[r4,#4]            ;722
000024  1c50              ADDS     r0,r2,#1              ;722
000026  6060              STR      r0,[r4,#4]            ;722
000028  6820              LDR      r0,[r4,#0]            ;722
00002a  5481              STRB     r1,[r0,r2]            ;722
00002c  2000              MOVS     r0,#0                 ;724
00002e  e7f0              B        |L6.18|
;;;727    
                          ENDP


                          AREA ||i.EDP_PacketPushData||, CODE, READONLY, ALIGN=1

                  EDP_PacketPushData PROC
;;;475    //==========================================================
;;;476    uint8 EDP_PacketPushData(const int8 *devid, const int8 *msg, uint32 msg_len, EDP_PACKET_STRUCTURE *edpPacket)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;477    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;478    	
;;;479    	uint32 remain_len = 2 + strlen(devid) + msg_len;
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       strlen
000012  1c80              ADDS     r0,r0,#2
000014  eb000a06          ADD      r10,r0,r6
;;;480    	uint8 devid_len = strlen(devid);
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       strlen
00001e  f00009ff          AND      r9,r0,#0xff
;;;481    	uint16 i = 0;
000022  2500              MOVS     r5,#0
;;;482    	uint16 size = 5 + strlen(devid) + msg_len;
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       strlen
00002a  1d40              ADDS     r0,r0,#5
00002c  4430              ADD      r0,r0,r6
00002e  fa1ffb80          UXTH     r11,r0
;;;483    	
;;;484    	if(devid == NULL || msg == NULL || msg_len == 0)
000032  b11f              CBZ      r7,|L7.60|
000034  f1b80f00          CMP      r8,#0
000038  d000              BEQ      |L7.60|
00003a  b916              CBNZ     r6,|L7.66|
                  |L7.60|
;;;485    		return 1;
00003c  2001              MOVS     r0,#1
                  |L7.62|
;;;486    
;;;487    	EDP_NewBuffer(edpPacket, size);
;;;488    	if(edpPacket->_data == NULL)
;;;489    		return 2;
;;;490    	
;;;491    	//Byte0：pushdata类型-----------------------------------------------------------
;;;492    	edpPacket->_data[edpPacket->_len++] = PUSHDATA;
;;;493    	
;;;494    	//剩余长度----------------------------------------------------------------------
;;;495    	edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
;;;496    	
;;;497    	//DEVID长度---------------------------------------------------------------------
;;;498    	edpPacket->_data[edpPacket->_len++] = MOSQ_MSB(devid_len);
;;;499    	edpPacket->_data[edpPacket->_len++] = MOSQ_LSB(devid_len);
;;;500    	
;;;501    	//写入DEVID---------------------------------------------------------------------
;;;502    	for(; i < devid_len; i++)
;;;503    		edpPacket->_data[edpPacket->_len++] = devid[i];
;;;504    	
;;;505    	//写入数据----------------------------------------------------------------------
;;;506    	for(i = 0; i < msg_len; i++)
;;;507    		edpPacket->_data[edpPacket->_len++] = msg[i];
;;;508    	
;;;509    	return 0;
;;;510    
;;;511    }
00003e  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.66|
000042  4659              MOV      r1,r11                ;487
000044  4620              MOV      r0,r4                 ;487
000046  f7fffffe          BL       EDP_NewBuffer
00004a  6820              LDR      r0,[r4,#0]            ;488
00004c  b908              CBNZ     r0,|L7.82|
00004e  2002              MOVS     r0,#2                 ;489
000050  e7f5              B        |L7.62|
                  |L7.82|
000052  2130              MOVS     r1,#0x30              ;492
000054  6862              LDR      r2,[r4,#4]            ;492
000056  1c50              ADDS     r0,r2,#1              ;492
000058  6060              STR      r0,[r4,#4]            ;492
00005a  6820              LDR      r0,[r4,#0]            ;492
00005c  5481              STRB     r1,[r0,r2]            ;492
00005e  88a1              LDRH     r1,[r4,#4]            ;495
000060  b28a              UXTH     r2,r1                 ;495
000062  4651              MOV      r1,r10                ;495
000064  6820              LDR      r0,[r4,#0]            ;495
000066  f7fffffe          BL       WriteRemainlen
00006a  6861              LDR      r1,[r4,#4]            ;495
00006c  4408              ADD      r0,r0,r1              ;495
00006e  6060              STR      r0,[r4,#4]            ;495
000070  2100              MOVS     r1,#0                 ;498
000072  6862              LDR      r2,[r4,#4]            ;498
000074  1c50              ADDS     r0,r2,#1              ;498
000076  6060              STR      r0,[r4,#4]            ;498
000078  6820              LDR      r0,[r4,#0]            ;498
00007a  5481              STRB     r1,[r0,r2]            ;498
00007c  6862              LDR      r2,[r4,#4]            ;499
00007e  1c50              ADDS     r0,r2,#1              ;499
000080  6060              STR      r0,[r4,#4]            ;499
000082  6820              LDR      r0,[r4,#0]            ;499
000084  f8009002          STRB     r9,[r0,r2]            ;499
000088  e007              B        |L7.154|
                  |L7.138|
00008a  5d79              LDRB     r1,[r7,r5]            ;503
00008c  6862              LDR      r2,[r4,#4]            ;503
00008e  1c50              ADDS     r0,r2,#1              ;503
000090  6060              STR      r0,[r4,#4]            ;503
000092  6820              LDR      r0,[r4,#0]            ;503
000094  5481              STRB     r1,[r0,r2]            ;503
000096  1c68              ADDS     r0,r5,#1              ;502
000098  b285              UXTH     r5,r0                 ;502
                  |L7.154|
00009a  454d              CMP      r5,r9                 ;502
00009c  dbf5              BLT      |L7.138|
00009e  2500              MOVS     r5,#0                 ;506
0000a0  e008              B        |L7.180|
                  |L7.162|
0000a2  f8181005          LDRB     r1,[r8,r5]            ;507
0000a6  6862              LDR      r2,[r4,#4]            ;507
0000a8  1c50              ADDS     r0,r2,#1              ;507
0000aa  6060              STR      r0,[r4,#4]            ;507
0000ac  6820              LDR      r0,[r4,#0]            ;507
0000ae  5481              STRB     r1,[r0,r2]            ;507
0000b0  1c68              ADDS     r0,r5,#1              ;506
0000b2  b285              UXTH     r5,r0                 ;506
                  |L7.180|
0000b4  42b5              CMP      r5,r6                 ;506
0000b6  d3f4              BCC      |L7.162|
0000b8  2000              MOVS     r0,#0                 ;509
0000ba  e7c0              B        |L7.62|
;;;512    
                          ENDP


                          AREA ||i.EDP_PacketSaveData||, CODE, READONLY, ALIGN=1

                  EDP_PacketSaveData PROC
;;;368    //==========================================================
;;;369    uint8 EDP_PacketSaveData(const int8 *devid, int32 send_len, int8 *type_bin_head, SaveDataType type, EDP_PACKET_STRUCTURE *edpPacket)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;370    {
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;371    
;;;372    	int32 remain_len = 0;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;373    	uint8 devid_len = strlen(devid);
000012  4648              MOV      r0,r9
000014  f7fffffe          BL       strlen
000018  f00008ff          AND      r8,r0,#0xff
;;;374    	
;;;375    	if(type == 2 && type_bin_head == NULL)
00001c  2e02              CMP      r6,#2
00001e  d103              BNE      |L8.40|
000020  b917              CBNZ     r7,|L8.40|
;;;376    		return 1;
000022  2001              MOVS     r0,#1
                  |L8.36|
;;;377    	
;;;378    	if(type == 2)
;;;379    		EDP_NewBuffer(edpPacket, strlen(type_bin_head));
;;;380    	else
;;;381    		EDP_NewBuffer(edpPacket, send_len + 24);
;;;382    	if(edpPacket->_data == NULL)
;;;383    		return 2;
;;;384    
;;;385    	//Byte0：消息类型--------------------------------------------------------------
;;;386    	edpPacket->_data[edpPacket->_len++] = SAVEDATA;
;;;387    	
;;;388    	if(devid)
;;;389    	{
;;;390    		if(type == 2)
;;;391    			remain_len = 12 + strlen(type_bin_head) + send_len;
;;;392    		else
;;;393    			remain_len = 8 + send_len + devid_len;
;;;394    		
;;;395    		//剩余消息长度-------------------------------------------------------------
;;;396    		edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
;;;397    		
;;;398    		//标志--bit7:1-有devid，0-无devid		bit6:1-有消息编号，0-无消息编号----
;;;399    		edpPacket->_data[edpPacket->_len++] = 0xC0;
;;;400    		
;;;401    		//DEVID长度---------------------------------------------------------------
;;;402    		edpPacket->_data[edpPacket->_len++] = 0;
;;;403    		edpPacket->_data[edpPacket->_len++] = devid_len;
;;;404    		
;;;405    		//DEVID------------------------------------------------------------------
;;;406    		strncat((int8 *)edpPacket->_data + edpPacket->_len, devid, devid_len);
;;;407    		edpPacket->_len += devid_len;
;;;408    		
;;;409    		//消息编号----------------------------------------------------------------
;;;410    		edpPacket->_data[edpPacket->_len++] = MSG_ID_HIGH;
;;;411    		edpPacket->_data[edpPacket->_len++] = MSG_ID_LOW;
;;;412    	}
;;;413    	else
;;;414    	{
;;;415    		if(type == 2)
;;;416    			remain_len = 10 + strlen(type_bin_head) + send_len;
;;;417    		else
;;;418    			remain_len = 6 + send_len;
;;;419    		 
;;;420    		//剩余消息长度------------------------------------------------------------
;;;421    		edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
;;;422    		
;;;423    		//标志--bit7:1-有devid，0-无devid		bit6:1-有消息编号，0-无消息编号----
;;;424    		edpPacket->_data[edpPacket->_len++] = 0x40;
;;;425    		
;;;426    		//消息编号----------------------------------------------------------------
;;;427    		edpPacket->_data[edpPacket->_len++] = MSG_ID_HIGH;
;;;428    		edpPacket->_data[edpPacket->_len++] = MSG_ID_LOW;
;;;429    	}
;;;430    	
;;;431    	edpPacket->_data[edpPacket->_len++] = type;
;;;432    	
;;;433    	if(type == 2)
;;;434    	{
;;;435    		uint8 type_bin_head_len = strlen(type_bin_head);
;;;436    		uint8 i = 0;
;;;437    		
;;;438    		//消息头长度---------------------------------------------------------------
;;;439    		edpPacket->_data[edpPacket->_len++] = MOSQ_MSB(type_bin_head_len);
;;;440    		edpPacket->_data[edpPacket->_len++] = MOSQ_LSB(type_bin_head_len);
;;;441    		
;;;442    		//消息头-------------------------------------------------------------------
;;;443    		for(; i < type_bin_head_len; i++)
;;;444    			edpPacket->_data[edpPacket->_len++] = type_bin_head[i];
;;;445    		
;;;446    		//图片长度-----------------------------------------------------------------
;;;447    		edpPacket->_data[edpPacket->_len++] = (uint8)(send_len >> 24);
;;;448    		edpPacket->_data[edpPacket->_len++] = (uint8)(send_len >> 16);
;;;449    		edpPacket->_data[edpPacket->_len++] = (uint8)(send_len >> 8);
;;;450    		edpPacket->_data[edpPacket->_len++] = (uint8)send_len;
;;;451    	}
;;;452    	else
;;;453    	{
;;;454    		//json长度-----------------------------------------------------------------
;;;455    		edpPacket->_data[edpPacket->_len++] = MOSQ_MSB(send_len);
;;;456    		edpPacket->_data[edpPacket->_len++] = MOSQ_LSB(send_len);
;;;457    	}
;;;458    	
;;;459    	return 0;
;;;460    
;;;461    }
000024  e8bd8ff8          POP      {r3-r11,pc}
                  |L8.40|
000028  2e02              CMP      r6,#2                 ;378
00002a  d108              BNE      |L8.62|
00002c  4638              MOV      r0,r7                 ;379
00002e  f7fffffe          BL       strlen
000032  4682              MOV      r10,r0                ;379
000034  4651              MOV      r1,r10                ;379
000036  4620              MOV      r0,r4                 ;379
000038  f7fffffe          BL       EDP_NewBuffer
00003c  e004              B        |L8.72|
                  |L8.62|
00003e  f1050118          ADD      r1,r5,#0x18           ;381
000042  4620              MOV      r0,r4                 ;381
000044  f7fffffe          BL       EDP_NewBuffer
                  |L8.72|
000048  6820              LDR      r0,[r4,#0]            ;382
00004a  b908              CBNZ     r0,|L8.80|
00004c  2002              MOVS     r0,#2                 ;383
00004e  e7e9              B        |L8.36|
                  |L8.80|
000050  2180              MOVS     r1,#0x80              ;386
000052  6862              LDR      r2,[r4,#4]            ;386
000054  1c50              ADDS     r0,r2,#1              ;386
000056  6060              STR      r0,[r4,#4]            ;386
000058  6820              LDR      r0,[r4,#0]            ;386
00005a  5481              STRB     r1,[r0,r2]            ;386
00005c  f1b90f00          CMP      r9,#0                 ;388
000060  d03e              BEQ      |L8.224|
000062  2e02              CMP      r6,#2                 ;390
000064  d106              BNE      |L8.116|
000066  4638              MOV      r0,r7                 ;391
000068  f7fffffe          BL       strlen
00006c  300c              ADDS     r0,r0,#0xc            ;391
00006e  4428              ADD      r0,r0,r5              ;391
000070  9000              STR      r0,[sp,#0]            ;391
000072  e003              B        |L8.124|
                  |L8.116|
000074  f1050008          ADD      r0,r5,#8              ;393
000078  4440              ADD      r0,r0,r8              ;393
00007a  9000              STR      r0,[sp,#0]            ;393
                  |L8.124|
00007c  88a1              LDRH     r1,[r4,#4]            ;396
00007e  b28a              UXTH     r2,r1                 ;396
000080  6820              LDR      r0,[r4,#0]            ;396
000082  9900              LDR      r1,[sp,#0]            ;396
000084  f7fffffe          BL       WriteRemainlen
000088  6861              LDR      r1,[r4,#4]            ;396
00008a  4408              ADD      r0,r0,r1              ;396
00008c  6060              STR      r0,[r4,#4]            ;396
00008e  21c0              MOVS     r1,#0xc0              ;399
000090  6862              LDR      r2,[r4,#4]            ;399
000092  1c50              ADDS     r0,r2,#1              ;399
000094  6060              STR      r0,[r4,#4]            ;399
000096  6820              LDR      r0,[r4,#0]            ;399
000098  5481              STRB     r1,[r0,r2]            ;399
00009a  2100              MOVS     r1,#0                 ;402
00009c  6862              LDR      r2,[r4,#4]            ;402
00009e  1c50              ADDS     r0,r2,#1              ;402
0000a0  6060              STR      r0,[r4,#4]            ;402
0000a2  6820              LDR      r0,[r4,#0]            ;402
0000a4  5481              STRB     r1,[r0,r2]            ;402
0000a6  6861              LDR      r1,[r4,#4]            ;403
0000a8  1c48              ADDS     r0,r1,#1              ;403
0000aa  6060              STR      r0,[r4,#4]            ;403
0000ac  6820              LDR      r0,[r4,#0]            ;403
0000ae  f8008001          STRB     r8,[r0,r1]            ;403
0000b2  e9d41200          LDRD     r1,r2,[r4,#0]         ;406
0000b6  1888              ADDS     r0,r1,r2              ;406
0000b8  4642              MOV      r2,r8                 ;406
0000ba  4649              MOV      r1,r9                 ;406
0000bc  f7fffffe          BL       strncat
0000c0  6860              LDR      r0,[r4,#4]            ;407
0000c2  4440              ADD      r0,r0,r8              ;407
0000c4  6060              STR      r0,[r4,#4]            ;407
0000c6  2155              MOVS     r1,#0x55              ;410
0000c8  6862              LDR      r2,[r4,#4]            ;410
0000ca  1c50              ADDS     r0,r2,#1              ;410
0000cc  6060              STR      r0,[r4,#4]            ;410
0000ce  6820              LDR      r0,[r4,#0]            ;410
0000d0  5481              STRB     r1,[r0,r2]            ;410
0000d2  21aa              MOVS     r1,#0xaa              ;411
0000d4  6862              LDR      r2,[r4,#4]            ;411
0000d6  1c50              ADDS     r0,r2,#1              ;411
0000d8  6060              STR      r0,[r4,#4]            ;411
0000da  6820              LDR      r0,[r4,#0]            ;411
0000dc  5481              STRB     r1,[r0,r2]            ;411
0000de  e025              B        |L8.300|
                  |L8.224|
0000e0  2e02              CMP      r6,#2                 ;415
0000e2  d106              BNE      |L8.242|
0000e4  4638              MOV      r0,r7                 ;416
0000e6  f7fffffe          BL       strlen
0000ea  300a              ADDS     r0,r0,#0xa            ;416
0000ec  4428              ADD      r0,r0,r5              ;416
0000ee  9000              STR      r0,[sp,#0]            ;416
0000f0  e001              B        |L8.246|
                  |L8.242|
0000f2  1da8              ADDS     r0,r5,#6              ;418
0000f4  9000              STR      r0,[sp,#0]            ;418
                  |L8.246|
0000f6  88a1              LDRH     r1,[r4,#4]            ;421
0000f8  b28a              UXTH     r2,r1                 ;421
0000fa  6820              LDR      r0,[r4,#0]            ;421
0000fc  9900              LDR      r1,[sp,#0]            ;421
0000fe  f7fffffe          BL       WriteRemainlen
000102  6861              LDR      r1,[r4,#4]            ;421
000104  4408              ADD      r0,r0,r1              ;421
000106  6060              STR      r0,[r4,#4]            ;421
000108  2140              MOVS     r1,#0x40              ;424
00010a  6862              LDR      r2,[r4,#4]            ;424
00010c  1c50              ADDS     r0,r2,#1              ;424
00010e  6060              STR      r0,[r4,#4]            ;424
000110  6820              LDR      r0,[r4,#0]            ;424
000112  5481              STRB     r1,[r0,r2]            ;424
000114  2155              MOVS     r1,#0x55              ;427
000116  6862              LDR      r2,[r4,#4]            ;427
000118  1c50              ADDS     r0,r2,#1              ;427
00011a  6060              STR      r0,[r4,#4]            ;427
00011c  6820              LDR      r0,[r4,#0]            ;427
00011e  5481              STRB     r1,[r0,r2]            ;427
000120  21aa              MOVS     r1,#0xaa              ;428
000122  6862              LDR      r2,[r4,#4]            ;428
000124  1c50              ADDS     r0,r2,#1              ;428
000126  6060              STR      r0,[r4,#4]            ;428
000128  6820              LDR      r0,[r4,#0]            ;428
00012a  5481              STRB     r1,[r0,r2]            ;428
                  |L8.300|
00012c  6861              LDR      r1,[r4,#4]            ;431
00012e  1c48              ADDS     r0,r1,#1              ;431
000130  6060              STR      r0,[r4,#4]            ;431
000132  6820              LDR      r0,[r4,#0]            ;431
000134  5446              STRB     r6,[r0,r1]            ;431
000136  2e02              CMP      r6,#2                 ;433
000138  d13a              BNE      |L8.432|
00013a  4638              MOV      r0,r7                 ;435
00013c  f7fffffe          BL       strlen
000140  f0000aff          AND      r10,r0,#0xff          ;435
000144  f04f0b00          MOV      r11,#0                ;436
000148  2100              MOVS     r1,#0                 ;439
00014a  6862              LDR      r2,[r4,#4]            ;439
00014c  1c50              ADDS     r0,r2,#1              ;439
00014e  6060              STR      r0,[r4,#4]            ;439
000150  6820              LDR      r0,[r4,#0]            ;439
000152  5481              STRB     r1,[r0,r2]            ;439
000154  6861              LDR      r1,[r4,#4]            ;440
000156  1c48              ADDS     r0,r1,#1              ;440
000158  6060              STR      r0,[r4,#4]            ;440
00015a  6820              LDR      r0,[r4,#0]            ;440
00015c  f800a001          STRB     r10,[r0,r1]           ;440
000160  e00a              B        |L8.376|
                  |L8.354|
000162  f817100b          LDRB     r1,[r7,r11]           ;444
000166  6862              LDR      r2,[r4,#4]            ;444
000168  1c50              ADDS     r0,r2,#1              ;444
00016a  6060              STR      r0,[r4,#4]            ;444
00016c  6820              LDR      r0,[r4,#0]            ;444
00016e  5481              STRB     r1,[r0,r2]            ;444
000170  f10b0001          ADD      r0,r11,#1             ;443
000174  f0000bff          AND      r11,r0,#0xff          ;443
                  |L8.376|
000178  45d3              CMP      r11,r10               ;443
00017a  dbf2              BLT      |L8.354|
00017c  0e29              LSRS     r1,r5,#24             ;447
00017e  6862              LDR      r2,[r4,#4]            ;447
000180  1c50              ADDS     r0,r2,#1              ;447
000182  6060              STR      r0,[r4,#4]            ;447
000184  6820              LDR      r0,[r4,#0]            ;447
000186  5481              STRB     r1,[r0,r2]            ;447
000188  f3c54107          UBFX     r1,r5,#16,#8          ;448
00018c  6862              LDR      r2,[r4,#4]            ;448
00018e  1c50              ADDS     r0,r2,#1              ;448
000190  6060              STR      r0,[r4,#4]            ;448
000192  6820              LDR      r0,[r4,#0]            ;448
000194  5481              STRB     r1,[r0,r2]            ;448
000196  f3c52107          UBFX     r1,r5,#8,#8           ;449
00019a  6862              LDR      r2,[r4,#4]            ;449
00019c  1c50              ADDS     r0,r2,#1              ;449
00019e  6060              STR      r0,[r4,#4]            ;449
0001a0  6820              LDR      r0,[r4,#0]            ;449
0001a2  5481              STRB     r1,[r0,r2]            ;449
0001a4  6862              LDR      r2,[r4,#4]            ;450
0001a6  1c50              ADDS     r0,r2,#1              ;450
0001a8  6060              STR      r0,[r4,#4]            ;450
0001aa  6820              LDR      r0,[r4,#0]            ;450
0001ac  5485              STRB     r5,[r0,r2]            ;450
0001ae  e00b              B        |L8.456|
                  |L8.432|
0001b0  f3c52107          UBFX     r1,r5,#8,#8           ;455
0001b4  6862              LDR      r2,[r4,#4]            ;455
0001b6  1c50              ADDS     r0,r2,#1              ;455
0001b8  6060              STR      r0,[r4,#4]            ;455
0001ba  6820              LDR      r0,[r4,#0]            ;455
0001bc  5481              STRB     r1,[r0,r2]            ;455
0001be  6862              LDR      r2,[r4,#4]            ;456
0001c0  1c50              ADDS     r0,r2,#1              ;456
0001c2  6060              STR      r0,[r4,#4]            ;456
0001c4  6820              LDR      r0,[r4,#0]            ;456
0001c6  5485              STRB     r5,[r0,r2]            ;456
                  |L8.456|
0001c8  2000              MOVS     r0,#0                 ;459
0001ca  e72b              B        |L8.36|
;;;462    //==========================================================
                          ENDP


                          AREA ||i.EDP_UnPacketCmd||, CODE, READONLY, ALIGN=1

                  EDP_UnPacketCmd PROC
;;;592    //==========================================================
;;;593    uint8 EDP_UnPacketCmd(uint8 *rev_data, int8 **cmdid, uint16 *cmdid_len, int8 **req, uint32 *req_len)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;594    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;595    
;;;596    	uint32 remain_len = 0;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;597    	int32 read_pos = 0;
000014  2400              MOVS     r4,#0
;;;598    	
;;;599    	//Byte0：PushData消息------------------------------------------------------------
;;;600    	if(rev_data[read_pos++] != CMDREQ)
000016  4620              MOV      r0,r4
000018  1c64              ADDS     r4,r4,#1
00001a  5c28              LDRB     r0,[r5,r0]
00001c  28a0              CMP      r0,#0xa0
00001e  d002              BEQ      |L9.38|
;;;601    		return 1;
000020  2001              MOVS     r0,#1
                  |L9.34|
;;;602    	
;;;603    	//读取剩余长度--------------------------------------------------------------------
;;;604    	read_pos = ReadRemainlen((int8 *)rev_data, &remain_len, read_pos);
;;;605    	if(read_pos == -1)
;;;606    		return 2;
;;;607    	
;;;608    	//读取cmdid长度-------------------------------------------------------------------
;;;609    	*cmdid_len = (uint16)rev_data[read_pos] << 8 | rev_data[read_pos + 1];
;;;610    	read_pos += 2;
;;;611    	
;;;612    	//分配内存------------------------------------------------------------------------
;;;613    	*cmdid = (int8 *)EDP_MallocBuffer(*cmdid_len + 1);
;;;614    	if(*cmdid == NULL)
;;;615    		return 3;
;;;616    	
;;;617    	//读取cmdid-----------------------------------------------------------------------
;;;618    	memset(*cmdid, 0, *cmdid_len + 1);
;;;619    	memcpy(*cmdid, (const int8 *)rev_data + read_pos, *cmdid_len);
;;;620    	read_pos += *cmdid_len;
;;;621    	
;;;622    	//读取req长度---------------------------------------------------------------------
;;;623    	*req_len = (uint32)rev_data[read_pos] << 24 | (uint32)rev_data[read_pos + 1] << 16
;;;624    					 | (uint32)rev_data[read_pos + 2] << 8 | (uint32)rev_data[read_pos + 3];
;;;625    	read_pos += 4;
;;;626    	
;;;627    	//分配内存------------------------------------------------------------------------
;;;628    	*req = (int8 *)EDP_MallocBuffer(*req_len + 1);
;;;629    	if(*req == NULL)
;;;630    	{
;;;631    		EDP_FreeBuffer(*cmdid);
;;;632    		return 4;
;;;633    	}
;;;634    	
;;;635    	//读取req-------------------------------------------------------------------------
;;;636    	memset(*req, 0, *req_len + 1);
;;;637    	memcpy(*req, (const int8 *)rev_data + read_pos, *req_len);
;;;638    	read_pos += *req_len;
;;;639    	
;;;640    	return 0;
;;;641    
;;;642    }
000022  e8bd83f8          POP      {r3-r9,pc}
                  |L9.38|
000026  b2a2              UXTH     r2,r4                 ;604
000028  4669              MOV      r1,sp                 ;604
00002a  4628              MOV      r0,r5                 ;604
00002c  f7fffffe          BL       ReadRemainlen
000030  4604              MOV      r4,r0                 ;604
000032  1c60              ADDS     r0,r4,#1              ;605
000034  b908              CBNZ     r0,|L9.58|
000036  2002              MOVS     r0,#2                 ;606
000038  e7f3              B        |L9.34|
                  |L9.58|
00003a  1c60              ADDS     r0,r4,#1              ;609
00003c  5c28              LDRB     r0,[r5,r0]            ;609
00003e  5d29              LDRB     r1,[r5,r4]            ;609
000040  ea402001          ORR      r0,r0,r1,LSL #8       ;609
000044  8038              STRH     r0,[r7,#0]            ;609
000046  1ca4              ADDS     r4,r4,#2              ;610
000048  8839              LDRH     r1,[r7,#0]            ;613
00004a  1c48              ADDS     r0,r1,#1              ;613
00004c  f7fffffe          BL       malloc
000050  6030              STR      r0,[r6,#0]            ;613
000052  6830              LDR      r0,[r6,#0]            ;614
000054  b908              CBNZ     r0,|L9.90|
000056  2003              MOVS     r0,#3                 ;615
000058  e7e3              B        |L9.34|
                  |L9.90|
00005a  883a              LDRH     r2,[r7,#0]            ;618
00005c  1c51              ADDS     r1,r2,#1              ;618
00005e  6830              LDR      r0,[r6,#0]            ;618
000060  f7fffffe          BL       __aeabi_memclr
000064  883a              LDRH     r2,[r7,#0]            ;619
000066  1929              ADDS     r1,r5,r4              ;619
000068  6830              LDR      r0,[r6,#0]            ;619
00006a  f7fffffe          BL       __aeabi_memcpy
00006e  8838              LDRH     r0,[r7,#0]            ;620
000070  4404              ADD      r4,r4,r0              ;620
000072  5d28              LDRB     r0,[r5,r4]            ;623
000074  0601              LSLS     r1,r0,#24             ;623
000076  1c60              ADDS     r0,r4,#1              ;623
000078  5c28              LDRB     r0,[r5,r0]            ;623
00007a  ea414100          ORR      r1,r1,r0,LSL #16      ;623
00007e  1ca0              ADDS     r0,r4,#2              ;623
000080  5c28              LDRB     r0,[r5,r0]            ;623
000082  ea412000          ORR      r0,r1,r0,LSL #8       ;623
000086  1ce1              ADDS     r1,r4,#3              ;623
000088  5c69              LDRB     r1,[r5,r1]            ;623
00008a  4308              ORRS     r0,r0,r1              ;623
00008c  f8c90000          STR      r0,[r9,#0]            ;623
000090  1d24              ADDS     r4,r4,#4              ;625
000092  f8d91000          LDR      r1,[r9,#0]            ;628
000096  1c48              ADDS     r0,r1,#1              ;628
000098  f7fffffe          BL       malloc
00009c  f8c80000          STR      r0,[r8,#0]            ;628
0000a0  f8d80000          LDR      r0,[r8,#0]            ;629
0000a4  b920              CBNZ     r0,|L9.176|
0000a6  6830              LDR      r0,[r6,#0]            ;631
0000a8  f7fffffe          BL       free
0000ac  2004              MOVS     r0,#4                 ;632
0000ae  e7b8              B        |L9.34|
                  |L9.176|
0000b0  f8d92000          LDR      r2,[r9,#0]            ;636
0000b4  1c51              ADDS     r1,r2,#1              ;636
0000b6  f8d80000          LDR      r0,[r8,#0]            ;636
0000ba  f7fffffe          BL       __aeabi_memclr
0000be  1929              ADDS     r1,r5,r4              ;637
0000c0  f8d92000          LDR      r2,[r9,#0]            ;637
0000c4  f8d80000          LDR      r0,[r8,#0]            ;637
0000c8  f7fffffe          BL       __aeabi_memcpy
0000cc  f8d90000          LDR      r0,[r9,#0]            ;638
0000d0  4404              ADD      r4,r4,r0              ;638
0000d2  2000              MOVS     r0,#0                 ;640
0000d4  e7a5              B        |L9.34|
;;;643    
                          ENDP


                          AREA ||i.EDP_UnPacketConnectRsp||, CODE, READONLY, ALIGN=1

                  EDP_UnPacketConnectRsp PROC
;;;287    //==========================================================
;;;288    uint8 EDP_UnPacketConnectRsp(uint8 *rev_data)
000000  4601              MOV      r1,r0
;;;289    {
;;;290    
;;;291    	//0		连接成功
;;;292    	//1		验证失败：协议错误
;;;293    	//2		验证失败：设备ID鉴权失败
;;;294    	//3		验证失败：服务器失败
;;;295    	//4		验证失败：用户ID鉴权失败
;;;296    	//5		验证失败：未授权
;;;297    	//6		验证失败：授权码无效
;;;298    	//7		验证失败：激活码未分配
;;;299    	//8		验证失败：该设备已被激活
;;;300    	//9		验证失败：重复发送连接请求包
;;;301    	return rev_data[3];
000002  78c8              LDRB     r0,[r1,#3]
;;;302    
;;;303    }
000004  4770              BX       lr
;;;304    
                          ENDP


                          AREA ||i.EDP_UnPacketPushData||, CODE, READONLY, ALIGN=1

                  EDP_UnPacketPushData PROC
;;;526    //==========================================================
;;;527    uint8 EDP_UnPacketPushData(uint8 *rev_data, int8 **src_devid, int8 **req, uint32 *req_len)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;528    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4699              MOV      r9,r3
;;;529    
;;;530    	int32 read_pos = 0;
00000c  2400              MOVS     r4,#0
;;;531    	uint32 remain_len = 0;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;532    	uint16 devid_len = 0;
000012  4680              MOV      r8,r0
;;;533    	
;;;534    	//Byte0：PushData消息------------------------------------------------------------
;;;535    	if(rev_data[read_pos++] != PUSHDATA)
000014  4620              MOV      r0,r4
000016  1c64              ADDS     r4,r4,#1
000018  5c28              LDRB     r0,[r5,r0]
00001a  2830              CMP      r0,#0x30
00001c  d002              BEQ      |L11.36|
;;;536    		return 1;
00001e  2001              MOVS     r0,#1
                  |L11.32|
;;;537    
;;;538    	//读取剩余长度--------------------------------------------------------------------
;;;539    	read_pos = ReadRemainlen((int8 *)rev_data, &remain_len, read_pos);
;;;540    	if(read_pos == -1)
;;;541    		return 2;
;;;542    	
;;;543    	//读取源devid长度-----------------------------------------------------------------
;;;544    	devid_len = (uint16)rev_data[read_pos] << 8 | rev_data[read_pos + 1];
;;;545    	read_pos += 2;
;;;546    
;;;547    	//分配内存------------------------------------------------------------------------
;;;548    	*src_devid = (int8 *)EDP_MallocBuffer(devid_len + 1);
;;;549    	if(*src_devid == NULL)
;;;550    		return 3;
;;;551    
;;;552    	//读取源devid---------------------------------------------------------------------
;;;553    	memset(*src_devid, 0, devid_len + 1);
;;;554    	memcpy(*src_devid, (const int8 *)rev_data + read_pos, devid_len);
;;;555    	read_pos += devid_len;
;;;556    
;;;557    	remain_len -= 2 + devid_len;
;;;558    
;;;559    	//分配内存------------------------------------------------------------------------
;;;560    	*req = (int8 *)EDP_MallocBuffer(remain_len + 1);
;;;561    	if(*req == NULL)
;;;562    	{
;;;563    		EDP_FreeBuffer(*src_devid);
;;;564    		return 4;
;;;565    	}
;;;566    
;;;567    	//读取命令------------------------------------------------------------------------
;;;568    	memset(*req, 0, remain_len + 1);
;;;569    	memcpy(*req, (const int8 *)rev_data + read_pos, remain_len);
;;;570    	read_pos += remain_len;
;;;571    
;;;572    	*req_len = remain_len;
;;;573    	
;;;574    	return 0;
;;;575    
;;;576    }
000020  e8bd83f8          POP      {r3-r9,pc}
                  |L11.36|
000024  b2a2              UXTH     r2,r4                 ;539
000026  4669              MOV      r1,sp                 ;539
000028  4628              MOV      r0,r5                 ;539
00002a  f7fffffe          BL       ReadRemainlen
00002e  4604              MOV      r4,r0                 ;539
000030  1c60              ADDS     r0,r4,#1              ;540
000032  b908              CBNZ     r0,|L11.56|
000034  2002              MOVS     r0,#2                 ;541
000036  e7f3              B        |L11.32|
                  |L11.56|
000038  1c60              ADDS     r0,r4,#1              ;544
00003a  5c28              LDRB     r0,[r5,r0]            ;544
00003c  5d29              LDRB     r1,[r5,r4]            ;544
00003e  ea402801          ORR      r8,r0,r1,LSL #8       ;544
000042  1ca4              ADDS     r4,r4,#2              ;545
000044  f1080001          ADD      r0,r8,#1              ;548
000048  f7fffffe          BL       malloc
00004c  6030              STR      r0,[r6,#0]            ;548
00004e  6830              LDR      r0,[r6,#0]            ;549
000050  b908              CBNZ     r0,|L11.86|
000052  2003              MOVS     r0,#3                 ;550
000054  e7e4              B        |L11.32|
                  |L11.86|
000056  f1080101          ADD      r1,r8,#1              ;553
00005a  6830              LDR      r0,[r6,#0]            ;553
00005c  f7fffffe          BL       __aeabi_memclr
000060  1929              ADDS     r1,r5,r4              ;554
000062  4642              MOV      r2,r8                 ;554
000064  6830              LDR      r0,[r6,#0]            ;554
000066  f7fffffe          BL       __aeabi_memcpy
00006a  4444              ADD      r4,r4,r8              ;555
00006c  f1080002          ADD      r0,r8,#2              ;557
000070  9900              LDR      r1,[sp,#0]            ;557
000072  1a08              SUBS     r0,r1,r0              ;557
000074  9000              STR      r0,[sp,#0]            ;557
000076  9800              LDR      r0,[sp,#0]            ;560
000078  1c40              ADDS     r0,r0,#1              ;560
00007a  f7fffffe          BL       malloc
00007e  6038              STR      r0,[r7,#0]            ;560
000080  6838              LDR      r0,[r7,#0]            ;561
000082  b920              CBNZ     r0,|L11.142|
000084  6830              LDR      r0,[r6,#0]            ;563
000086  f7fffffe          BL       free
00008a  2004              MOVS     r0,#4                 ;564
00008c  e7c8              B        |L11.32|
                  |L11.142|
00008e  6838              LDR      r0,[r7,#0]            ;568
000090  9900              LDR      r1,[sp,#0]            ;568
000092  1c49              ADDS     r1,r1,#1              ;568
000094  f7fffffe          BL       __aeabi_memclr
000098  1929              ADDS     r1,r5,r4              ;569
00009a  6838              LDR      r0,[r7,#0]            ;569
00009c  9a00              LDR      r2,[sp,#0]            ;569
00009e  f7fffffe          BL       __aeabi_memcpy
0000a2  9800              LDR      r0,[sp,#0]            ;570
0000a4  4404              ADD      r4,r4,r0              ;570
0000a6  9800              LDR      r0,[sp,#0]            ;572
0000a8  f8c90000          STR      r0,[r9,#0]            ;572
0000ac  2000              MOVS     r0,#0                 ;574
0000ae  e7b7              B        |L11.32|
;;;577    
                          ENDP


                          AREA ||i.EDP_UnPacketRecv||, CODE, READONLY, ALIGN=1

                  EDP_UnPacketRecv PROC
;;;110    //==========================================================
;;;111    uint8 EDP_UnPacketRecv(uint8 *dataPtr)
000000  4601              MOV      r1,r0
;;;112    {
;;;113    	
;;;114    	return dataPtr[0];
000002  7808              LDRB     r0,[r1,#0]
;;;115    
;;;116    }
000004  4770              BX       lr
;;;117    
                          ENDP


                          AREA ||i.ReadRemainlen||, CODE, READONLY, ALIGN=1

                  ReadRemainlen PROC
;;;326    
;;;327    int32 ReadRemainlen(int8 *buf, uint32 *len_val, uint16 read_pos)
000000  b5f0              PUSH     {r4-r7,lr}
;;;328    {
000002  4603              MOV      r3,r0
;;;329    	
;;;330        uint32 multiplier = 1;
000004  2401              MOVS     r4,#1
;;;331        uint32 len_len = 0;
000006  2600              MOVS     r6,#0
;;;332        uint8 onebyte = 0;
000008  2500              MOVS     r5,#0
;;;333    	
;;;334        *len_val = 0;
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
;;;335    	
;;;336        do
00000e  bf00              NOP      
                  |L13.16|
;;;337    	{
;;;338            onebyte = buf[read_pos++];
000010  4610              MOV      r0,r2
000012  1c57              ADDS     r7,r2,#1
000014  b2ba              UXTH     r2,r7
000016  5c1d              LDRB     r5,[r3,r0]
;;;339    
;;;340            *len_val += (onebyte & 0x7f) * multiplier;
000018  f005077f          AND      r7,r5,#0x7f
00001c  6808              LDR      r0,[r1,#0]
00001e  fb070004          MLA      r0,r7,r4,r0
000022  6008              STR      r0,[r1,#0]
;;;341            multiplier <<= 7;
000024  01e4              LSLS     r4,r4,#7
;;;342    
;;;343            len_len++;
000026  1c76              ADDS     r6,r6,#1
;;;344            if (len_len > 4)
000028  2e04              CMP      r6,#4
00002a  d902              BLS      |L13.50|
;;;345    		{
;;;346                return -1;/*len of len more than 4;*/
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L13.48|
;;;347            }
;;;348        } while((onebyte & 0x80) != 0);
;;;349    	
;;;350        return read_pos;
;;;351    }
000030  bdf0              POP      {r4-r7,pc}
                  |L13.50|
000032  f0050080          AND      r0,r5,#0x80           ;348
000036  2800              CMP      r0,#0                 ;348
000038  d1ea              BNE      |L13.16|
00003a  4610              MOV      r0,r2                 ;350
00003c  e7f8              B        |L13.48|
;;;352    
                          ENDP


                          AREA ||i.WriteRemainlen||, CODE, READONLY, ALIGN=1

                  WriteRemainlen PROC
;;;304    
;;;305    int32 WriteRemainlen(uint8 *buf, uint32 len_val, uint16 write_pos)
000000  b570              PUSH     {r4-r6,lr}
;;;306    {
000002  4603              MOV      r3,r0
;;;307    	
;;;308    	int32 remaining_count = 0;
000004  2400              MOVS     r4,#0
;;;309    	uint8 byte = 0;
000006  2500              MOVS     r5,#0
;;;310    
;;;311    	do
000008  bf00              NOP      
                  |L14.10|
;;;312    	{
;;;313    		byte = len_val % 128;
00000a  f001057f          AND      r5,r1,#0x7f
;;;314    		len_val = len_val >> 7;
00000e  09c9              LSRS     r1,r1,#7
;;;315    		/* If there are more digits to encode, set the top bit of this digit */
;;;316    		if (len_val > 0)
000010  b109              CBZ      r1,|L14.22|
;;;317    		{
;;;318    			byte = byte | 0x80;
000012  f0450580          ORR      r5,r5,#0x80
                  |L14.22|
;;;319    		}
;;;320    		buf[write_pos++] = byte;
000016  4610              MOV      r0,r2
000018  1c56              ADDS     r6,r2,#1
00001a  b2b2              UXTH     r2,r6
00001c  541d              STRB     r5,[r3,r0]
;;;321    		remaining_count++;
00001e  1c64              ADDS     r4,r4,#1
;;;322    	} while(len_val > 0 && remaining_count < 5);
000020  b109              CBZ      r1,|L14.38|
000022  2c05              CMP      r4,#5
000024  dbf1              BLT      |L14.10|
                  |L14.38|
;;;323    
;;;324    	return --write_pos;
000026  1e50              SUBS     r0,r2,#1
000028  b280              UXTH     r0,r0
00002a  4602              MOV      r2,r0
;;;325    }
00002c  bd70              POP      {r4-r6,pc}
;;;326    
                          ENDP


                          AREA ||i.hexdump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  hexdump PROC
;;;727    
;;;728    void hexdump(const unsigned char *buf, uint32 num)
000000  b570              PUSH     {r4-r6,lr}
;;;729    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;730        uint32 i = 0;
000006  2400              MOVS     r4,#0
;;;731        for (; i < num; i++)
000008  e00b              B        |L15.34|
                  |L15.10|
;;;732        {
;;;733            printf("%02X ", buf[i]);
00000a  5d29              LDRB     r1,[r5,r4]
00000c  a008              ADR      r0,|L15.48|
00000e  f7fffffe          BL       __2printf
;;;734            if ((i + 1) % 8 == 0)
000012  1c60              ADDS     r0,r4,#1
000014  f0000007          AND      r0,r0,#7
000018  b910              CBNZ     r0,|L15.32|
;;;735                printf("\r\n");
00001a  a007              ADR      r0,|L15.56|
00001c  f7fffffe          BL       __2printf
                  |L15.32|
000020  1c64              ADDS     r4,r4,#1              ;731
                  |L15.34|
000022  42b4              CMP      r4,r6                 ;731
000024  d3f1              BCC      |L15.10|
;;;736        }
;;;737        printf("\r\n");
000026  a004              ADR      r0,|L15.56|
000028  f7fffffe          BL       __2printf
;;;738    }
00002c  bd70              POP      {r4-r6,pc}
;;;739    
                          ENDP

00002e  0000              DCW      0x0000
                  |L15.48|
000030  25303258          DCB      "%02X ",0
000034  2000    
000036  00                DCB      0
000037  00                DCB      0
                  |L15.56|
000038  0d0a00            DCB      "\r\n",0
00003b  00                DCB      0
