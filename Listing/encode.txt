; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\encode.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\encode.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\encode.crf ..\..\User\JPEGENCODE\encode.c]
                          THUMB

                          AREA ||i.JPEG_encode||, CODE, READONLY, ALIGN=2

                  JPEG_encode PROC
;;;22     extern u32 lcdid;
;;;23     _Bool JPEG_encode(char *filename)//编码主函数
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;24     {
000004  4680              MOV      r8,r0
;;;25     
;;;26     	u8 res;
;;;27     	u16 count,i,color;
;;;28     	jpeg_compress_info* cinfo;
;;;29     	JSAMPLE *inbuf_buf;
;;;30     
;;;31     	
;;;32     	
;;;33     //	#if JPG_USE_MALLOC == 1	//使用malloc	
;;;34     	cinfo=(jpeg_compress_info*)malloc(sizeof(jpeg_compress_info));	
000006  f44f7084          MOV      r0,#0x108
00000a  f7fffffe          BL       malloc
00000e  4604              MOV      r4,r0
;;;35     	if(cinfo==NULL)
000010  b914              CBNZ     r4,|L1.24|
;;;36     	{
;;;37     		printf("malloc cinfo failed");
000012  a071              ADR      r0,|L1.472|
000014  f7fffffe          BL       __2printf
                  |L1.24|
;;;38     	}
;;;39     		inbuf_buf=(u8*)malloc(camera_WIDTH*48*sizeof(u8));		//开辟readlen字节的内存区域
000018  f44f40b4          MOV      r0,#0x5a00
00001c  f7fffffe          BL       malloc
000020  4605              MOV      r5,r0
;;;40     		if(inbuf_buf==NULL)
000022  b915              CBNZ     r5,|L1.42|
;;;41     		{
;;;42     			printf("malloc buf faild");
000024  a071              ADR      r0,|L1.492|
000026  f7fffffe          BL       __2printf
                  |L1.42|
;;;43     		}
;;;44     	//memset((void*)(inbuf_buf),0,sizeof(inbuf_buf));//所有元素清零
;;;45     //	if(inbuf_buf==NULL)return PIC_MEM_ERR;	//内存申请失败.
;;;46     	fileW=(FIL *)malloc(sizeof(FIL));	//开辟FIL字节的内存区域 
00002a  f2410024          MOV      r0,#0x1024
00002e  f7fffffe          BL       malloc
000032  4973              LDR      r1,|L1.512|
000034  6008              STR      r0,[r1,#0]  ; fileW
;;;47     	if(fileW==NULL||cinfo==NULL||inbuf_buf==NULL)							//内存申请失败.
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]  ; fileW
00003a  b108              CBZ      r0,|L1.64|
00003c  b104              CBZ      r4,|L1.64|
00003e  b97d              CBNZ     r5,|L1.96|
                  |L1.64|
;;;48     	{
;;;49     		printf("	JPEG_encode//内存申请失败.");///////////////////////////////////////////
000040  a070              ADR      r0,|L1.516|
000042  f7fffffe          BL       __2printf
;;;50     		free(cinfo);
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       free
;;;51     		free(inbuf_buf);
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       free
;;;52     		free(fileW);
000052  486b              LDR      r0,|L1.512|
000054  6800              LDR      r0,[r0,#0]  ; fileW
000056  f7fffffe          BL       free
;;;53     		return 1;
00005a  2001              MOVS     r0,#1
                  |L1.92|
;;;54     	} 	 
;;;55     
;;;56     	
;;;57     	//res=f_mount(0, &fatfs);
;;;58     	//while(res){;}//LCD_ShowString(20,20,"SD mount failed!");
;;;59     	//res=f_open(&fileW,"0:/DCMI/ph1.jpg",FA_WRITE|FA_CREATE_ALWAYS);//创建并打开
;;;60     //res=f_open(f_bmp,(const TCHAR*)filename,FA_WRITE|FA_CREATE_NEW);
;;;61     	res = f_open( fileW , (char*)filename, FA_CREATE_ALWAYS | FA_WRITE );
;;;62     	
;;;63     	/* 新建文件之后要先关闭再打开才能写入 */
;;;64     	f_close(fileW);
;;;65     		
;;;66     	res = f_open( fileW , (char*)filename,  FA_OPEN_EXISTING | FA_WRITE);
;;;67     
;;;68     
;;;69     	if(res==FR_OK)
;;;70     	{
;;;71     		
;;;72     	
;;;73     		
;;;74     //	while(res){;}//LCD_ShowString(20,20,"file create failed!");
;;;75       	// printf("	JPEG_encode//创建并打开");///////////////////////////////////////////
;;;76     	cinfo->state=JC_CREATING;  
;;;77     	memset((void*)(cinfo),0,sizeof(jpeg_compress_info));//所有元素清零
;;;78     //	cinfo=jpeg_create_compress();//创建JPEG压缩文件
;;;79     	cinfo->image_width=camera_WIDTH;
;;;80       	cinfo->image_height=camera_HEIGHT;
;;;81       	cinfo->output=0;//数据输出到NULL;
;;;82     	
;;;83     	cinfo->fileW=fileW;//文件/////////////文件///////////文件///////////文件/////////////文件///////////文件/////////
;;;84     	
;;;85       	jpeg_set_default(cinfo,inbuf_buf);//设置默认参数
;;;86     	
;;;87     	  	 //printf("	JPEG_encode//设置默认参数");///////////////////////////////////////////
;;;88     	
;;;89     	jpeg_start_compress(cinfo);//开始压缩,写压缩文件头信息
;;;90     	
;;;91     		  	 //printf("	JPEG_encode//开始压缩,写压缩文件头信息");///////////////////////////////////////////
;;;92     	
;;;93     	FIFO_PREPARE;  			/*FIFO准备*/					
;;;94       count=0;
;;;95     	while(cinfo->next_line<cinfo->image_height)
;;;96     	{
;;;97     		for(i=0;i<camera_WIDTH;i++)//读取一行
;;;98     		{
;;;99     			READ_FIFO_PIXEL(color);
;;;100    		 cinfo->inbuf[count++]=(u8)((color&0xf800)>>8);
;;;101    			cinfo->inbuf[count++]=(u8)((color&0x07e0)>>3);
;;;102    			cinfo->inbuf[count++]=(u8)((color&0x001f)<<3);						
;;;103    		}
;;;104    		
;;;105    		cinfo->next_line++; 
;;;106    	  	//当数据填满时压缩并输出数据(填满16行)
;;;107    	  	if(cinfo->next_line%cinfo->inbuf_height==0)
;;;108    		{
;;;109    			count=0;
;;;110    	    	jint_process_rows(cinfo);//在这里压缩
;;;111          	memset((void*)(cinfo->inbuf),0,cinfo->inbuf_size);//清空输入缓冲区
;;;112    			
;;;113    	  	}
;;;114    	}	
;;;115    	jpeg_finish_compress(cinfo);
;;;116    	printf("	JPEG_encode//jpeg_finish_compress(cinfo)");///////////////////////////////////////////
;;;117    	f_close(fileW);
;;;118    	free(cinfo);
;;;119    	free(inbuf_buf);
;;;120    	free(fileW);
;;;121    	return 0;
;;;122    }
;;;123    	else
;;;124    	{
;;;125    		printf("open faild");
;;;126    		free(cinfo);
;;;127    		free(inbuf_buf);
;;;128    		free(fileW);
;;;129    		return 1;
;;;130    	}
;;;131    }
00005c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.96|
000060  220a              MOVS     r2,#0xa               ;61
000062  4641              MOV      r1,r8                 ;61
000064  4866              LDR      r0,|L1.512|
000066  6800              LDR      r0,[r0,#0]            ;61  ; fileW
000068  f7fffffe          BL       f_open
00006c  4682              MOV      r10,r0                ;61
00006e  4864              LDR      r0,|L1.512|
000070  6800              LDR      r0,[r0,#0]            ;64  ; fileW
000072  f7fffffe          BL       f_close
000076  2202              MOVS     r2,#2                 ;66
000078  4641              MOV      r1,r8                 ;66
00007a  4861              LDR      r0,|L1.512|
00007c  6800              LDR      r0,[r0,#0]            ;66  ; fileW
00007e  f7fffffe          BL       f_open
000082  4682              MOV      r10,r0                ;66
000084  f1ba0f00          CMP      r10,#0                ;69
000088  d17e              BNE      |L1.392|
00008a  2000              MOVS     r0,#0                 ;76
00008c  f88400fc          STRB     r0,[r4,#0xfc]         ;76
000090  f44f7184          MOV      r1,#0x108             ;77
000094  4620              MOV      r0,r4                 ;77
000096  f7fffffe          BL       __aeabi_memclr4
00009a  f44f70f0          MOV      r0,#0x1e0             ;79
00009e  6020              STR      r0,[r4,#0]            ;79
0000a0  f44f7088          MOV      r0,#0x110             ;80
0000a4  6060              STR      r0,[r4,#4]            ;80
0000a6  2000              MOVS     r0,#0                 ;81
0000a8  60a0              STR      r0,[r4,#8]            ;81
0000aa  4855              LDR      r0,|L1.512|
0000ac  6800              LDR      r0,[r0,#0]            ;83  ; fileW
0000ae  f8c40104          STR      r0,[r4,#0x104]        ;83
0000b2  4629              MOV      r1,r5                 ;85
0000b4  4620              MOV      r0,r4                 ;85
0000b6  f7fffffe          BL       jpeg_set_default
0000ba  4620              MOV      r0,r4                 ;89
0000bc  f7fffffe          BL       jpeg_start_compress
0000c0  bf00              NOP                            ;93
0000c2  2004              MOVS     r0,#4                 ;93
0000c4  4956              LDR      r1,|L1.544|
0000c6  6008              STR      r0,[r1,#0]            ;93
0000c8  2020              MOVS     r0,#0x20              ;93
0000ca  4956              LDR      r1,|L1.548|
0000cc  6148              STR      r0,[r1,#0x14]         ;93
0000ce  6108              STR      r0,[r1,#0x10]         ;93
0000d0  2004              MOVS     r0,#4                 ;93
0000d2  4953              LDR      r1,|L1.544|
0000d4  1f09              SUBS     r1,r1,#4              ;93
0000d6  6008              STR      r0,[r1,#0]            ;93
0000d8  2020              MOVS     r0,#0x20              ;93
0000da  4952              LDR      r1,|L1.548|
0000dc  6148              STR      r0,[r1,#0x14]         ;93
0000de  6108              STR      r0,[r1,#0x10]         ;93
0000e0  bf00              NOP                            ;93
0000e2  2600              MOVS     r6,#0                 ;94
0000e4  e04c              B        |L1.384|
                  |L1.230|
0000e6  f04f0900          MOV      r9,#0                 ;97
0000ea  e030              B        |L1.334|
                  |L1.236|
0000ec  bf00              NOP                            ;99
0000ee  2700              MOVS     r7,#0                 ;99
0000f0  2020              MOVS     r0,#0x20              ;99
0000f2  494c              LDR      r1,|L1.548|
0000f4  6148              STR      r0,[r1,#0x14]         ;99
0000f6  484c              LDR      r0,|L1.552|
0000f8  6800              LDR      r0,[r0,#0]            ;99
0000fa  f400477f          AND      r7,r0,#0xff00         ;99
0000fe  2020              MOVS     r0,#0x20              ;99
000100  6108              STR      r0,[r1,#0x10]         ;99
000102  6148              STR      r0,[r1,#0x14]         ;99
000104  4848              LDR      r0,|L1.552|
000106  6800              LDR      r0,[r0,#0]            ;99
000108  f3c02007          UBFX     r0,r0,#8,#8           ;99
00010c  4307              ORRS     r7,r7,r0              ;99
00010e  2020              MOVS     r0,#0x20              ;99
000110  6108              STR      r0,[r1,#0x10]         ;99
000112  bf00              NOP                            ;99
000114  f4074078          AND      r0,r7,#0xf800         ;100
000118  1202              ASRS     r2,r0,#8              ;100
00011a  f8543fec          LDR      r3,[r4,#0xec]!        ;100
00011e  4630              MOV      r0,r6                 ;100
000120  1c71              ADDS     r1,r6,#1              ;100
000122  b28e              UXTH     r6,r1                 ;100
000124  541a              STRB     r2,[r3,r0]            ;100
000126  f40760fc          AND      r0,r7,#0x7e0          ;101
00012a  10c2              ASRS     r2,r0,#3              ;101
00012c  4630              MOV      r0,r6                 ;101
00012e  1c71              ADDS     r1,r6,#1              ;101
000130  b28e              UXTH     r6,r1                 ;101
000132  6823              LDR      r3,[r4,#0]            ;101
000134  541a              STRB     r2,[r3,r0]            ;101
000136  06f8              LSLS     r0,r7,#27             ;102
000138  0e02              LSRS     r2,r0,#24             ;102
00013a  f85439ec          LDR      r3,[r4],#-0xec        ;102
00013e  4630              MOV      r0,r6                 ;102
000140  1c71              ADDS     r1,r6,#1              ;102
000142  b28e              UXTH     r6,r1                 ;102
000144  541a              STRB     r2,[r3,r0]            ;102
000146  f1090001          ADD      r0,r9,#1              ;97
00014a  fa1ff980          UXTH     r9,r0                 ;97
                  |L1.334|
00014e  f5b97ff0          CMP      r9,#0x1e0             ;97
000152  dbcb              BLT      |L1.236|
000154  34f4              ADDS     r4,r4,#0xf4           ;105
000156  68e0              LDR      r0,[r4,#0xc]          ;105
000158  1c40              ADDS     r0,r0,#1              ;105
00015a  60e0              STR      r0,[r4,#0xc]          ;105
00015c  68e0              LDR      r0,[r4,#0xc]          ;107
00015e  f85419f4          LDR      r1,[r4],#-0xf4        ;107
000162  fb90f2f1          SDIV     r2,r0,r1              ;107
000166  fb010012          MLS      r0,r1,r2,r0           ;107
00016a  b948              CBNZ     r0,|L1.384|
00016c  2600              MOVS     r6,#0                 ;109
00016e  4620              MOV      r0,r4                 ;110
000170  f7fffffe          BL       jint_process_rows
000174  f8d410f8          LDR      r1,[r4,#0xf8]         ;111
000178  f8d400ec          LDR      r0,[r4,#0xec]         ;111
00017c  f7fffffe          BL       __aeabi_memclr
                  |L1.384|
000180  6861              LDR      r1,[r4,#4]            ;95
000182  f8d40100          LDR      r0,[r4,#0x100]        ;95
000186  e000              B        |L1.394|
                  |L1.392|
000188  e017              B        |L1.442|
                  |L1.394|
00018a  4288              CMP      r0,r1                 ;95
00018c  dbab              BLT      |L1.230|
00018e  4620              MOV      r0,r4                 ;115
000190  f7fffffe          BL       jpeg_finish_compress
000194  a025              ADR      r0,|L1.556|
000196  f7fffffe          BL       __2printf
00019a  4819              LDR      r0,|L1.512|
00019c  6800              LDR      r0,[r0,#0]            ;117  ; fileW
00019e  f7fffffe          BL       f_close
0001a2  4620              MOV      r0,r4                 ;118
0001a4  f7fffffe          BL       free
0001a8  4628              MOV      r0,r5                 ;119
0001aa  f7fffffe          BL       free
0001ae  4814              LDR      r0,|L1.512|
0001b0  6800              LDR      r0,[r0,#0]            ;120  ; fileW
0001b2  f7fffffe          BL       free
0001b6  2000              MOVS     r0,#0                 ;121
0001b8  e750              B        |L1.92|
                  |L1.442|
0001ba  a027              ADR      r0,|L1.600|
0001bc  f7fffffe          BL       __2printf
0001c0  4620              MOV      r0,r4                 ;126
0001c2  f7fffffe          BL       free
0001c6  4628              MOV      r0,r5                 ;127
0001c8  f7fffffe          BL       free
0001cc  480c              LDR      r0,|L1.512|
0001ce  6800              LDR      r0,[r0,#0]            ;128  ; fileW
0001d0  f7fffffe          BL       free
0001d4  2001              MOVS     r0,#1                 ;129
0001d6  e741              B        |L1.92|
;;;132    ///////////////////////////////////////////////////////////////////////////////////////////
                          ENDP

                  |L1.472|
0001d8  6d616c6c          DCB      "malloc cinfo failed",0
0001dc  6f632063
0001e0  696e666f
0001e4  20666169
0001e8  6c656400
                  |L1.492|
0001ec  6d616c6c          DCB      "malloc buf faild",0
0001f0  6f632062
0001f4  75662066
0001f8  61696c64
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L1.512|
                          DCD      fileW
                  |L1.516|
000204  094a5045          DCB      "\tJPEG_encode//",196,218,180,230,201,234,199,235,202,167
000208  475f656e
00020c  636f6465
000210  2f2fc4da
000214  b4e6c9ea
000218  c7ebcaa7
00021c  b0dc2e00          DCB      176,220,".",0
                  |L1.544|
                          DCD      0x40010814
                  |L1.548|
                          DCD      0x40011000
                  |L1.552|
                          DCD      0x40010c08
                  |L1.556|
00022c  094a5045          DCB      "\tJPEG_encode//jpeg_finish_compress(cinfo)",0
000230  475f656e
000234  636f6465
000238  2f2f6a70
00023c  65675f66
000240  696e6973
000244  685f636f
000248  6d707265
00024c  73732863
000250  696e666f
000254  2900    
000256  00                DCB      0
000257  00                DCB      0
                  |L1.600|
000258  6f70656e          DCB      "open faild",0
00025c  20666169
000260  6c6400  
000263  00                DCB      0

                          AREA ||i.bit_num||, CODE, READONLY, ALIGN=1

                  bit_num PROC
;;;878    
;;;879    int bit_num(int a) 
000000  4601              MOV      r1,r0
;;;880    {
;;;881      	int bit=0;
000002  2200              MOVS     r2,#0
;;;882      	if(a==0)return 0;
000004  b909              CBNZ     r1,|L2.10|
000006  2000              MOVS     r0,#0
                  |L2.8|
;;;883      	a=a>0?a:-a;
;;;884      	while((1<<bit)<=a)bit++;
;;;885      	return bit;
;;;886    }
000008  4770              BX       lr
                  |L2.10|
00000a  2900              CMP      r1,#0                 ;883
00000c  dd01              BLE      |L2.18|
00000e  4608              MOV      r0,r1                 ;883
000010  e000              B        |L2.20|
                  |L2.18|
000012  4248              RSBS     r0,r1,#0              ;883
                  |L2.20|
000014  4601              MOV      r1,r0                 ;883
000016  e000              B        |L2.26|
                  |L2.24|
000018  1c52              ADDS     r2,r2,#1              ;884
                  |L2.26|
00001a  2001              MOVS     r0,#1                 ;884
00001c  4090              LSLS     r0,r0,r2              ;884
00001e  4288              CMP      r0,r1                 ;884
000020  ddfa              BLE      |L2.24|
000022  4610              MOV      r0,r2                 ;885
000024  e7f0              B        |L2.8|
;;;887    //写比特
                          ENDP


                          AREA ||i.dsp_fdct_8x8||, CODE, READONLY, ALIGN=2

                  dsp_fdct_8x8 PROC
;;;569    volatile int temp_dct1[64];
;;;570    void dsp_fdct_8x8(short *dct_data, unsigned num_fdcts)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;571    {
000004  b0b1              SUB      sp,sp,#0xc4
;;;572      	const u16 c1=0x2C62,c3=0x25A0;
000006  f6424a62          MOV      r10,#0x2c62
00000a  f8cda0c0          STR      r10,[sp,#0xc0]
00000e  f2425aa0          MOV      r10,#0x25a0
000012  f8cda0bc          STR      r10,[sp,#0xbc]
;;;573      	const u16 c5=0x1924,c7=0x08D4;
000016  f6411a24          MOV      r10,#0x1924
00001a  f8cda0b8          STR      r10,[sp,#0xb8]
00001e  f6400ad4          MOV      r10,#0x8d4
000022  f8cda0b4          STR      r10,[sp,#0xb4]
;;;574      	const u16 c0=0xB505,c2=0x29CF;
000026  f24b5a05          MOV      r10,#0xb505
00002a  f8cda0b0          STR      r10,[sp,#0xb0]
00002e  f6421acf          MOV      r10,#0x29cf
000032  f8cda0ac          STR      r10,[sp,#0xac]
;;;575      	const u16 c6=0x1151;
000036  f2411a51          MOV      r10,#0x1151
00003a  f8cda0a8          STR      r10,[sp,#0xa8]
;;;576      	short f0,f1,f2,f3,f4,f5,f6,f7;		
;;;577      	int   g0,g1,h0,h1,p0,p1;
;;;578      	short r0,r1;
;;;579      	int P00,P11,R00,R11;
;;;580      	short g2,g3,h2,h3;
;;;581      	short q0a,s0a,q0,q1,s0,s1;
;;;582      	short Q0,Q1,S0,S1;
;;;583      	int   F0,F1,F2,F3,F4,F5,F6,F7;
;;;584      	int   F0r,F1r,F2r,F3r,F4r,F5r,F6r,F7r;
;;;585      	unsigned i,j;
;;;586      	short *dct_io_ptr;
;;;587    	dct_io_ptr=dct_data;
00003e  9831              LDR      r0,[sp,#0xc4]
;;;588    	for(i=0;i<64;i++)temp_dct1[i]=dct_data[i];
000040  2100              MOVS     r1,#0
000042  e008              B        |L3.86|
                  |L3.68|
000044  f8dda0c4          LDR      r10,[sp,#0xc4]
000048  f93aa011          LDRSH    r10,[r10,r1,LSL #1]
00004c  f8dfb614          LDR      r11,|L3.1636|
000050  f84ba021          STR      r10,[r11,r1,LSL #2]
000054  1c49              ADDS     r1,r1,#1
                  |L3.86|
000056  2940              CMP      r1,#0x40
000058  d3f4              BCC      |L3.68|
;;;589    	for(i=0;i<num_fdcts;i++)
00005a  2100              MOVS     r1,#0
00005c  e168              B        |L3.816|
                  |L3.94|
;;;590    	{
;;;591    		for(j=0;j<8;j++)
00005e  f04f0a00          MOV      r10,#0
000062  f8cda000          STR      r10,[sp,#0]
000066  e15b              B        |L3.800|
                  |L3.104|
;;;592    		{
;;;593    			f0=dct_io_ptr[0];
000068  f9b06000          LDRSH    r6,[r0,#0]
;;;594    			f1=dct_io_ptr[8];
00006c  f9b07010          LDRSH    r7,[r0,#0x10]
;;;595    			f2=dct_io_ptr[16];
000070  f9b0c020          LDRSH    r12,[r0,#0x20]
;;;596    			f3=dct_io_ptr[24];
000074  f9b08030          LDRSH    r8,[r0,#0x30]
;;;597    			f4=dct_io_ptr[32];
000078  f9b09040          LDRSH    r9,[r0,#0x40]
;;;598    			f5=dct_io_ptr[40];
00007c  f9b0a050          LDRSH    r10,[r0,#0x50]
000080  f8cda0a4          STR      r10,[sp,#0xa4]
;;;599    			f6=dct_io_ptr[48];
000084  f9b0a060          LDRSH    r10,[r0,#0x60]
000088  f8cda0a0          STR      r10,[sp,#0xa0]
;;;600    			f7=dct_io_ptr[56];
00008c  f9b0a070          LDRSH    r10,[r0,#0x70]
000090  f8cda09c          STR      r10,[sp,#0x9c]
;;;601    			g0=f0+f7;h2=f0-f7;
000094  f8dda09c          LDR      r10,[sp,#0x9c]
000098  44b2              ADD      r10,r10,r6
00009a  f8cda098          STR      r10,[sp,#0x98]
00009e  f8dda09c          LDR      r10,[sp,#0x9c]
0000a2  eba60a0a          SUB      r10,r6,r10
0000a6  fa0ff38a          SXTH     r3,r10
;;;602    			g1=f1+f6;h3=f1-f6;
0000aa  f8dda0a0          LDR      r10,[sp,#0xa0]
0000ae  44ba              ADD      r10,r10,r7
0000b0  f8cda094          STR      r10,[sp,#0x94]
0000b4  f8dda0a0          LDR      r10,[sp,#0xa0]
0000b8  eba70a0a          SUB      r10,r7,r10
0000bc  fa0ffa8a          SXTH     r10,r10
0000c0  f8cda064          STR      r10,[sp,#0x64]
;;;603    			h1=f2+f5;g3=f2-f5;
0000c4  f8dda0a4          LDR      r10,[sp,#0xa4]
0000c8  44e2              ADD      r10,r10,r12
0000ca  f8cda08c          STR      r10,[sp,#0x8c]
0000ce  f8dda0a4          LDR      r10,[sp,#0xa4]
0000d2  ebac0a0a          SUB      r10,r12,r10
0000d6  fa0ffa8a          SXTH     r10,r10
0000da  f8cda068          STR      r10,[sp,#0x68]
;;;604    			h0=f3+f4;g2=f3-f4;
0000de  eb080a09          ADD      r10,r8,r9
0000e2  f8cda090          STR      r10,[sp,#0x90]
0000e6  eba80a09          SUB      r10,r8,r9
0000ea  fa0ff28a          SXTH     r2,r10
;;;605    			p0=g0+h0;r0=g0-h0;
0000ee  f8ddb090          LDR      r11,[sp,#0x90]
0000f2  f8dda098          LDR      r10,[sp,#0x98]
0000f6  44da              ADD      r10,r10,r11
0000f8  f8cda088          STR      r10,[sp,#0x88]
0000fc  f8ddb090          LDR      r11,[sp,#0x90]
000100  f8dda098          LDR      r10,[sp,#0x98]
000104  ebaa0a0b          SUB      r10,r10,r11
000108  fa0ffa8a          SXTH     r10,r10
00010c  f8cda080          STR      r10,[sp,#0x80]
;;;606    			p1=g1+h1;r1=g1-h1;
000110  f8ddb08c          LDR      r11,[sp,#0x8c]
000114  f8dda094          LDR      r10,[sp,#0x94]
000118  44da              ADD      r10,r10,r11
00011a  f8cda084          STR      r10,[sp,#0x84]
00011e  f8ddb08c          LDR      r11,[sp,#0x8c]
000122  f8dda094          LDR      r10,[sp,#0x94]
000126  ebaa0a0b          SUB      r10,r10,r11
00012a  fa0ffa8a          SXTH     r10,r10
00012e  f8cda07c          STR      r10,[sp,#0x7c]
;;;607    			q1=g2;s1=h2;
000132  4614              MOV      r4,r2
000134  461d              MOV      r5,r3
;;;608    			s0a=h3+g3;q0a=h3-g3;
000136  e9ddab19          LDRD     r10,r11,[sp,#0x64]
00013a  44da              ADD      r10,r10,r11
00013c  fa0ffa8a          SXTH     r10,r10
000140  f8cda05c          STR      r10,[sp,#0x5c]
000144  e9ddab19          LDRD     r10,r11,[sp,#0x64]
000148  ebaa0a0b          SUB      r10,r10,r11
00014c  fa0ffa8a          SXTH     r10,r10
000150  f8cda060          STR      r10,[sp,#0x60]
;;;609    			s0=(s0a*c0+0x7FFF)>>16;
000154  f24b5b05          MOV      r11,#0xb505
000158  f8dda05c          LDR      r10,[sp,#0x5c]
00015c  fb0afa0b          MUL      r10,r10,r11
000160  f6477bff          MOV      r11,#0x7fff
000164  44da              ADD      r10,r10,r11
000166  ea4f4a2a          ASR      r10,r10,#16
00016a  f8cda054          STR      r10,[sp,#0x54]
;;;610    			q0=(q0a*c0+0x7FFF)>>16;
00016e  f24b5b05          MOV      r11,#0xb505
000172  f8dda060          LDR      r10,[sp,#0x60]
000176  fb0afa0b          MUL      r10,r10,r11
00017a  f6477bff          MOV      r11,#0x7fff
00017e  44da              ADD      r10,r10,r11
000180  ea4f4a2a          ASR      r10,r10,#16
000184  f8cda058          STR      r10,[sp,#0x58]
;;;611    			P00=p0+p1;P11=p0-p1;
000188  e9ddba21          LDRD     r11,r10,[sp,#0x84]
00018c  44da              ADD      r10,r10,r11
00018e  f8cda078          STR      r10,[sp,#0x78]
000192  e9ddba21          LDRD     r11,r10,[sp,#0x84]
000196  ebaa0a0b          SUB      r10,r10,r11
00019a  f8cda074          STR      r10,[sp,#0x74]
;;;612    			R11=c6*r1+c2*r0;R00=c6*r0-c2*r1;
00019e  f2411b51          MOV      r11,#0x1151
0001a2  f8dda07c          LDR      r10,[sp,#0x7c]
0001a6  fb0afb0b          MUL      r11,r10,r11
0001aa  f6421ecf          MOV      lr,#0x29cf
0001ae  f8dda080          LDR      r10,[sp,#0x80]
0001b2  fb0eba0a          MLA      r10,lr,r10,r11
0001b6  f8cda06c          STR      r10,[sp,#0x6c]
0001ba  f2411b51          MOV      r11,#0x1151
0001be  f8dda080          LDR      r10,[sp,#0x80]
0001c2  fb0afb0b          MUL      r11,r10,r11
0001c6  f8dda07c          LDR      r10,[sp,#0x7c]
0001ca  fb0eba1a          MLS      r10,lr,r10,r11
0001ce  f8cda070          STR      r10,[sp,#0x70]
;;;613    			Q1=q1+q0;Q0=q1-q0;
0001d2  4622              MOV      r2,r4
0001d4  f8dda058          LDR      r10,[sp,#0x58]
0001d8  44a2              ADD      r10,r10,r4
0001da  fa0ffa8a          SXTH     r10,r10
0001de  f8cda04c          STR      r10,[sp,#0x4c]
0001e2  f8dda058          LDR      r10,[sp,#0x58]
0001e6  eba40a0a          SUB      r10,r4,r10
0001ea  fa0ffa8a          SXTH     r10,r10
0001ee  f8cda050          STR      r10,[sp,#0x50]
;;;614    			S1=s1+s0;S0=s1-s0;
0001f2  462b              MOV      r3,r5
0001f4  f8dda054          LDR      r10,[sp,#0x54]
0001f8  44aa              ADD      r10,r10,r5
0001fa  fa0ffa8a          SXTH     r10,r10
0001fe  f8cda044          STR      r10,[sp,#0x44]
000202  f8dda054          LDR      r10,[sp,#0x54]
000206  eba50a0a          SUB      r10,r5,r10
00020a  fa0ffa8a          SXTH     r10,r10
00020e  f8cda048          STR      r10,[sp,#0x48]
;;;615    			F0=P00;F4=P11;
000212  f8dda078          LDR      r10,[sp,#0x78]
000216  f8cda040          STR      r10,[sp,#0x40]
00021a  f8dda074          LDR      r10,[sp,#0x74]
00021e  f8cda030          STR      r10,[sp,#0x30]
;;;616    			F2=R11;F6=R00;
000222  f8dda06c          LDR      r10,[sp,#0x6c]
000226  f8cda038          STR      r10,[sp,#0x38]
00022a  f8dda070          LDR      r10,[sp,#0x70]
00022e  f8cda028          STR      r10,[sp,#0x28]
;;;617    			F1=c7*Q1+c1*S1;F7=c7*S1-c1*Q1;
000232  f6400bd4          MOV      r11,#0x8d4
000236  f8dda04c          LDR      r10,[sp,#0x4c]
00023a  fb0afb0b          MUL      r11,r10,r11
00023e  f6424e62          MOV      lr,#0x2c62
000242  f8dda044          LDR      r10,[sp,#0x44]
000246  fb0eba0a          MLA      r10,lr,r10,r11
00024a  f8cda03c          STR      r10,[sp,#0x3c]
00024e  f6400bd4          MOV      r11,#0x8d4
000252  f8dda044          LDR      r10,[sp,#0x44]
000256  fb0afb0b          MUL      r11,r10,r11
00025a  f8dda04c          LDR      r10,[sp,#0x4c]
00025e  fb0eba1a          MLS      r10,lr,r10,r11
000262  f8cda024          STR      r10,[sp,#0x24]
;;;618    			F5=c3*Q0+c5*S0;F3=c3*S0-c5*Q0;
000266  f2425ba0          MOV      r11,#0x25a0
00026a  f8dda050          LDR      r10,[sp,#0x50]
00026e  fb0afb0b          MUL      r11,r10,r11
000272  f6411e24          MOV      lr,#0x1924
000276  f8dda048          LDR      r10,[sp,#0x48]
00027a  fb0eba0a          MLA      r10,lr,r10,r11
00027e  f8cda02c          STR      r10,[sp,#0x2c]
000282  f2425ba0          MOV      r11,#0x25a0
000286  f8dda048          LDR      r10,[sp,#0x48]
00028a  fb0afb0b          MUL      r11,r10,r11
00028e  f8dda050          LDR      r10,[sp,#0x50]
000292  fb0eba1a          MLS      r10,lr,r10,r11
000296  f8cda034          STR      r10,[sp,#0x34]
;;;619    			dct_io_ptr[0]=F0;
00029a  f8dda040          LDR      r10,[sp,#0x40]
00029e  fa0ffa8a          SXTH     r10,r10
0002a2  f8a0a000          STRH     r10,[r0,#0]
;;;620    			dct_io_ptr[8]=F1>>13;
0002a6  f8dda03c          LDR      r10,[sp,#0x3c]
0002aa  ea4f3a6a          ASR      r10,r10,#13
0002ae  fa0ffa8a          SXTH     r10,r10
0002b2  f8a0a010          STRH     r10,[r0,#0x10]
;;;621    			dct_io_ptr[16]=F2>>13;
0002b6  f8dda038          LDR      r10,[sp,#0x38]
0002ba  ea4f3a6a          ASR      r10,r10,#13
0002be  fa0ffa8a          SXTH     r10,r10
0002c2  f8a0a020          STRH     r10,[r0,#0x20]
;;;622    			dct_io_ptr[24]=F3>>13;
0002c6  f8dda034          LDR      r10,[sp,#0x34]
0002ca  ea4f3a6a          ASR      r10,r10,#13
0002ce  fa0ffa8a          SXTH     r10,r10
0002d2  f8a0a030          STRH     r10,[r0,#0x30]
;;;623    			dct_io_ptr[32]=F4;
0002d6  f8dda030          LDR      r10,[sp,#0x30]
0002da  fa0ffa8a          SXTH     r10,r10
0002de  f8a0a040          STRH     r10,[r0,#0x40]
;;;624    			dct_io_ptr[40]=F5>>13;
0002e2  f8dda02c          LDR      r10,[sp,#0x2c]
0002e6  ea4f3a6a          ASR      r10,r10,#13
0002ea  fa0ffa8a          SXTH     r10,r10
0002ee  f8a0a050          STRH     r10,[r0,#0x50]
;;;625    			dct_io_ptr[48]=F6>>13;
0002f2  f8dda028          LDR      r10,[sp,#0x28]
0002f6  ea4f3a6a          ASR      r10,r10,#13
0002fa  fa0ffa8a          SXTH     r10,r10
0002fe  f8a0a060          STRH     r10,[r0,#0x60]
;;;626    			dct_io_ptr[56]=F7>>13;
000302  f8dda024          LDR      r10,[sp,#0x24]
000306  ea4f3a6a          ASR      r10,r10,#13
00030a  fa0ffa8a          SXTH     r10,r10
00030e  f8a0a070          STRH     r10,[r0,#0x70]
;;;627    			dct_io_ptr++;
000312  1c80              ADDS     r0,r0,#2
000314  f8dda000          LDR      r10,[sp,#0]           ;591
000318  f10a0a01          ADD      r10,r10,#1            ;591
00031c  f8cda000          STR      r10,[sp,#0]           ;591
                  |L3.800|
000320  f8dda000          LDR      r10,[sp,#0]           ;591
000324  f1ba0f08          CMP      r10,#8                ;591
000328  f4ffae9e          BCC      |L3.104|
;;;628    		}
;;;629    		dct_io_ptr+=56;
00032c  3070              ADDS     r0,r0,#0x70
00032e  1c49              ADDS     r1,r1,#1              ;589
                  |L3.816|
000330  f8dda0c8          LDR      r10,[sp,#0xc8]        ;589
000334  4551              CMP      r1,r10                ;589
000336  f4ffae92          BCC      |L3.94|
;;;630    	}
;;;631    	dct_io_ptr=dct_data;
00033a  9831              LDR      r0,[sp,#0xc4]
;;;632    	for(i=0;i<8*num_fdcts;i++)
00033c  2100              MOVS     r1,#0
00033e  e17a              B        |L3.1590|
                  |L3.832|
;;;633    	{
;;;634    		f0=dct_io_ptr[0];
000340  f9b06000          LDRSH    r6,[r0,#0]
;;;635    		f1=dct_io_ptr[1];
000344  f9b07002          LDRSH    r7,[r0,#2]
;;;636    		f2=dct_io_ptr[2];
000348  f9b0c004          LDRSH    r12,[r0,#4]
;;;637    		f3=dct_io_ptr[3];
00034c  f9b08006          LDRSH    r8,[r0,#6]
;;;638    		f4=dct_io_ptr[4];
000350  f9b09008          LDRSH    r9,[r0,#8]
;;;639    		f5=dct_io_ptr[5];
000354  f9b0a00a          LDRSH    r10,[r0,#0xa]
000358  f8cda0a4          STR      r10,[sp,#0xa4]
;;;640    		f6=dct_io_ptr[6];
00035c  f9b0a00c          LDRSH    r10,[r0,#0xc]
000360  f8cda0a0          STR      r10,[sp,#0xa0]
;;;641    		f7=dct_io_ptr[7];
000364  f9b0a00e          LDRSH    r10,[r0,#0xe]
000368  f8cda09c          STR      r10,[sp,#0x9c]
;;;642    		g0=f0+f7;h2=f0-f7;
00036c  f8dda09c          LDR      r10,[sp,#0x9c]
000370  44b2              ADD      r10,r10,r6
000372  f8cda098          STR      r10,[sp,#0x98]
000376  f8dda09c          LDR      r10,[sp,#0x9c]
00037a  eba60a0a          SUB      r10,r6,r10
00037e  fa0ff38a          SXTH     r3,r10
;;;643    		g1=f1+f6;h3=f1-f6;
000382  f8dda0a0          LDR      r10,[sp,#0xa0]
000386  44ba              ADD      r10,r10,r7
000388  f8cda094          STR      r10,[sp,#0x94]
00038c  f8dda0a0          LDR      r10,[sp,#0xa0]
000390  eba70a0a          SUB      r10,r7,r10
000394  fa0ffa8a          SXTH     r10,r10
000398  f8cda064          STR      r10,[sp,#0x64]
;;;644    		h1=f2+f5;g3=f2-f5;
00039c  f8dda0a4          LDR      r10,[sp,#0xa4]
0003a0  44e2              ADD      r10,r10,r12
0003a2  f8cda08c          STR      r10,[sp,#0x8c]
0003a6  f8dda0a4          LDR      r10,[sp,#0xa4]
0003aa  ebac0a0a          SUB      r10,r12,r10
0003ae  fa0ffa8a          SXTH     r10,r10
0003b2  f8cda068          STR      r10,[sp,#0x68]
;;;645    		h0=f3+f4;g2=f3-f4;
0003b6  eb080a09          ADD      r10,r8,r9
0003ba  f8cda090          STR      r10,[sp,#0x90]
0003be  eba80a09          SUB      r10,r8,r9
0003c2  fa0ff28a          SXTH     r2,r10
;;;646    		p0=g0+h0;r0=g0-h0;
0003c6  f8ddb090          LDR      r11,[sp,#0x90]
0003ca  f8dda098          LDR      r10,[sp,#0x98]
0003ce  44da              ADD      r10,r10,r11
0003d0  f8cda088          STR      r10,[sp,#0x88]
0003d4  f8ddb090          LDR      r11,[sp,#0x90]
0003d8  f8dda098          LDR      r10,[sp,#0x98]
0003dc  ebaa0a0b          SUB      r10,r10,r11
0003e0  fa0ffa8a          SXTH     r10,r10
0003e4  f8cda080          STR      r10,[sp,#0x80]
;;;647    		p1=g1+h1;r1=g1-h1;
0003e8  f8ddb08c          LDR      r11,[sp,#0x8c]
0003ec  f8dda094          LDR      r10,[sp,#0x94]
0003f0  44da              ADD      r10,r10,r11
0003f2  f8cda084          STR      r10,[sp,#0x84]
0003f6  f8ddb08c          LDR      r11,[sp,#0x8c]
0003fa  f8dda094          LDR      r10,[sp,#0x94]
0003fe  ebaa0a0b          SUB      r10,r10,r11
000402  fa0ffa8a          SXTH     r10,r10
000406  f8cda07c          STR      r10,[sp,#0x7c]
;;;648    		q1=g2;s1=h2;
00040a  4614              MOV      r4,r2
00040c  461d              MOV      r5,r3
;;;649    		s0a=h3+g3;q0a=h3-g3;
00040e  e9ddab19          LDRD     r10,r11,[sp,#0x64]
000412  44da              ADD      r10,r10,r11
000414  fa0ffa8a          SXTH     r10,r10
000418  f8cda05c          STR      r10,[sp,#0x5c]
00041c  e9ddab19          LDRD     r10,r11,[sp,#0x64]
000420  ebaa0a0b          SUB      r10,r10,r11
000424  fa0ffa8a          SXTH     r10,r10
000428  f8cda060          STR      r10,[sp,#0x60]
;;;650    		q0=(q0a*c0+0x7FFF)>>16;
00042c  f24b5b05          MOV      r11,#0xb505
000430  f8dda060          LDR      r10,[sp,#0x60]
000434  fb0afa0b          MUL      r10,r10,r11
000438  f6477bff          MOV      r11,#0x7fff
00043c  44da              ADD      r10,r10,r11
00043e  ea4f4a2a          ASR      r10,r10,#16
000442  f8cda058          STR      r10,[sp,#0x58]
;;;651    		s0=(s0a*c0+0x7FFF)>>16;
000446  f24b5b05          MOV      r11,#0xb505
00044a  f8dda05c          LDR      r10,[sp,#0x5c]
00044e  fb0afa0b          MUL      r10,r10,r11
000452  f6477bff          MOV      r11,#0x7fff
000456  44da              ADD      r10,r10,r11
000458  ea4f4a2a          ASR      r10,r10,#16
00045c  f8cda054          STR      r10,[sp,#0x54]
;;;652    		P00=p0+p1;P11=p0-p1;
000460  e9ddba21          LDRD     r11,r10,[sp,#0x84]
000464  44da              ADD      r10,r10,r11
000466  f8cda078          STR      r10,[sp,#0x78]
00046a  e9ddba21          LDRD     r11,r10,[sp,#0x84]
00046e  ebaa0a0b          SUB      r10,r10,r11
000472  f8cda074          STR      r10,[sp,#0x74]
;;;653    		R11=c6*r1+c2*r0;R00=c6*r0-c2*r1;
000476  f2411b51          MOV      r11,#0x1151
00047a  f8dda07c          LDR      r10,[sp,#0x7c]
00047e  fb0afb0b          MUL      r11,r10,r11
000482  f6421ecf          MOV      lr,#0x29cf
000486  f8dda080          LDR      r10,[sp,#0x80]
00048a  fb0eba0a          MLA      r10,lr,r10,r11
00048e  f8cda06c          STR      r10,[sp,#0x6c]
000492  f2411b51          MOV      r11,#0x1151
000496  f8dda080          LDR      r10,[sp,#0x80]
00049a  fb0afb0b          MUL      r11,r10,r11
00049e  f8dda07c          LDR      r10,[sp,#0x7c]
0004a2  fb0eba1a          MLS      r10,lr,r10,r11
0004a6  f8cda070          STR      r10,[sp,#0x70]
;;;654    		Q1=q1+q0;Q0=q1-q0;
0004aa  4622              MOV      r2,r4
0004ac  f8dda058          LDR      r10,[sp,#0x58]
0004b0  44a2              ADD      r10,r10,r4
0004b2  fa0ffa8a          SXTH     r10,r10
0004b6  f8cda04c          STR      r10,[sp,#0x4c]
0004ba  f8dda058          LDR      r10,[sp,#0x58]
0004be  eba40a0a          SUB      r10,r4,r10
0004c2  fa0ffa8a          SXTH     r10,r10
0004c6  f8cda050          STR      r10,[sp,#0x50]
;;;655    		S1=s1+s0;S0=s1-s0;
0004ca  462b              MOV      r3,r5
0004cc  f8dda054          LDR      r10,[sp,#0x54]
0004d0  44aa              ADD      r10,r10,r5
0004d2  fa0ffa8a          SXTH     r10,r10
0004d6  f8cda044          STR      r10,[sp,#0x44]
0004da  f8dda054          LDR      r10,[sp,#0x54]
0004de  eba50a0a          SUB      r10,r5,r10
0004e2  fa0ffa8a          SXTH     r10,r10
0004e6  f8cda048          STR      r10,[sp,#0x48]
;;;656    		F0=P00;F4=P11;
0004ea  f8dda078          LDR      r10,[sp,#0x78]
0004ee  f8cda040          STR      r10,[sp,#0x40]
0004f2  f8dda074          LDR      r10,[sp,#0x74]
0004f6  f8cda030          STR      r10,[sp,#0x30]
;;;657    		F2=R11;F6=R00;
0004fa  f8dda06c          LDR      r10,[sp,#0x6c]
0004fe  f8cda038          STR      r10,[sp,#0x38]
000502  f8dda070          LDR      r10,[sp,#0x70]
000506  f8cda028          STR      r10,[sp,#0x28]
;;;658    		F1=c7*Q1+c1*S1;F7=c7*S1-c1*Q1;
00050a  f6400bd4          MOV      r11,#0x8d4
00050e  f8dda04c          LDR      r10,[sp,#0x4c]
000512  fb0afb0b          MUL      r11,r10,r11
000516  f6424e62          MOV      lr,#0x2c62
00051a  f8dda044          LDR      r10,[sp,#0x44]
00051e  fb0eba0a          MLA      r10,lr,r10,r11
000522  f8cda03c          STR      r10,[sp,#0x3c]
000526  f6400bd4          MOV      r11,#0x8d4
00052a  f8dda044          LDR      r10,[sp,#0x44]
00052e  fb0afb0b          MUL      r11,r10,r11
000532  f8dda04c          LDR      r10,[sp,#0x4c]
000536  fb0eba1a          MLS      r10,lr,r10,r11
00053a  f8cda024          STR      r10,[sp,#0x24]
;;;659    		F5=c3*Q0+c5*S0;F3=c3*S0-c5*Q0;
00053e  f2425ba0          MOV      r11,#0x25a0
000542  f8dda050          LDR      r10,[sp,#0x50]
000546  fb0afb0b          MUL      r11,r10,r11
00054a  f6411e24          MOV      lr,#0x1924
00054e  f8dda048          LDR      r10,[sp,#0x48]
000552  fb0eba0a          MLA      r10,lr,r10,r11
000556  f8cda02c          STR      r10,[sp,#0x2c]
00055a  f2425ba0          MOV      r11,#0x25a0
00055e  f8dda048          LDR      r10,[sp,#0x48]
000562  fb0afb0b          MUL      r11,r10,r11
000566  f8dda050          LDR      r10,[sp,#0x50]
00056a  fb0eba1a          MLS      r10,lr,r10,r11
00056e  f8cda034          STR      r10,[sp,#0x34]
;;;660    		F0r=(F0+0x0006)>>3;
000572  f8dda040          LDR      r10,[sp,#0x40]
000576  f10a0a06          ADD      r10,r10,#6
00057a  ea4f0aea          ASR      r10,r10,#3
00057e  f8cda020          STR      r10,[sp,#0x20]
;;;661    		F1r=(F1+0x7FFF)>>16;
000582  f6477bff          MOV      r11,#0x7fff
000586  f8dda03c          LDR      r10,[sp,#0x3c]
00058a  44da              ADD      r10,r10,r11
00058c  ea4f4a2a          ASR      r10,r10,#16
000590  f8cda01c          STR      r10,[sp,#0x1c]
;;;662    		F2r=(F2+0x7FFF)>>16;
000594  f8dda038          LDR      r10,[sp,#0x38]
000598  44da              ADD      r10,r10,r11
00059a  ea4f4a2a          ASR      r10,r10,#16
00059e  f8cda018          STR      r10,[sp,#0x18]
;;;663    		F3r=(F3+0x7FFF)>>16;
0005a2  f8dda034          LDR      r10,[sp,#0x34]
0005a6  44da              ADD      r10,r10,r11
0005a8  ea4f4a2a          ASR      r10,r10,#16
0005ac  f8cda014          STR      r10,[sp,#0x14]
;;;664    		F4r=(F4+0x0004)>>3;
0005b0  f8dda030          LDR      r10,[sp,#0x30]
0005b4  f10a0a04          ADD      r10,r10,#4
0005b8  ea4f0aea          ASR      r10,r10,#3
0005bc  f8cda010          STR      r10,[sp,#0x10]
;;;665    		F5r=(F5+0x7FFF)>>16;
0005c0  f8dda02c          LDR      r10,[sp,#0x2c]
0005c4  44da              ADD      r10,r10,r11
0005c6  ea4f4a2a          ASR      r10,r10,#16
0005ca  f8cda00c          STR      r10,[sp,#0xc]
;;;666    		F6r=(F6+0x7FFF)>>16;
0005ce  f8dda028          LDR      r10,[sp,#0x28]
0005d2  44da              ADD      r10,r10,r11
0005d4  ea4f4a2a          ASR      r10,r10,#16
0005d8  f8cda008          STR      r10,[sp,#8]
;;;667    		F7r=(F7+0x7FFF)>>16;
0005dc  f8dda024          LDR      r10,[sp,#0x24]
0005e0  44da              ADD      r10,r10,r11
0005e2  ea4f4a2a          ASR      r10,r10,#16
0005e6  f8cda004          STR      r10,[sp,#4]
;;;668    		dct_io_ptr[0]=F0r;
0005ea  f8dda020          LDR      r10,[sp,#0x20]
0005ee  fa0ffa8a          SXTH     r10,r10
0005f2  f8a0a000          STRH     r10,[r0,#0]
;;;669    		dct_io_ptr[1]=F1r;
0005f6  f8dda01c          LDR      r10,[sp,#0x1c]
0005fa  f8a0a002          STRH     r10,[r0,#2]
;;;670    		dct_io_ptr[2]=F2r;
0005fe  f8dda018          LDR      r10,[sp,#0x18]
000602  f8a0a004          STRH     r10,[r0,#4]
;;;671    		dct_io_ptr[3]=F3r;
000606  f8dda014          LDR      r10,[sp,#0x14]
00060a  f8a0a006          STRH     r10,[r0,#6]
;;;672    		dct_io_ptr[4]=F4r;
00060e  f8dda010          LDR      r10,[sp,#0x10]
000612  fa0ffa8a          SXTH     r10,r10
000616  f8a0a008          STRH     r10,[r0,#8]
;;;673    		dct_io_ptr[5]=F5r;
00061a  f8dda00c          LDR      r10,[sp,#0xc]
00061e  f8a0a00a          STRH     r10,[r0,#0xa]
;;;674    		dct_io_ptr[6]=F6r;
000622  f8dda008          LDR      r10,[sp,#8]
000626  f8a0a00c          STRH     r10,[r0,#0xc]
;;;675    		dct_io_ptr[7]=F7r;
00062a  f8dda004          LDR      r10,[sp,#4]
00062e  f8a0a00e          STRH     r10,[r0,#0xe]
;;;676    		dct_io_ptr+=8;
000632  3010              ADDS     r0,r0,#0x10
000634  1c49              ADDS     r1,r1,#1              ;632
                  |L3.1590|
000636  f8dda0c8          LDR      r10,[sp,#0xc8]        ;632
00063a  ea4f0aca          LSL      r10,r10,#3            ;632
00063e  458a              CMP      r10,r1                ;632
000640  f63fae7e          BHI      |L3.832|
;;;677    	}
;;;678    	for(i=0;i<64;i++)temp_dct1[i]=dct_data[i];
000644  2100              MOVS     r1,#0
000646  e008              B        |L3.1626|
                  |L3.1608|
000648  f8dda0c4          LDR      r10,[sp,#0xc4]
00064c  f93aa011          LDRSH    r10,[r10,r1,LSL #1]
000650  f8dfb010          LDR      r11,|L3.1636|
000654  f84ba021          STR      r10,[r11,r1,LSL #2]
000658  1c49              ADDS     r1,r1,#1
                  |L3.1626|
00065a  2940              CMP      r1,#0x40
00065c  d3f4              BCC      |L3.1608|
;;;679    	return;
;;;680    }
00065e  b033              ADD      sp,sp,#0xcc
000660  e8bd8ff0          POP      {r4-r11,pc}
;;;681    
                          ENDP

                  |L3.1636|
                          DCD      temp_dct1

                          AREA ||i.jhuff_encode_one_block||, CODE, READONLY, ALIGN=1

                  jhuff_encode_one_block PROC
;;;800    //huffman编码
;;;801    void jhuff_encode_one_block(jpeg_compress_info *cinfo,DCTBLOCK src,JHUFF_TBL *dc_tbl,JHUFF_TBL *ac_tbl) 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;802    {
000004  b081              SUB      sp,sp,#4
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  461c              MOV      r4,r3
;;;803      	int diff,ssss,rrrr,code;
;;;804      	int rs,k;  
;;;805      	//直流分量编码
;;;806      	diff=src[0];
00000c  f9b78000          LDRSH    r8,[r7,#0]
;;;807      	ssss=bit_num(diff);
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       bit_num
000016  4681              MOV      r9,r0
;;;808      	jhuff_write_bits(cinfo,dc_tbl->ecode[ssss],dc_tbl->esize[ssss]);
000018  f50a7089          ADD      r0,r10,#0x112
00001c  f8302019          LDRH     r2,[r0,r9,LSL #1]
000020  f20a3012          ADD      r0,r10,#0x312
000024  f8301019          LDRH     r1,[r0,r9,LSL #1]
000028  9801              LDR      r0,[sp,#4]
00002a  f7fffffe          BL       jhuff_write_bits
;;;809      	if (diff<0)diff-=1;
00002e  f1b80f00          CMP      r8,#0
000032  da01              BGE      |L4.56|
000034  f1a80801          SUB      r8,r8,#1
                  |L4.56|
;;;810      	jhuff_write_bits(cinfo,diff,ssss);  
000038  464a              MOV      r2,r9
00003a  4641              MOV      r1,r8
00003c  9801              LDR      r0,[sp,#4]
00003e  f7fffffe          BL       jhuff_write_bits
;;;811      	//交流分量编码
;;;812      	rrrr=0;
000042  2500              MOVS     r5,#0
;;;813      	for(k=1;k<DCTSIZE2;k++)
000044  2601              MOVS     r6,#1
000046  e032              B        |L4.174|
                  |L4.72|
;;;814      	{
;;;815        	if(src[k]==0)
000048  f8370016          LDRH     r0,[r7,r6,LSL #1]
00004c  b908              CBNZ     r0,|L4.82|
;;;816    		{
;;;817          		rrrr++;
00004e  1c6d              ADDS     r5,r5,#1
;;;818          		continue;
000050  e02c              B        |L4.172|
                  |L4.82|
;;;819        	}
;;;820    		else
;;;821    		{
;;;822          		while(rrrr>15)//write EHUFSI(0xF0) bits of EHUFCO(0xF0)
000052  e007              B        |L4.100|
                  |L4.84|
;;;823    			{        		 
;;;824            		jhuff_write_bits(cinfo, ac_tbl->ecode[0xF0], ac_tbl->esize[0xF0]);
000054  f8b422f2          LDRH     r2,[r4,#0x2f2]
000058  f8b414f2          LDRH     r1,[r4,#0x4f2]
00005c  9801              LDR      r0,[sp,#4]
00005e  f7fffffe          BL       jhuff_write_bits
;;;825            		rrrr-=16;
000062  3d10              SUBS     r5,r5,#0x10
                  |L4.100|
000064  2d0f              CMP      r5,#0xf               ;822
000066  dcf5              BGT      |L4.84|
;;;826          		}
;;;827    			ssss=bit_num(src[k]);
000068  f9370016          LDRSH    r0,[r7,r6,LSL #1]
00006c  f7fffffe          BL       bit_num
000070  4681              MOV      r9,r0
;;;828    			rs=((rrrr<<4)|ssss);			
000072  ea491b05          ORR      r11,r9,r5,LSL #4
;;;829    			jhuff_write_bits(cinfo,ac_tbl->ecode[rs],ac_tbl->esize[rs]);//write EHUFSI(rs) bits of EHUFCO(rs)
000076  f5047089          ADD      r0,r4,#0x112
00007a  f830201b          LDRH     r2,[r0,r11,LSL #1]
00007e  f2043012          ADD      r0,r4,#0x312
000082  f830101b          LDRH     r1,[r0,r11,LSL #1]
000086  9801              LDR      r0,[sp,#4]
000088  f7fffffe          BL       jhuff_write_bits
;;;830    			code=src[k];
00008c  f9370016          LDRSH    r0,[r7,r6,LSL #1]
000090  9000              STR      r0,[sp,#0]
;;;831    			if(code<0)code-=1;			
000092  9800              LDR      r0,[sp,#0]
000094  2800              CMP      r0,#0
000096  da02              BGE      |L4.158|
000098  9800              LDR      r0,[sp,#0]
00009a  1e40              SUBS     r0,r0,#1
00009c  9000              STR      r0,[sp,#0]
                  |L4.158|
;;;832    			jhuff_write_bits(cinfo,code,ssss);//write ssss bits of rs
00009e  464a              MOV      r2,r9
0000a0  e9dd1000          LDRD     r1,r0,[sp,#0]
0000a4  f7fffffe          BL       jhuff_write_bits
;;;833    			rrrr=0;
0000a8  2500              MOVS     r5,#0
0000aa  bf00              NOP                            ;818
                  |L4.172|
0000ac  1c76              ADDS     r6,r6,#1              ;813
                  |L4.174|
0000ae  2e40              CMP      r6,#0x40              ;813
0000b0  dbca              BLT      |L4.72|
;;;834    		}
;;;835    	}
;;;836      	if(rrrr!=0)jhuff_write_bits(cinfo,ac_tbl->ecode[0x00],ac_tbl->esize[0x00]);//write EOB
0000b2  b135              CBZ      r5,|L4.194|
0000b4  f8b42112          LDRH     r2,[r4,#0x112]
0000b8  f8b41312          LDRH     r1,[r4,#0x312]
0000bc  9801              LDR      r0,[sp,#4]
0000be  f7fffffe          BL       jhuff_write_bits
                  |L4.194|
;;;837    }
0000c2  b005              ADD      sp,sp,#0x14
0000c4  e8bd8ff0          POP      {r4-r11,pc}
;;;838    //完成缓冲区中剩下数据的压缩编码,并写文件尾到输出文件
                          ENDP


                          AREA ||i.jhuff_flush_buffer||, CODE, READONLY, ALIGN=2

                  jhuff_flush_buffer PROC
;;;858    //清除/释放缓冲区
;;;859    void jhuff_flush_buffer(jpeg_compress_info *cinfo) 
000000  b570              PUSH     {r4-r6,lr}
;;;860    {
000002  4605              MOV      r5,r0
;;;861      	int i=3;  
000004  2403              MOVS     r4,#3
;;;862      	while(bits_in_buffer>8)
000006  e014              B        |L5.50|
                  |L5.8|
;;;863    	{
;;;864    		jutl_write_byte(buffer.c[i],cinfo->output,cinfo  );
000008  4a1d              LDR      r2,|L5.128|
00000a  5d10              LDRB     r0,[r2,r4]
00000c  462a              MOV      r2,r5
00000e  68a9              LDR      r1,[r5,#8]
000010  f7fffffe          BL       jutl_write_byte
;;;865    		if(buffer.c[i]==0xFF)jutl_write_byte(0x00,cinfo->output,cinfo  );		
000014  481a              LDR      r0,|L5.128|
000016  5d00              LDRB     r0,[r0,r4]
000018  28ff              CMP      r0,#0xff
00001a  d104              BNE      |L5.38|
00001c  462a              MOV      r2,r5
00001e  2000              MOVS     r0,#0
000020  68a9              LDR      r1,[r5,#8]
000022  f7fffffe          BL       jutl_write_byte
                  |L5.38|
;;;866    		i--;
000026  1e64              SUBS     r4,r4,#1
;;;867    		bits_in_buffer-=8;
000028  4816              LDR      r0,|L5.132|
00002a  6800              LDR      r0,[r0,#0]  ; bits_in_buffer
00002c  3808              SUBS     r0,r0,#8
00002e  4915              LDR      r1,|L5.132|
000030  6008              STR      r0,[r1,#0]  ; bits_in_buffer
                  |L5.50|
000032  4814              LDR      r0,|L5.132|
000034  6800              LDR      r0,[r0,#0]            ;862  ; bits_in_buffer
000036  2808              CMP      r0,#8                 ;862
000038  dce6              BGT      |L5.8|
;;;868    	}
;;;869    	if(bits_in_buffer>0)
00003a  4812              LDR      r0,|L5.132|
00003c  6800              LDR      r0,[r0,#0]  ; bits_in_buffer
00003e  2800              CMP      r0,#0
000040  dd17              BLE      |L5.114|
;;;870    	{
;;;871    		buffer.c[i]|=((u8)(0xFF)>>bits_in_buffer);
000042  480f              LDR      r0,|L5.128|
000044  5d00              LDRB     r0,[r0,r4]
000046  490f              LDR      r1,|L5.132|
000048  780a              LDRB     r2,[r1,#0]  ; bits_in_buffer
00004a  21ff              MOVS     r1,#0xff
00004c  4111              ASRS     r1,r1,r2
00004e  4308              ORRS     r0,r0,r1
000050  490b              LDR      r1,|L5.128|
000052  5508              STRB     r0,[r1,r4]
;;;872    		jutl_write_byte(buffer.c[i],cinfo->output,cinfo  );
000054  4a0a              LDR      r2,|L5.128|
000056  5d10              LDRB     r0,[r2,r4]
000058  462a              MOV      r2,r5
00005a  68a9              LDR      r1,[r5,#8]
00005c  f7fffffe          BL       jutl_write_byte
;;;873    		if(buffer.c[i]==0xFF)jutl_write_byte(0x00,cinfo->output,cinfo  );		
000060  4807              LDR      r0,|L5.128|
000062  5d00              LDRB     r0,[r0,r4]
000064  28ff              CMP      r0,#0xff
000066  d104              BNE      |L5.114|
000068  462a              MOV      r2,r5
00006a  2000              MOVS     r0,#0
00006c  68a9              LDR      r1,[r5,#8]
00006e  f7fffffe          BL       jutl_write_byte
                  |L5.114|
;;;874    	}
;;;875    	buffer.all=0;
000072  2000              MOVS     r0,#0
000074  4902              LDR      r1,|L5.128|
000076  6008              STR      r0,[r1,#0]  ; buffer
;;;876    	bits_in_buffer=0;
000078  4902              LDR      r1,|L5.132|
00007a  6008              STR      r0,[r1,#0]  ; bits_in_buffer
;;;877    }
00007c  bd70              POP      {r4-r6,pc}
;;;878    
                          ENDP

00007e  0000              DCW      0x0000
                  |L5.128|
                          DCD      buffer
                  |L5.132|
                          DCD      bits_in_buffer

                          AREA ||i.jhuff_write_bits||, CODE, READONLY, ALIGN=2

                  jhuff_write_bits PROC
;;;887    //写比特
;;;888    void jhuff_write_bits(jpeg_compress_info *cinfo,u32 data,int len) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;889    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;890      	u32 tdata; 
;;;891    	while(len>0)
00000a  e035              B        |L6.120|
                  |L6.12|
;;;892    	{
;;;893    		tdata=(data<<(32-len));
00000c  f1c50020          RSB      r0,r5,#0x20
000010  fa07f800          LSL      r8,r7,r0
;;;894    		buffer.all|=((tdata>>bits_in_buffer));
000014  481a              LDR      r0,|L6.128|
000016  6800              LDR      r0,[r0,#0]  ; buffer
000018  491a              LDR      r1,|L6.132|
00001a  7809              LDRB     r1,[r1,#0]  ; bits_in_buffer
00001c  fa28f101          LSR      r1,r8,r1
000020  4308              ORRS     r0,r0,r1
000022  4917              LDR      r1,|L6.128|
000024  6008              STR      r0,[r1,#0]  ; buffer
;;;895    		bits_in_buffer+=len;		
000026  4817              LDR      r0,|L6.132|
000028  6800              LDR      r0,[r0,#0]  ; bits_in_buffer
00002a  4428              ADD      r0,r0,r5
00002c  4915              LDR      r1,|L6.132|
00002e  6008              STR      r0,[r1,#0]  ; bits_in_buffer
;;;896    		if(bits_in_buffer>=32)//输出缓冲
000030  4608              MOV      r0,r1
000032  6800              LDR      r0,[r0,#0]  ; bits_in_buffer
000034  2820              CMP      r0,#0x20
000036  db1e              BLT      |L6.118|
;;;897    		{
;;;898    			int i;			
;;;899    			for(i=3;i>=0;i--)//必需为大端模式
000038  2603              MOVS     r6,#3
00003a  e00f              B        |L6.92|
                  |L6.60|
;;;900    			{
;;;901    				jutl_write_byte(buffer.c[i],cinfo->output,cinfo  );
00003c  4a10              LDR      r2,|L6.128|
00003e  5d90              LDRB     r0,[r2,r6]
000040  4622              MOV      r2,r4
000042  68a1              LDR      r1,[r4,#8]
000044  f7fffffe          BL       jutl_write_byte
;;;902    				if(buffer.c[i]==0xFF)
000048  480d              LDR      r0,|L6.128|
00004a  5d80              LDRB     r0,[r0,r6]
00004c  28ff              CMP      r0,#0xff
00004e  d104              BNE      |L6.90|
;;;903    				jutl_write_byte(0x00,cinfo->output,cinfo  );
000050  4622              MOV      r2,r4
000052  2000              MOVS     r0,#0
000054  68a1              LDR      r1,[r4,#8]
000056  f7fffffe          BL       jutl_write_byte
                  |L6.90|
00005a  1e76              SUBS     r6,r6,#1              ;899
                  |L6.92|
00005c  2e00              CMP      r6,#0                 ;899
00005e  daed              BGE      |L6.60|
;;;904    			}
;;;905    			buffer.all=0;
000060  2000              MOVS     r0,#0
000062  4907              LDR      r1,|L6.128|
000064  6008              STR      r0,[r1,#0]  ; buffer
;;;906    			len=bits_in_buffer-32;
000066  4807              LDR      r0,|L6.132|
000068  6800              LDR      r0,[r0,#0]  ; bits_in_buffer
00006a  f1a00520          SUB      r5,r0,#0x20
;;;907    			bits_in_buffer=0;
00006e  2000              MOVS     r0,#0
000070  4904              LDR      r1,|L6.132|
000072  6008              STR      r0,[r1,#0]  ; bits_in_buffer
;;;908    		}
000074  e000              B        |L6.120|
                  |L6.118|
;;;909    		else len=0;
000076  2500              MOVS     r5,#0
                  |L6.120|
000078  2d00              CMP      r5,#0                 ;891
00007a  dcc7              BGT      |L6.12|
;;;910    	}
;;;911    }
00007c  e8bd81f0          POP      {r4-r8,pc}
;;;912    
                          ENDP

                  |L6.128|
                          DCD      buffer
                  |L6.132|
                          DCD      bits_in_buffer

                          AREA ||i.jint_add_huff_table||, CODE, READONLY, ALIGN=2

                  jint_add_huff_table PROC
;;;192    //添加huffman表
;;;193    void jint_add_huff_table(jpeg_compress_info *cinfo,u16 which_tbl,int what_tbl,const u8 *bits,const u8 *value) 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;194    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  469a              MOV      r10,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;195      	JHUFF_TBL **hpp;
;;;196      	int nsymbols,len; 
;;;197      	if(which_tbl>NUM_HUFF_TBLS)return;
000010  2c02              CMP      r4,#2
000012  dd01              BLE      |L7.24|
                  |L7.20|
;;;198      	if(what_tbl==0)//直流分量表
;;;199        hpp=cinfo->dc_huff_table;
;;;200      	else if(what_tbl==1)hpp=cinfo->ac_huff_table;//交流分量表
;;;201      	else return ;
;;;202    	hpp[which_tbl]=&JHUFF_TBL_4[which_tbl*2+what_tbl];
;;;203    	memcpy(hpp[which_tbl]->bits,bits,sizeof(hpp[which_tbl]->bits));	  
;;;204      	nsymbols=0;//计算huffval中标志的数量
;;;205    	for(len=1;len<=16;len++)nsymbols+=bits[len];
;;;206      	memcpy(hpp[which_tbl]->huffval,value,nsymbols*sizeof(u8));//set huffval  
;;;207      	//计算并设置huffman表&表长
;;;208      	memset(hpp[which_tbl]->ecode,0,sizeof(hpp[which_tbl]->ecode));
;;;209      	memset(hpp[which_tbl]->esize,0,sizeof(hpp[which_tbl]->esize));
;;;210      	jint_calc_huff_tbl(hpp[which_tbl]);
;;;211    }
000014  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.24|
000018  b916              CBNZ     r6,|L7.32|
00001a  f10905cc          ADD      r5,r9,#0xcc           ;199
00001e  e005              B        |L7.44|
                  |L7.32|
000020  2e01              CMP      r6,#1                 ;200
000022  d102              BNE      |L7.42|
000024  f10905d4          ADD      r5,r9,#0xd4           ;200
000028  e000              B        |L7.44|
                  |L7.42|
00002a  e7f3              B        |L7.20|
                  |L7.44|
00002c  eb060044          ADD      r0,r6,r4,LSL #1       ;202
000030  f2402189          MOV      r1,#0x289             ;202
000034  4348              MULS     r0,r1,r0              ;202
000036  491a              LDR      r1,|L7.160|
000038  eb010040          ADD      r0,r1,r0,LSL #1       ;202
00003c  f8450024          STR      r0,[r5,r4,LSL #2]     ;202
000040  f8550024          LDR      r0,[r5,r4,LSL #2]     ;203
000044  2211              MOVS     r2,#0x11              ;203
000046  4651              MOV      r1,r10                ;203
000048  f7fffffe          BL       __aeabi_memcpy
00004c  2700              MOVS     r7,#0                 ;204
00004e  f04f0801          MOV      r8,#1                 ;205
000052  e004              B        |L7.94|
                  |L7.84|
000054  f81a0008          LDRB     r0,[r10,r8]           ;205
000058  4407              ADD      r7,r7,r0              ;205
00005a  f1080801          ADD      r8,r8,#1              ;205
                  |L7.94|
00005e  f1b80f10          CMP      r8,#0x10              ;205
000062  ddf7              BLE      |L7.84|
000064  463a              MOV      r2,r7                 ;206
000066  f8551024          LDR      r1,[r5,r4,LSL #2]     ;206
00006a  f1010011          ADD      r0,r1,#0x11           ;206
00006e  4659              MOV      r1,r11                ;206
000070  f7fffffe          BL       __aeabi_memcpy
000074  f8551024          LDR      r1,[r5,r4,LSL #2]     ;208
000078  f2013012          ADD      r0,r1,#0x312          ;208
00007c  f44f7100          MOV      r1,#0x200             ;208
000080  f7fffffe          BL       __aeabi_memclr
000084  f8551024          LDR      r1,[r5,r4,LSL #2]     ;209
000088  f5017089          ADD      r0,r1,#0x112          ;209
00008c  f44f7100          MOV      r1,#0x200             ;209
000090  f7fffffe          BL       __aeabi_memclr
000094  f8550024          LDR      r0,[r5,r4,LSL #2]     ;210
000098  f7fffffe          BL       jint_calc_huff_tbl
00009c  bf00              NOP      
00009e  e7b9              B        |L7.20|
;;;212    //生成huffman表
                          ENDP

                  |L7.160|
                          DCD      JHUFF_TBL_4

                          AREA ||i.jint_add_quant_table||, CODE, READONLY, ALIGN=2

                  jint_add_quant_table PROC
;;;165    //添加量化表
;;;166    void jint_add_quant_table(jpeg_compress_info *cinfo,u16 which_tbl,const u16 *base_tbl,float quality) 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;167    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;168      	int i;
;;;169      	DCTVAL *qtblptr;
;;;170      	cinfo->quant_table[which_tbl]=&JQUANT_TBL_2[which_tbl];
00000c  4814              LDR      r0,|L8.96|
00000e  eb0011c4          ADD      r1,r0,r4,LSL #7
000012  f10600dc          ADD      r0,r6,#0xdc
000016  f8401024          STR      r1,[r0,r4,LSL #2]
;;;171      	qtblptr=cinfo->quant_table[which_tbl]->quantval;
00001a  f850b024          LDR      r11,[r0,r4,LSL #2]
;;;172      	for(i=0;i<DCTSIZE2;i++)qtblptr[i]=(short)(base_tbl[i]*quality+0.5);
00001e  2500              MOVS     r5,#0
000020  e017              B        |L8.82|
                  |L8.34|
000022  f8390015          LDRH     r0,[r9,r5,LSL #1]
000026  f7fffffe          BL       __aeabi_ui2f
00002a  4651              MOV      r1,r10
00002c  9000              STR      r0,[sp,#0]
00002e  f7fffffe          BL       __aeabi_fmul
000032  9001              STR      r0,[sp,#4]
000034  f7fffffe          BL       __aeabi_f2d
000038  4607              MOV      r7,r0
00003a  2200              MOVS     r2,#0
00003c  4b09              LDR      r3,|L8.100|
00003e  f7fffffe          BL       __aeabi_dadd
000042  e9cd0102          STRD     r0,r1,[sp,#8]
000046  f7fffffe          BL       __aeabi_d2iz
00004a  b200              SXTH     r0,r0
00004c  f82b0015          STRH     r0,[r11,r5,LSL #1]
000050  1c6d              ADDS     r5,r5,#1
                  |L8.82|
000052  2d40              CMP      r5,#0x40
000054  dbe5              BLT      |L8.34|
;;;173      	jutl_zigzag_sort(qtblptr);
000056  4658              MOV      r0,r11
000058  f7fffffe          BL       jutl_zigzag_sort
;;;174    }
00005c  e8bd9fff          POP      {r0-r12,pc}
;;;175    //Z形排序
                          ENDP

                  |L8.96|
                          DCD      JQUANT_TBL_2
                  |L8.100|
                          DCD      0x3fe00000

                          AREA ||i.jint_calc_huff_tbl||, CODE, READONLY, ALIGN=2

                  jint_calc_huff_tbl PROC
;;;214    static u16 gtmp_hcode[256];
;;;215    void jint_calc_huff_tbl(JHUFF_TBL *htblptr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;216    {
000002  4602              MOV      r2,r0
;;;217      	int i,j,k,lastk,code,si;    	
;;;218      	k=0;//生成EHUFFSI表
000004  2000              MOVS     r0,#0
;;;219      	for(i=1;i<=16;i++)
000006  2101              MOVS     r1,#1
000008  e00b              B        |L9.34|
                  |L9.10|
;;;220    	{
;;;221        	for (j=1; j<=htblptr->bits[i];j++)
00000a  2601              MOVS     r6,#1
00000c  e005              B        |L9.26|
                  |L9.14|
;;;222    		{
;;;223          		gtmp_hsize[k]=i;
00000e  f8dfc09c          LDR      r12,|L9.172|
000012  f82c1010          STRH     r1,[r12,r0,LSL #1]
;;;224          		k++;
000016  1c40              ADDS     r0,r0,#1
000018  1c76              ADDS     r6,r6,#1              ;221
                  |L9.26|
00001a  5c57              LDRB     r7,[r2,r1]            ;221
00001c  42b7              CMP      r7,r6                 ;221
00001e  daf6              BGE      |L9.14|
000020  1c49              ADDS     r1,r1,#1              ;219
                  |L9.34|
000022  2910              CMP      r1,#0x10              ;219
000024  ddf1              BLE      |L9.10|
;;;225        	}
;;;226      	}
;;;227      	gtmp_hsize[k]=0;
000026  2700              MOVS     r7,#0
000028  f8dfc080          LDR      r12,|L9.172|
00002c  f82c7010          STRH     r7,[r12,r0,LSL #1]
;;;228      	lastk=k;    	
000030  4605              MOV      r5,r0
;;;229      	k=0;//生成EHUFFCO表
000032  2000              MOVS     r0,#0
;;;230      	code=0;
000034  2300              MOVS     r3,#0
;;;231      	si=gtmp_hsize[0];
000036  4667              MOV      r7,r12
000038  883c              LDRH     r4,[r7,#0]  ; gtmp_hsize
;;;232      	while(1)
00003a  e01e              B        |L9.122|
                  |L9.60|
;;;233    	{
;;;234        	while(1)
00003c  e00b              B        |L9.86|
                  |L9.62|
;;;235    		{
;;;236          		gtmp_hcode[k]=code;
00003e  f8dfc070          LDR      r12,|L9.176|
000042  f82c3010          STRH     r3,[r12,r0,LSL #1]
;;;237          		code++;
000046  1c5b              ADDS     r3,r3,#1
;;;238          		k++;
000048  1c40              ADDS     r0,r0,#1
;;;239          		if(gtmp_hsize[k]!=si)
00004a  4f18              LDR      r7,|L9.172|
00004c  f8377010          LDRH     r7,[r7,r0,LSL #1]
000050  42a7              CMP      r7,r4
000052  d000              BEQ      |L9.86|
;;;240            	break;
000054  e000              B        |L9.88|
                  |L9.86|
000056  e7f2              B        |L9.62|
                  |L9.88|
000058  bf00              NOP      
;;;241        	}
;;;242        	if(gtmp_hsize[k]==0)
00005a  4f14              LDR      r7,|L9.172|
00005c  f8377010          LDRH     r7,[r7,r0,LSL #1]
000060  b907              CBNZ     r7,|L9.100|
;;;243          	break;
000062  e00b              B        |L9.124|
                  |L9.100|
;;;244        	while(1)
000064  e007              B        |L9.118|
                  |L9.102|
;;;245    		{
;;;246          		code=code<<1;
000066  005b              LSLS     r3,r3,#1
;;;247          		si++;
000068  1c64              ADDS     r4,r4,#1
;;;248          		if(gtmp_hsize[k]==si)
00006a  4f10              LDR      r7,|L9.172|
00006c  f8377010          LDRH     r7,[r7,r0,LSL #1]
000070  42a7              CMP      r7,r4
000072  d100              BNE      |L9.118|
;;;249            	break;
000074  e000              B        |L9.120|
                  |L9.118|
000076  e7f6              B        |L9.102|
                  |L9.120|
000078  bf00              NOP      
                  |L9.122|
00007a  e7df              B        |L9.60|
                  |L9.124|
00007c  bf00              NOP                            ;243
;;;250        	}
;;;251      	}
;;;252       	k=0;//指令代码
00007e  2000              MOVS     r0,#0
;;;253      	do{
000080  bf00              NOP      
                  |L9.130|
;;;254        	i=htblptr->huffval[k];
000082  f1020711          ADD      r7,r2,#0x11
000086  5c39              LDRB     r1,[r7,r0]
;;;255        	htblptr->ecode[i]=gtmp_hcode[k];
000088  4f09              LDR      r7,|L9.176|
00008a  f837c010          LDRH     r12,[r7,r0,LSL #1]
00008e  f2023712          ADD      r7,r2,#0x312
000092  f827c011          STRH     r12,[r7,r1,LSL #1]
;;;256        	htblptr->esize[i]=gtmp_hsize[k];
000096  4f05              LDR      r7,|L9.172|
000098  f837c010          LDRH     r12,[r7,r0,LSL #1]
00009c  f5027789          ADD      r7,r2,#0x112
0000a0  f827c011          STRH     r12,[r7,r1,LSL #1]
;;;257        	k++;
0000a4  1c40              ADDS     r0,r0,#1
;;;258      	}while(k<lastk);
0000a6  42a8              CMP      r0,r5
0000a8  dbeb              BLT      |L9.130|
;;;259    }
0000aa  bdf0              POP      {r4-r7,pc}
;;;260    //计算出一些有用的值并分配到缓冲区中
                          ENDP

                  |L9.172|
                          DCD      gtmp_hsize
                  |L9.176|
                          DCD      gtmp_hcode

                          AREA ||i.jint_process_mcu||, CODE, READONLY, ALIGN=2

                  jint_process_mcu PROC
;;;536    extern volatile int temp_dct1[64];
;;;537    void jint_process_mcu(jpeg_compress_info *cinfo) 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;538    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
;;;539      //处理每个颜色元件
;;;540      	int cn,tn;
;;;541      	for(cn=0;cn<cinfo->num_comp;cn++) 
000008  f04f0900          MOV      r9,#0
00000c  e097              B        |L10.318|
                  |L10.14|
;;;542      	{
;;;543        //元件中使用到的变量
;;;544        	DCTBLOCK   *dct_table=cinfo->comp[cn].dct_table;
00000e  eb0901c9          ADD      r1,r9,r9,LSL #3
000012  f105001c          ADD      r0,r5,#0x1c
000016  eb000081          ADD      r0,r0,r1,LSL #2
00001a  69c0              LDR      r0,[r0,#0x1c]
00001c  9009              STR      r0,[sp,#0x24]
;;;545        	JQUANT_TBL *quant_table=cinfo->quant_table[cinfo->comp[cn].quant_tbl_no];
00001e  eb0901c9          ADD      r1,r9,r9,LSL #3
000022  f105001c          ADD      r0,r5,#0x1c
000026  eb000081          ADD      r0,r0,r1,LSL #2
00002a  68c1              LDR      r1,[r0,#0xc]
00002c  f10500dc          ADD      r0,r5,#0xdc
000030  f850b021          LDR      r11,[r0,r1,LSL #2]
;;;546        	JHUFF_TBL  *dc_table=cinfo->dc_huff_table[cinfo->comp[cn].dc_tbl_no];
000034  eb0901c9          ADD      r1,r9,r9,LSL #3
000038  38c0              SUBS     r0,r0,#0xc0
00003a  eb000081          ADD      r0,r0,r1,LSL #2
00003e  6901              LDR      r1,[r0,#0x10]
000040  f10500cc          ADD      r0,r5,#0xcc
000044  f8500021          LDR      r0,[r0,r1,LSL #2]
000048  9008              STR      r0,[sp,#0x20]
;;;547        	JHUFF_TBL  *ac_table=cinfo->ac_huff_table[cinfo->comp[cn].ac_tbl_no];    
00004a  eb0901c9          ADD      r1,r9,r9,LSL #3
00004e  f105001c          ADD      r0,r5,#0x1c
000052  eb000081          ADD      r0,r0,r1,LSL #2
000056  6941              LDR      r1,[r0,#0x14]
000058  f10500d4          ADD      r0,r5,#0xd4
00005c  f8500021          LDR      r0,[r0,r1,LSL #2]
000060  9007              STR      r0,[sp,#0x1c]
;;;548        	//处理每个DCT表--'Block'    
;;;549        	for(tn=0;tn<cinfo->comp[cn].num_dct_table;tn++) 
000062  f04f0a00          MOV      r10,#0
000066  e05f              B        |L10.296|
                  |L10.104|
;;;550        	{
;;;551          		DCTVAL tmp=0;
000068  2000              MOVS     r0,#0
00006a  9006              STR      r0,[sp,#0x18]
;;;552          		DCTVAL *val=dct_table[tn];
00006c  9809              LDR      r0,[sp,#0x24]
00006e  eb0016ca          ADD      r6,r0,r10,LSL #7
;;;553          		int i;         		
;;;554          		for(i=0;i<DCTSIZE2;i++)val[i]-=128;//Forward-DCT的数据偏移       	      
000072  2400              MOVS     r4,#0
000074  e006              B        |L10.132|
                  |L10.118|
000076  f8360014          LDRH     r0,[r6,r4,LSL #1]
00007a  3880              SUBS     r0,r0,#0x80
00007c  b200              SXTH     r0,r0
00007e  f8260014          STRH     r0,[r6,r4,LSL #1]
000082  1c64              ADDS     r4,r4,#1
                  |L10.132|
000084  2c40              CMP      r4,#0x40
000086  dbf6              BLT      |L10.118|
;;;555          		for(i=0;i<64;i++)temp_dct1[i]=val[i];//Forward-DCT计算     
000088  2400              MOVS     r4,#0
00008a  e005              B        |L10.152|
                  |L10.140|
00008c  f9360014          LDRSH    r0,[r6,r4,LSL #1]
000090  492e              LDR      r1,|L10.332|
000092  f8410024          STR      r0,[r1,r4,LSL #2]
000096  1c64              ADDS     r4,r4,#1
                  |L10.152|
000098  2c40              CMP      r4,#0x40
00009a  dbf7              BLT      |L10.140|
;;;556          		dsp_fdct_8x8((short *)val,1);     		
00009c  2101              MOVS     r1,#1
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       dsp_fdct_8x8
;;;557          		jutl_zigzag_sort((short*)val);//Z变换
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       jutl_zigzag_sort
;;;558          		//量化表 
;;;559          		for(i=0;i<DCTSIZE2;i++)val[i]=(DCTVAL)((float)val[i]/(float)quant_table->quantval[i]+0.5);     
0000aa  2400              MOVS     r4,#0
0000ac  e01c              B        |L10.232|
                  |L10.174|
0000ae  f93b0014          LDRSH    r0,[r11,r4,LSL #1]
0000b2  f7fffffe          BL       __aeabi_i2f
0000b6  9002              STR      r0,[sp,#8]
0000b8  f9360014          LDRSH    r0,[r6,r4,LSL #1]
0000bc  f7fffffe          BL       __aeabi_i2f
0000c0  9001              STR      r0,[sp,#4]
0000c2  9902              LDR      r1,[sp,#8]
0000c4  f7fffffe          BL       __aeabi_fdiv
0000c8  9003              STR      r0,[sp,#0xc]
0000ca  f7fffffe          BL       __aeabi_f2d
0000ce  2200              MOVS     r2,#0
0000d0  4b1f              LDR      r3,|L10.336|
0000d2  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000d6  f7fffffe          BL       __aeabi_dadd
0000da  4607              MOV      r7,r0
0000dc  f7fffffe          BL       __aeabi_d2iz
0000e0  b200              SXTH     r0,r0
0000e2  f8260014          STRH     r0,[r6,r4,LSL #1]
0000e6  1c64              ADDS     r4,r4,#1
                  |L10.232|
0000e8  2c40              CMP      r4,#0x40
0000ea  dbe0              BLT      |L10.174|
;;;560          		//不同编码的计算
;;;561          		tmp=val[0];
0000ec  f9b60000          LDRSH    r0,[r6,#0]
0000f0  9006              STR      r0,[sp,#0x18]
;;;562          		val[0]-=cinfo->comp[cn].preval;
0000f2  8831              LDRH     r1,[r6,#0]
0000f4  eb0902c9          ADD      r2,r9,r9,LSL #3
0000f8  f105001c          ADD      r0,r5,#0x1c
0000fc  eb000082          ADD      r0,r0,r2,LSL #2
000100  8c00              LDRH     r0,[r0,#0x20]
000102  1a08              SUBS     r0,r1,r0
000104  b200              SXTH     r0,r0
000106  8030              STRH     r0,[r6,#0]
;;;563          		cinfo->comp[cn].preval=tmp;           		
000108  eb0902c9          ADD      r2,r9,r9,LSL #3
00010c  f105011c          ADD      r1,r5,#0x1c
000110  eb010182          ADD      r1,r1,r2,LSL #2
000114  9806              LDR      r0,[sp,#0x18]
000116  8408              STRH     r0,[r1,#0x20]
;;;564          		jhuff_encode_one_block(cinfo, val, dc_table, ac_table);//Huffman
000118  4631              MOV      r1,r6
00011a  4628              MOV      r0,r5
00011c  e9dd3207          LDRD     r3,r2,[sp,#0x1c]
000120  f7fffffe          BL       jhuff_encode_one_block
000124  f10a0a01          ADD      r10,r10,#1            ;549
                  |L10.296|
000128  eb0901c9          ADD      r1,r9,r9,LSL #3       ;549
00012c  f105001c          ADD      r0,r5,#0x1c           ;549
000130  eb000081          ADD      r0,r0,r1,LSL #2       ;549
000134  6980              LDR      r0,[r0,#0x18]         ;549
000136  4550              CMP      r0,r10                ;549
000138  dc96              BGT      |L10.104|
00013a  f1090901          ADD      r9,r9,#1              ;541
                  |L10.318|
00013e  69a8              LDR      r0,[r5,#0x18]         ;541
000140  4548              CMP      r0,r9                 ;541
000142  f73faf64          BGT      |L10.14|
;;;565        	}
;;;566      	}
;;;567    }
000146  b00b              ADD      sp,sp,#0x2c
000148  e8bd8ff0          POP      {r4-r11,pc}
;;;568    //快速离散余弦变换
                          ENDP

                  |L10.332|
                          DCD      temp_dct1
                  |L10.336|
                          DCD      0x3fe00000

                          AREA ||i.jint_process_rows||, CODE, READONLY, ALIGN=1

                  jint_process_rows PROC
;;;473    //cinfo->inbuf填满有效数据 ,否则将不能得到正确的压缩数据
;;;474    void jint_process_rows(jpeg_compress_info *cinfo) 
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;475    {  
000004  4604              MOV      r4,r0
;;;476      	int mn; //当前缓冲里的MCU
;;;477      	JSAMPLE *mcu_start;  
;;;478    	int mcu_delta; 
;;;479      	JSAMPLE *pdata; 
;;;480    	//颜色转换选择调用(这里只做RGB到YCrCb的转换)
;;;481    	if(cinfo->in_color_space==JCS_RGB)
000006  7d20              LDRB     r0,[r4,#0x14]
000008  2802              CMP      r0,#2
00000a  d108              BNE      |L11.30|
;;;482    	jutl_cc_rgb2ycc(cinfo->inbuf,cinfo->inbuf_width*cinfo->inbuf_height);	
00000c  34ec              ADDS     r4,r4,#0xec
00000e  e9d42301          LDRD     r2,r3,[r4,#4]
000012  fb02f103          MUL      r1,r2,r3
000016  f85409ec          LDR      r0,[r4],#-0xec
00001a  f7fffffe          BL       jutl_cc_rgb2ycc
                  |L11.30|
;;;483    	//处理每个MCU数据,分割inbuf的数据到每个元件的dct表中,并降低每个元件的采样率
;;;484    	mcu_start=&cinfo->inbuf[0];
00001e  f8d470ec          LDR      r7,[r4,#0xec]
;;;485    	mcu_delta=cinfo->mcu_width*cinfo->num_comp*sizeof(JSAMPLE);
000022  69a1              LDR      r1,[r4,#0x18]
000024  f8d400b8          LDR      r0,[r4,#0xb8]
000028  fb00f801          MUL      r8,r0,r1
;;;486    	for(mn=0;mn<cinfo->mcu_per_row;mn++)
00002c  2600              MOVS     r6,#0
00002e  e080              B        |L11.306|
                  |L11.48|
;;;487    	{
;;;488    		//对于每个元件,降低采样率并保存到各个元件中
;;;489    		int cn;//元件计数器
;;;490    		for(cn=0;cn<cinfo->num_comp;cn++)
000030  2500              MOVS     r5,#0
000032  e076              B        |L11.290|
                  |L11.52|
;;;491    		{
;;;492    			JSAMPLE *comp_start=(JSAMPLE*)(mcu_start+cn);
000034  197a              ADDS     r2,r7,r5
000036  9201              STR      r2,[sp,#4]
;;;493    			//初始化采样间隔(sampledelta)数据指针
;;;494    			int h_samp_delta=cinfo->max_h_factor/cinfo->comp[cn].h_factor*cinfo->num_comp*sizeof(JSAMPLE);
000038  eb050bc5          ADD      r11,r5,r5,LSL #3
00003c  f104021c          ADD      r2,r4,#0x1c
000040  eb02028b          ADD      r2,r2,r11,LSL #2
000044  f8d4a0c4          LDR      r10,[r4,#0xc4]
000048  6852              LDR      r2,[r2,#4]
00004a  fb9af2f2          SDIV     r2,r10,r2
00004e  f8d4a018          LDR      r10,[r4,#0x18]
000052  fb02f30a          MUL      r3,r2,r10
;;;495    			int v_samp_delta=cinfo->max_v_factor/cinfo->comp[cn].v_factor*cinfo->num_comp*sizeof(JSAMPLE)*cinfo->inbuf_width;			
000056  eb050bc5          ADD      r11,r5,r5,LSL #3
00005a  f104021c          ADD      r2,r4,#0x1c
00005e  eb02028b          ADD      r2,r2,r11,LSL #2
000062  f8d4a0c8          LDR      r10,[r4,#0xc8]
000066  6892              LDR      r2,[r2,#8]
000068  fb9af2f2          SDIV     r2,r10,r2
00006c  f8d4a018          LDR      r10,[r4,#0x18]
000070  fb02f20a          MUL      r2,r2,r10
000074  f8d4a0f0          LDR      r10,[r4,#0xf0]
000078  fb02fc0a          MUL      r12,r2,r10
;;;496    			//对于每个块(block)
;;;497    			int bn;//块计数器
;;;498    			int pn;//数据指针
;;;499    			for(bn=0;bn<cinfo->comp[cn].num_dct_table;bn++)
00007c  2100              MOVS     r1,#0
00007e  e046              B        |L11.270|
                  |L11.128|
;;;500    			{
;;;501    				//初始化块开始地址
;;;502    				JSAMPLE *block_start=(JSAMPLE*)(comp_start+(bn%cinfo->comp[cn].h_factor)*DCTSIZE*h_samp_delta+(bn/cinfo->comp[cn].v_factor)*DCTSIZE*v_samp_delta);				
000080  eb050bc5          ADD      r11,r5,r5,LSL #3
000084  f104021c          ADD      r2,r4,#0x1c
000088  eb02028b          ADD      r2,r2,r11,LSL #2
00008c  6852              LDR      r2,[r2,#4]
00008e  fb91fbf2          SDIV     r11,r1,r2
000092  fb02121b          MLS      r2,r2,r11,r1
000096  ea4f0bc2          LSL      r11,r2,#3
00009a  9a01              LDR      r2,[sp,#4]
00009c  fb0b2203          MLA      r2,r11,r3,r2
0000a0  eb050bc5          ADD      r11,r5,r5,LSL #3
0000a4  f1040e1c          ADD      lr,r4,#0x1c
0000a8  eb0e0b8b          ADD      r11,lr,r11,LSL #2
0000ac  f8dbb008          LDR      r11,[r11,#8]
0000b0  fb91fbfb          SDIV     r11,r1,r11
0000b4  ea4f0bcb          LSL      r11,r11,#3
0000b8  fb0b2a0c          MLA      r10,r11,r12,r2
;;;503    				DCTVAL *dct=(DCTVAL*)&cinfo->comp[cn].dct_table[bn];//dct表元素
0000bc  eb050bc5          ADD      r11,r5,r5,LSL #3
0000c0  4672              MOV      r2,lr
0000c2  eb02028b          ADD      r2,r2,r11,LSL #2
0000c6  69d2              LDR      r2,[r2,#0x1c]
0000c8  eb0212c1          ADD      r2,r2,r1,LSL #7
0000cc  9200              STR      r2,[sp,#0]
;;;504    				for(pn=0;pn<DCTSIZE2;pn++)//对于每个元素
0000ce  2000              MOVS     r0,#0
0000d0  e01a              B        |L11.264|
                  |L11.210|
;;;505    				{				
;;;506    					if(pn%DCTSIZE==0)pdata=(JSAMPLE*)(pn/DCTSIZE*v_samp_delta+block_start);
0000d2  ea4f7be0          ASR      r11,r0,#31
0000d6  eb007b5b          ADD      r11,r0,r11,LSR #29
0000da  ea4f0beb          ASR      r11,r11,#3
0000de  eba00bcb          SUB      r11,r0,r11,LSL #3
0000e2  f1bb0f00          CMP      r11,#0
0000e6  d108              BNE      |L11.250|
0000e8  4602              MOV      r2,r0
0000ea  ea4f7be0          ASR      r11,r0,#31
0000ee  eb007b5b          ADD      r11,r0,r11,LSR #29
0000f2  ea4f0beb          ASR      r11,r11,#3
0000f6  fb0ba90c          MLA      r9,r11,r12,r10
                  |L11.250|
;;;507    					dct[pn]=*pdata;
0000fa  f899b000          LDRB     r11,[r9,#0]
0000fe  9a00              LDR      r2,[sp,#0]
000100  f822b010          STRH     r11,[r2,r0,LSL #1]
;;;508    					pdata+=h_samp_delta;
000104  4499              ADD      r9,r9,r3
000106  1c40              ADDS     r0,r0,#1              ;504
                  |L11.264|
000108  2840              CMP      r0,#0x40              ;504
00010a  dbe2              BLT      |L11.210|
00010c  1c49              ADDS     r1,r1,#1              ;499
                  |L11.270|
00010e  eb050ac5          ADD      r10,r5,r5,LSL #3      ;499
000112  f104021c          ADD      r2,r4,#0x1c           ;499
000116  eb02028a          ADD      r2,r2,r10,LSL #2      ;499
00011a  6992              LDR      r2,[r2,#0x18]         ;499
00011c  428a              CMP      r2,r1                 ;499
00011e  dcaf              BGT      |L11.128|
000120  1c6d              ADDS     r5,r5,#1              ;490
                  |L11.290|
000122  69a0              LDR      r0,[r4,#0x18]         ;490
000124  42a8              CMP      r0,r5                 ;490
000126  dc85              BGT      |L11.52|
;;;509    				}
;;;510    			}
;;;511    		}//颜色元件处理循环结束
;;;512    		mcu_start+=mcu_delta;		
000128  4447              ADD      r7,r7,r8
;;;513    		jint_process_mcu(cinfo);//处理当前MCU数据
00012a  4620              MOV      r0,r4
00012c  f7fffffe          BL       jint_process_mcu
000130  1c76              ADDS     r6,r6,#1              ;486
                  |L11.306|
000132  f8d400ac          LDR      r0,[r4,#0xac]         ;486
000136  42b0              CMP      r0,r6                 ;486
000138  f73faf7a          BGT      |L11.48|
;;;514    	}
;;;515    }
00013c  e8bd9ffc          POP      {r2-r12,pc}
;;;516    //RGB转YUV
                          ENDP


                          AREA ||i.jint_std_huff_tables||, CODE, READONLY, ALIGN=2

                  jint_std_huff_tables PROC
;;;184    //设置标准huffman表
;;;185    void jint_std_huff_tables (jpeg_compress_info *cinfo) 
000000  b538              PUSH     {r3-r5,lr}
;;;186    { 
000002  4604              MOV      r4,r0
;;;187      	jint_add_huff_table(cinfo,0,DC_HUFF_TBL,bits_dc_luminance,val_dc_luminance);
000004  4810              LDR      r0,|L12.72|
000006  4b11              LDR      r3,|L12.76|
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  9000              STR      r0,[sp,#0]
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       jint_add_huff_table
;;;188      	jint_add_huff_table(cinfo,0,AC_HUFF_TBL,bits_ac_luminance,val_ac_luminance);
000014  480e              LDR      r0,|L12.80|
000016  4b0f              LDR      r3,|L12.84|
000018  2201              MOVS     r2,#1
00001a  2100              MOVS     r1,#0
00001c  9000              STR      r0,[sp,#0]
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       jint_add_huff_table
;;;189      	jint_add_huff_table(cinfo,1,DC_HUFF_TBL,bits_dc_chrominance,val_dc_chrominance);
000024  480c              LDR      r0,|L12.88|
000026  4b0d              LDR      r3,|L12.92|
000028  2200              MOVS     r2,#0
00002a  2101              MOVS     r1,#1
00002c  9000              STR      r0,[sp,#0]
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       jint_add_huff_table
;;;190      	jint_add_huff_table(cinfo,1,AC_HUFF_TBL,bits_ac_chrominance,val_ac_chrominance);
000034  480a              LDR      r0,|L12.96|
000036  4b0b              LDR      r3,|L12.100|
000038  2201              MOVS     r2,#1
00003a  4611              MOV      r1,r2
00003c  9000              STR      r0,[sp,#0]
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       jint_add_huff_table
;;;191    }
000044  bd38              POP      {r3-r5,pc}
;;;192    //添加huffman表
                          ENDP

000046  0000              DCW      0x0000
                  |L12.72|
                          DCD      val_dc_luminance
                  |L12.76|
                          DCD      bits_dc_luminance
                  |L12.80|
                          DCD      val_ac_luminance
                  |L12.84|
                          DCD      bits_ac_luminance
                  |L12.88|
                          DCD      val_dc_chrominance
                  |L12.92|
                          DCD      bits_dc_chrominance
                  |L12.96|
                          DCD      val_ac_chrominance
                  |L12.100|
                          DCD      bits_ac_chrominance

                          AREA ||i.jint_std_quant_tables||, CODE, READONLY, ALIGN=2

                  jint_std_quant_tables PROC
;;;159    //设置标准量化表
;;;160    void jint_std_quant_tables(jpeg_compress_info *cinfo)
000000  b510              PUSH     {r4,lr}
;;;161    {
000002  4604              MOV      r4,r0
;;;162      	jint_add_quant_table(cinfo,0,std_luminance_quant_tbl,cinfo->quality);
000004  4a06              LDR      r2,|L13.32|
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  6923              LDR      r3,[r4,#0x10]
00000c  f7fffffe          BL       jint_add_quant_table
;;;163      	jint_add_quant_table(cinfo,1,std_chrominance_quant_tbl,cinfo->quality);
000010  4a04              LDR      r2,|L13.36|
000012  2101              MOVS     r1,#1
000014  4620              MOV      r0,r4
000016  6923              LDR      r3,[r4,#0x10]
000018  f7fffffe          BL       jint_add_quant_table
;;;164    }
00001c  bd10              POP      {r4,pc}
;;;165    //添加量化表
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      std_luminance_quant_tbl
                  |L13.36|
                          DCD      std_chrominance_quant_tbl

                          AREA ||i.jmkr_write_end||, CODE, READONLY, ALIGN=1

                  jmkr_write_end PROC
;;;463    //写文件结束标志
;;;464    void jmkr_write_end(jpeg_compress_info *cinfo) 
000000  b510              PUSH     {r4,lr}
;;;465    {
000002  4604              MOV      r4,r0
;;;466      	jutl_write_byte(0xFF,cinfo->output,cinfo  );
000004  4622              MOV      r2,r4
000006  20ff              MOVS     r0,#0xff
000008  68a1              LDR      r1,[r4,#8]
00000a  f7fffffe          BL       jutl_write_byte
;;;467    	cinfo->state =JC_FINISH;//状态为完成
00000e  2003              MOVS     r0,#3
000010  f88400fc          STRB     r0,[r4,#0xfc]
;;;468      	jutl_write_byte(EOI,cinfo->output,cinfo  );	
000014  4622              MOV      r2,r4
000016  20d9              MOVS     r0,#0xd9
000018  68a1              LDR      r1,[r4,#8]
00001a  f7fffffe          BL       jutl_write_byte
;;;469    }
00001e  bd10              POP      {r4,pc}
;;;470    ///////////////////////////////////////////////////////////////////////////////////////////
                          ENDP


                          AREA ||i.jmkr_write_frame_head||, CODE, READONLY, ALIGN=1

                  jmkr_write_frame_head PROC
;;;369    //写入帧头
;;;370    void jmkr_write_frame_head(jpeg_compress_info *cinfo)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;371    {
000004  4604              MOV      r4,r0
;;;372      	int i;
;;;373      	u16 Lf,X,Y;
;;;374      	u8  P,Nf,C,H,V,Tq;
;;;375    	jutl_write_byte(0xFF,cinfo->output,cinfo  );
000006  4622              MOV      r2,r4
000008  20ff              MOVS     r0,#0xff
00000a  68a1              LDR      r1,[r4,#8]
00000c  f7fffffe          BL       jutl_write_byte
;;;376    	jutl_write_byte(SOF0,cinfo->output,cinfo  );
000010  4622              MOV      r2,r4
000012  20c0              MOVS     r0,#0xc0
000014  68a1              LDR      r1,[r4,#8]
000016  f7fffffe          BL       jutl_write_byte
;;;377    	Nf=cinfo->num_comp;
00001a  7e26              LDRB     r6,[r4,#0x18]
;;;378    	P=cinfo->precision;
00001c  7b20              LDRB     r0,[r4,#0xc]
00001e  9002              STR      r0,[sp,#8]
;;;379    	X=cinfo->image_width;
000020  8820              LDRH     r0,[r4,#0]
000022  fa1ff880          UXTH     r8,r0
;;;380    	Y=cinfo->image_height;
000026  88a0              LDRH     r0,[r4,#4]
000028  fa1ff980          UXTH     r9,r0
;;;381    	Lf=8+3*Nf;
00002c  eb060046          ADD      r0,r6,r6,LSL #1
000030  f1000708          ADD      r7,r0,#8
;;;382    	jutl_write_byte(Lf>>8,cinfo->output,cinfo  );
000034  1238              ASRS     r0,r7,#8
000036  4622              MOV      r2,r4
000038  68a1              LDR      r1,[r4,#8]
00003a  f7fffffe          BL       jutl_write_byte
;;;383    	jutl_write_byte(Lf&0xFF,cinfo->output,cinfo  );
00003e  b2f8              UXTB     r0,r7
000040  4622              MOV      r2,r4
000042  68a1              LDR      r1,[r4,#8]
000044  f7fffffe          BL       jutl_write_byte
;;;384    	jutl_write_byte(P,cinfo->output,cinfo  );
000048  4622              MOV      r2,r4
00004a  68a1              LDR      r1,[r4,#8]
00004c  9802              LDR      r0,[sp,#8]
00004e  f7fffffe          BL       jutl_write_byte
;;;385    	jutl_write_byte(Y>>8,cinfo->output,cinfo  );
000052  ea4f2029          ASR      r0,r9,#8
000056  4622              MOV      r2,r4
000058  68a1              LDR      r1,[r4,#8]
00005a  f7fffffe          BL       jutl_write_byte
;;;386    	jutl_write_byte(Y&0xFF,cinfo->output,cinfo  );
00005e  f00900ff          AND      r0,r9,#0xff
000062  4622              MOV      r2,r4
000064  68a1              LDR      r1,[r4,#8]
000066  f7fffffe          BL       jutl_write_byte
;;;387    	jutl_write_byte(X>>8,cinfo->output,cinfo  );
00006a  ea4f2028          ASR      r0,r8,#8
00006e  4622              MOV      r2,r4
000070  68a1              LDR      r1,[r4,#8]
000072  f7fffffe          BL       jutl_write_byte
;;;388    	jutl_write_byte(X&0xFF,cinfo->output,cinfo  );
000076  f00800ff          AND      r0,r8,#0xff
00007a  4622              MOV      r2,r4
00007c  68a1              LDR      r1,[r4,#8]
00007e  f7fffffe          BL       jutl_write_byte
;;;389    	jutl_write_byte(Nf,cinfo->output,cinfo  );
000082  4622              MOV      r2,r4
000084  4630              MOV      r0,r6
000086  68a1              LDR      r1,[r4,#8]
000088  f7fffffe          BL       jutl_write_byte
;;;390    	for(i=0;i<Nf;i++)
00008c  2500              MOVS     r5,#0
00008e  e02e              B        |L15.238|
                  |L15.144|
;;;391    	{
;;;392    		C=cinfo->comp[i].comp_id;
000090  eb0501c5          ADD      r1,r5,r5,LSL #3
000094  f104001c          ADD      r0,r4,#0x1c
000098  f810a021          LDRB     r10,[r0,r1,LSL #2]
;;;393    		H=cinfo->comp[i].h_factor;
00009c  eb0501c5          ADD      r1,r5,r5,LSL #3
0000a0  eb000081          ADD      r0,r0,r1,LSL #2
0000a4  f890b004          LDRB     r11,[r0,#4]
;;;394    		V=cinfo->comp[i].v_factor;
0000a8  eb0501c5          ADD      r1,r5,r5,LSL #3
0000ac  f104001c          ADD      r0,r4,#0x1c
0000b0  eb000081          ADD      r0,r0,r1,LSL #2
0000b4  7a02              LDRB     r2,[r0,#8]
0000b6  9201              STR      r2,[sp,#4]
;;;395    		Tq=cinfo->comp[i].quant_tbl_no;
0000b8  eb0501c5          ADD      r1,r5,r5,LSL #3
0000bc  f104001c          ADD      r0,r4,#0x1c
0000c0  eb000081          ADD      r0,r0,r1,LSL #2
0000c4  7b00              LDRB     r0,[r0,#0xc]
0000c6  9000              STR      r0,[sp,#0]
;;;396    		jutl_write_byte(C,cinfo->output,cinfo  );
0000c8  4622              MOV      r2,r4
0000ca  4650              MOV      r0,r10
0000cc  68a1              LDR      r1,[r4,#8]
0000ce  f7fffffe          BL       jutl_write_byte
;;;397    		jutl_write_byte(((H<<4)|V),cinfo->output,cinfo  );
0000d2  68a1              LDR      r1,[r4,#8]
0000d4  9a01              LDR      r2,[sp,#4]
0000d6  ea42120b          ORR      r2,r2,r11,LSL #4
0000da  b2d0              UXTB     r0,r2
0000dc  4622              MOV      r2,r4
0000de  f7fffffe          BL       jutl_write_byte
;;;398    		jutl_write_byte(Tq,cinfo->output,cinfo  );
0000e2  4622              MOV      r2,r4
0000e4  68a1              LDR      r1,[r4,#8]
0000e6  9800              LDR      r0,[sp,#0]
0000e8  f7fffffe          BL       jutl_write_byte
0000ec  1c6d              ADDS     r5,r5,#1              ;390
                  |L15.238|
0000ee  42b5              CMP      r5,r6                 ;390
0000f0  dbce              BLT      |L15.144|
;;;399    	}
;;;400    }
0000f2  e8bd8ffe          POP      {r1-r11,pc}
;;;401    //写入哈夫曼表
                          ENDP


                          AREA ||i.jmkr_write_huff_table||, CODE, READONLY, ALIGN=1

                  jmkr_write_huff_table PROC
;;;401    //写入哈夫曼表
;;;402    void jmkr_write_huff_table(jpeg_compress_info *cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;403    {
000004  4604              MOV      r4,r0
;;;404      	int i,j,num_val;
;;;405      	u16 Lh;
;;;406    	for(i=0;i<NUM_HUFF_TBLS;i++)//输出直流HUFFMAN码
000006  2600              MOVS     r6,#0
000008  e04f              B        |L16.170|
                  |L16.10|
;;;407    	{
;;;408    		num_val=0;
00000a  2700              MOVS     r7,#0
;;;409    		if(!cinfo->dc_huff_table[i])continue;
00000c  f10400cc          ADD      r0,r4,#0xcc
000010  f8500026          LDR      r0,[r0,r6,LSL #2]
000014  b900              CBNZ     r0,|L16.24|
000016  e047              B        |L16.168|
                  |L16.24|
;;;410    		jutl_write_byte(0xFF,cinfo->output,cinfo  );
000018  4622              MOV      r2,r4
00001a  20ff              MOVS     r0,#0xff
00001c  68a1              LDR      r1,[r4,#8]
00001e  f7fffffe          BL       jutl_write_byte
;;;411    		jutl_write_byte(DHT,cinfo->output,cinfo  );
000022  4622              MOV      r2,r4
000024  20c4              MOVS     r0,#0xc4
000026  68a1              LDR      r1,[r4,#8]
000028  f7fffffe          BL       jutl_write_byte
;;;412    		for(j=1;j<=16;j++)num_val+=cinfo->dc_huff_table[i]->bits[j];
00002c  2501              MOVS     r5,#1
00002e  e006              B        |L16.62|
                  |L16.48|
000030  f10400cc          ADD      r0,r4,#0xcc
000034  f8500026          LDR      r0,[r0,r6,LSL #2]
000038  5d40              LDRB     r0,[r0,r5]
00003a  4407              ADD      r7,r7,r0
00003c  1c6d              ADDS     r5,r5,#1
                  |L16.62|
00003e  2d10              CMP      r5,#0x10
000040  ddf6              BLE      |L16.48|
;;;413    		Lh=3+16+num_val;//长度,固定为43h
000042  f1070013          ADD      r0,r7,#0x13
000046  fa1ff880          UXTH     r8,r0
;;;414    		jutl_write_byte(Lh>>8,cinfo->output,cinfo  );
00004a  ea4f2028          ASR      r0,r8,#8
00004e  4622              MOV      r2,r4
000050  68a1              LDR      r1,[r4,#8]
000052  f7fffffe          BL       jutl_write_byte
;;;415    		jutl_write_byte(Lh&0xFF,cinfo->output,cinfo  );
000056  f00800ff          AND      r0,r8,#0xff
00005a  4622              MOV      r2,r4
00005c  68a1              LDR      r1,[r4,#8]
00005e  f7fffffe          BL       jutl_write_byte
;;;416    		jutl_write_byte(i,cinfo->output,cinfo  );//输出ID
000062  b2f0              UXTB     r0,r6
000064  4622              MOV      r2,r4
000066  68a1              LDR      r1,[r4,#8]
000068  f7fffffe          BL       jutl_write_byte
;;;417    		for(j=1;j<=16;j++)jutl_write_byte(cinfo->dc_huff_table[i]->bits[j],cinfo->output,cinfo  );//输出bits
00006c  2501              MOVS     r5,#1
00006e  e009              B        |L16.132|
                  |L16.112|
000070  f10402cc          ADD      r2,r4,#0xcc
000074  f8522026          LDR      r2,[r2,r6,LSL #2]
000078  5d50              LDRB     r0,[r2,r5]
00007a  4622              MOV      r2,r4
00007c  68a1              LDR      r1,[r4,#8]
00007e  f7fffffe          BL       jutl_write_byte
000082  1c6d              ADDS     r5,r5,#1
                  |L16.132|
000084  2d10              CMP      r5,#0x10
000086  ddf3              BLE      |L16.112|
;;;418    		for(j=0;j<num_val;j++)jutl_write_byte(cinfo->dc_huff_table[i]->huffval[j],cinfo->output,cinfo  );
000088  2500              MOVS     r5,#0
00008a  e00a              B        |L16.162|
                  |L16.140|
00008c  f10402cc          ADD      r2,r4,#0xcc
000090  f8522026          LDR      r2,[r2,r6,LSL #2]
000094  3211              ADDS     r2,r2,#0x11
000096  5d50              LDRB     r0,[r2,r5]
000098  4622              MOV      r2,r4
00009a  68a1              LDR      r1,[r4,#8]
00009c  f7fffffe          BL       jutl_write_byte
0000a0  1c6d              ADDS     r5,r5,#1
                  |L16.162|
0000a2  42bd              CMP      r5,r7
0000a4  dbf2              BLT      |L16.140|
0000a6  bf00              NOP                            ;409
                  |L16.168|
0000a8  1c76              ADDS     r6,r6,#1              ;406
                  |L16.170|
0000aa  2e02              CMP      r6,#2                 ;406
0000ac  dbad              BLT      |L16.10|
;;;419    	}
;;;420    	for(i=0;i<NUM_HUFF_TBLS;i++)//输出交流HUFFMAN码
0000ae  2600              MOVS     r6,#0
0000b0  e051              B        |L16.342|
                  |L16.178|
;;;421    	{
;;;422    		num_val=0;
0000b2  2700              MOVS     r7,#0
;;;423    		if(!cinfo->ac_huff_table[i])continue;
0000b4  f10400d4          ADD      r0,r4,#0xd4
0000b8  f8500026          LDR      r0,[r0,r6,LSL #2]
0000bc  b900              CBNZ     r0,|L16.192|
0000be  e049              B        |L16.340|
                  |L16.192|
;;;424    		jutl_write_byte(0xFF,cinfo->output,cinfo  );
0000c0  4622              MOV      r2,r4
0000c2  20ff              MOVS     r0,#0xff
0000c4  68a1              LDR      r1,[r4,#8]
0000c6  f7fffffe          BL       jutl_write_byte
;;;425    		jutl_write_byte(DHT,cinfo->output,cinfo  );
0000ca  4622              MOV      r2,r4
0000cc  20c4              MOVS     r0,#0xc4
0000ce  68a1              LDR      r1,[r4,#8]
0000d0  f7fffffe          BL       jutl_write_byte
;;;426    		for(j=1;j<=16;j++)num_val+=cinfo->ac_huff_table[i]->bits[j];
0000d4  2501              MOVS     r5,#1
0000d6  e006              B        |L16.230|
                  |L16.216|
0000d8  f10400d4          ADD      r0,r4,#0xd4
0000dc  f8500026          LDR      r0,[r0,r6,LSL #2]
0000e0  5d40              LDRB     r0,[r0,r5]
0000e2  4407              ADD      r7,r7,r0
0000e4  1c6d              ADDS     r5,r5,#1
                  |L16.230|
0000e6  2d10              CMP      r5,#0x10
0000e8  ddf6              BLE      |L16.216|
;;;427    		Lh=3+16+num_val;//长度,固定为43h
0000ea  f1070013          ADD      r0,r7,#0x13
0000ee  fa1ff880          UXTH     r8,r0
;;;428    		jutl_write_byte(Lh>>8,cinfo->output,cinfo  );
0000f2  ea4f2028          ASR      r0,r8,#8
0000f6  4622              MOV      r2,r4
0000f8  68a1              LDR      r1,[r4,#8]
0000fa  f7fffffe          BL       jutl_write_byte
;;;429    		jutl_write_byte(Lh&0xFF,cinfo->output,cinfo  );
0000fe  f00800ff          AND      r0,r8,#0xff
000102  4622              MOV      r2,r4
000104  68a1              LDR      r1,[r4,#8]
000106  f7fffffe          BL       jutl_write_byte
;;;430    		jutl_write_byte((0x10|i),cinfo->output,cinfo  );//输出ID
00010a  b2f2              UXTB     r2,r6
00010c  f0420010          ORR      r0,r2,#0x10
000110  4622              MOV      r2,r4
000112  68a1              LDR      r1,[r4,#8]
000114  f7fffffe          BL       jutl_write_byte
;;;431    		for(j=1;j<=16;j++)jutl_write_byte(cinfo->ac_huff_table[i]->bits[j],cinfo->output,cinfo  );//输出bits
000118  2501              MOVS     r5,#1
00011a  e009              B        |L16.304|
                  |L16.284|
00011c  f10402d4          ADD      r2,r4,#0xd4
000120  f8522026          LDR      r2,[r2,r6,LSL #2]
000124  5d50              LDRB     r0,[r2,r5]
000126  4622              MOV      r2,r4
000128  68a1              LDR      r1,[r4,#8]
00012a  f7fffffe          BL       jutl_write_byte
00012e  1c6d              ADDS     r5,r5,#1
                  |L16.304|
000130  2d10              CMP      r5,#0x10
000132  ddf3              BLE      |L16.284|
;;;432    		for(j=0;j<num_val;j++)jutl_write_byte(cinfo->ac_huff_table[i]->huffval[j],cinfo->output,cinfo  );
000134  2500              MOVS     r5,#0
000136  e00a              B        |L16.334|
                  |L16.312|
000138  f10402d4          ADD      r2,r4,#0xd4
00013c  f8522026          LDR      r2,[r2,r6,LSL #2]
000140  3211              ADDS     r2,r2,#0x11
000142  5d50              LDRB     r0,[r2,r5]
000144  4622              MOV      r2,r4
000146  68a1              LDR      r1,[r4,#8]
000148  f7fffffe          BL       jutl_write_byte
00014c  1c6d              ADDS     r5,r5,#1
                  |L16.334|
00014e  42bd              CMP      r5,r7
000150  dbf2              BLT      |L16.312|
000152  bf00              NOP                            ;423
                  |L16.340|
000154  1c76              ADDS     r6,r6,#1              ;420
                  |L16.342|
000156  2e02              CMP      r6,#2                 ;420
000158  dbab              BLT      |L16.178|
;;;433    	}
;;;434    }
00015a  e8bd81f0          POP      {r4-r8,pc}
;;;435    //写入扫描开始标志
                          ENDP


                          AREA ||i.jmkr_write_image_start||, CODE, READONLY, ALIGN=1

                  jmkr_write_image_start PROC
;;;338    //写入文件开始标志 
;;;339    void jmkr_write_image_start(jpeg_compress_info *cinfo)
000000  b510              PUSH     {r4,lr}
;;;340    {
000002  4604              MOV      r4,r0
;;;341      	jutl_write_byte(0xFF,cinfo->output,cinfo);
000004  4622              MOV      r2,r4
000006  20ff              MOVS     r0,#0xff
000008  68a1              LDR      r1,[r4,#8]
00000a  f7fffffe          BL       jutl_write_byte
;;;342      	jutl_write_byte(SOI,cinfo->output,cinfo);
00000e  4622              MOV      r2,r4
000010  20d8              MOVS     r0,#0xd8
000012  68a1              LDR      r1,[r4,#8]
000014  f7fffffe          BL       jutl_write_byte
;;;343    }
000018  bd10              POP      {r4,pc}
;;;344    //写入APP0应用数据段
                          ENDP


                          AREA ||i.jmkr_write_jfif||, CODE, READONLY, ALIGN=2

                  jmkr_write_jfif PROC
;;;344    //写入APP0应用数据段
;;;345    void jmkr_write_jfif(jpeg_compress_info *cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;346    {
000002  4604              MOV      r4,r0
;;;347      	int i;
;;;348      	for (i=0;i<18;i++)jutl_write_byte(jfcode[i], cinfo->output,cinfo);
000004  2500              MOVS     r5,#0
000006  e006              B        |L18.22|
                  |L18.8|
000008  4a04              LDR      r2,|L18.28|
00000a  5d50              LDRB     r0,[r2,r5]
00000c  4622              MOV      r2,r4
00000e  68a1              LDR      r1,[r4,#8]
000010  f7fffffe          BL       jutl_write_byte
000014  1c6d              ADDS     r5,r5,#1
                  |L18.22|
000016  2d12              CMP      r5,#0x12
000018  dbf6              BLT      |L18.8|
;;;349    }
00001a  bd70              POP      {r4-r6,pc}
;;;350    //写入量化表
                          ENDP

                  |L18.28|
                          DCD      jfcode

                          AREA ||i.jmkr_write_quant_table||, CODE, READONLY, ALIGN=1

                  jmkr_write_quant_table PROC
;;;350    //写入量化表
;;;351    void jmkr_write_quant_table(jpeg_compress_info *cinfo)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;352    {
000004  4604              MOV      r4,r0
;;;353      	int i, j;
;;;354      	for (i=0;i<NUM_QUANT_TBLS;i++) 
000006  2500              MOVS     r5,#0
000008  e030              B        |L19.108|
                  |L19.10|
;;;355      	{
;;;356    	    if (!cinfo->quant_table[i])continue;	      
00000a  f10400dc          ADD      r0,r4,#0xdc
00000e  f8500025          LDR      r0,[r0,r5,LSL #2]
000012  b900              CBNZ     r0,|L19.22|
000014  e029              B        |L19.106|
                  |L19.22|
;;;357    	    jutl_write_byte(0xFF,cinfo->output,cinfo);
000016  4622              MOV      r2,r4
000018  20ff              MOVS     r0,#0xff
00001a  68a1              LDR      r1,[r4,#8]
00001c  f7fffffe          BL       jutl_write_byte
;;;358    	    jutl_write_byte(DQT,cinfo->output,cinfo);
000020  4622              MOV      r2,r4
000022  20db              MOVS     r0,#0xdb
000024  68a1              LDR      r1,[r4,#8]
000026  f7fffffe          BL       jutl_write_byte
;;;359    	    jutl_write_byte(0x00,cinfo->output,cinfo);
00002a  4622              MOV      r2,r4
00002c  2000              MOVS     r0,#0
00002e  68a1              LDR      r1,[r4,#8]
000030  f7fffffe          BL       jutl_write_byte
;;;360    	    jutl_write_byte(0x43,cinfo->output,cinfo );//长度:固定为43h
000034  4622              MOV      r2,r4
000036  2043              MOVS     r0,#0x43
000038  68a1              LDR      r1,[r4,#8]
00003a  f7fffffe          BL       jutl_write_byte
;;;361    	    jutl_write_byte(i&0xFF,cinfo->output,cinfo );//ouput Pq & Tq
00003e  b2e8              UXTB     r0,r5
000040  4622              MOV      r2,r4
000042  68a1              LDR      r1,[r4,#8]
000044  f7fffffe          BL       jutl_write_byte
;;;362    	    for (j=0;j<DCTSIZE2;j++) 
000048  2600              MOVS     r6,#0
00004a  e00b              B        |L19.100|
                  |L19.76|
;;;363    	    {
;;;364    	      	u8 Q=cinfo->quant_table[i]->quantval[j];
00004c  f10400dc          ADD      r0,r4,#0xdc
000050  f8500025          LDR      r0,[r0,r5,LSL #2]
000054  f8107016          LDRB     r7,[r0,r6,LSL #1]
;;;365    	      	jutl_write_byte(Q,cinfo->output,cinfo  );
000058  4622              MOV      r2,r4
00005a  4638              MOV      r0,r7
00005c  68a1              LDR      r1,[r4,#8]
00005e  f7fffffe          BL       jutl_write_byte
000062  1c76              ADDS     r6,r6,#1              ;362
                  |L19.100|
000064  2e40              CMP      r6,#0x40              ;362
000066  dbf1              BLT      |L19.76|
000068  bf00              NOP                            ;356
                  |L19.106|
00006a  1c6d              ADDS     r5,r5,#1              ;354
                  |L19.108|
00006c  2d04              CMP      r5,#4                 ;354
00006e  dbcc              BLT      |L19.10|
;;;366    	    }
;;;367      	}
;;;368    }
000070  e8bd81f0          POP      {r4-r8,pc}
;;;369    //写入帧头
                          ENDP


                          AREA ||i.jmkr_write_scan_head||, CODE, READONLY, ALIGN=1

                  jmkr_write_scan_head PROC
;;;435    //写入扫描开始标志
;;;436    void jmkr_write_scan_head(jpeg_compress_info *cinfo) 
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;437    {
000004  4604              MOV      r4,r0
;;;438      	int i;
;;;439      	u16 Ls;
;;;440      	u8 Ns,Ss,Se,Ah,Al,Cs,Td,Ta;
;;;441    	jutl_write_byte(0xFF,cinfo->output,cinfo  );
000006  4622              MOV      r2,r4
000008  20ff              MOVS     r0,#0xff
00000a  68a1              LDR      r1,[r4,#8]
00000c  f7fffffe          BL       jutl_write_byte
;;;442    	jutl_write_byte(SOS,cinfo->output,cinfo  );
000010  4622              MOV      r2,r4
000012  20da              MOVS     r0,#0xda
000014  68a1              LDR      r1,[r4,#8]
000016  f7fffffe          BL       jutl_write_byte
;;;443    	Ns=cinfo->num_comp;
00001a  7e26              LDRB     r6,[r4,#0x18]
;;;444    	Ls=6+2*Ns;
00001c  0070              LSLS     r0,r6,#1
00001e  1d87              ADDS     r7,r0,#6
;;;445    	Ss=0;//定值!不改变
000020  2000              MOVS     r0,#0
000022  9002              STR      r0,[sp,#8]
;;;446    	Se=63;
000024  203f              MOVS     r0,#0x3f
000026  9001              STR      r0,[sp,#4]
;;;447    	Ah=Al=0;
000028  2000              MOVS     r0,#0
00002a  4683              MOV      r11,r0
00002c  9000              STR      r0,[sp,#0]
;;;448    	jutl_write_byte(Ls>>8,cinfo->output,cinfo  );
00002e  1238              ASRS     r0,r7,#8
000030  4622              MOV      r2,r4
000032  68a1              LDR      r1,[r4,#8]
000034  f7fffffe          BL       jutl_write_byte
;;;449    	jutl_write_byte(Ls&0xFF,cinfo->output,cinfo  );
000038  b2f8              UXTB     r0,r7
00003a  4622              MOV      r2,r4
00003c  68a1              LDR      r1,[r4,#8]
00003e  f7fffffe          BL       jutl_write_byte
;;;450    	jutl_write_byte(Ns,cinfo->output,cinfo  );
000042  4622              MOV      r2,r4
000044  4630              MOV      r0,r6
000046  68a1              LDR      r1,[r4,#8]
000048  f7fffffe          BL       jutl_write_byte
;;;451    	for(i=0;i<Ns;i++)
00004c  2500              MOVS     r5,#0
00004e  e020              B        |L20.146|
                  |L20.80|
;;;452    	{
;;;453    		Cs=cinfo->comp[i].comp_id;
000050  eb0501c5          ADD      r1,r5,r5,LSL #3
000054  f104001c          ADD      r0,r4,#0x1c
000058  f8108021          LDRB     r8,[r0,r1,LSL #2]
;;;454    		Td=cinfo->comp[i].dc_tbl_no;
00005c  eb0501c5          ADD      r1,r5,r5,LSL #3
000060  eb000081          ADD      r0,r0,r1,LSL #2
000064  f8909010          LDRB     r9,[r0,#0x10]
;;;455    		Ta=cinfo->comp[i].ac_tbl_no;
000068  eb0501c5          ADD      r1,r5,r5,LSL #3
00006c  f104001c          ADD      r0,r4,#0x1c
000070  eb000081          ADD      r0,r0,r1,LSL #2
000074  f890a014          LDRB     r10,[r0,#0x14]
;;;456    		jutl_write_byte(Cs,cinfo->output,cinfo  );
000078  4622              MOV      r2,r4
00007a  4640              MOV      r0,r8
00007c  68a1              LDR      r1,[r4,#8]
00007e  f7fffffe          BL       jutl_write_byte
;;;457    		jutl_write_byte((Td<<4|Ta),cinfo->output,cinfo  );
000082  ea4a1209          ORR      r2,r10,r9,LSL #4
000086  b2d0              UXTB     r0,r2
000088  4622              MOV      r2,r4
00008a  68a1              LDR      r1,[r4,#8]
00008c  f7fffffe          BL       jutl_write_byte
000090  1c6d              ADDS     r5,r5,#1              ;451
                  |L20.146|
000092  42b5              CMP      r5,r6                 ;451
000094  dbdc              BLT      |L20.80|
;;;458    	}
;;;459    	jutl_write_byte(Ss,cinfo->output,cinfo  );
000096  4622              MOV      r2,r4
000098  68a1              LDR      r1,[r4,#8]
00009a  9802              LDR      r0,[sp,#8]
00009c  f7fffffe          BL       jutl_write_byte
;;;460    	jutl_write_byte(Se,cinfo->output,cinfo  );
0000a0  4622              MOV      r2,r4
0000a2  68a1              LDR      r1,[r4,#8]
0000a4  9801              LDR      r0,[sp,#4]
0000a6  f7fffffe          BL       jutl_write_byte
;;;461    	jutl_write_byte(((Ah<<4)|Al),cinfo->output,cinfo  );
0000aa  68a1              LDR      r1,[r4,#8]
0000ac  9a00              LDR      r2,[sp,#0]
0000ae  ea42120b          ORR      r2,r2,r11,LSL #4
0000b2  b2d0              UXTB     r0,r2
0000b4  4622              MOV      r2,r4
0000b6  f7fffffe          BL       jutl_write_byte
;;;462    }
0000ba  e8bd8ffe          POP      {r1-r11,pc}
;;;463    //写文件结束标志
                          ENDP


                          AREA ||i.jmkr_write_start||, CODE, READONLY, ALIGN=1

                  jmkr_write_start PROC
;;;328    //写头信息
;;;329    void jmkr_write_start(jpeg_compress_info *cinfo) 
000000  b510              PUSH     {r4,lr}
;;;330    {
000002  4604              MOV      r4,r0
;;;331      	jmkr_write_image_start(cinfo);//文件开始标志
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       jmkr_write_image_start
;;;332      	jmkr_write_jfif(cinfo);//APP0信息
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       jmkr_write_jfif
;;;333      	jmkr_write_quant_table(cinfo);//quant表
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       jmkr_write_quant_table
;;;334      	jmkr_write_frame_head(cinfo);//帧头
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       jmkr_write_frame_head
;;;335      	jmkr_write_huff_table(cinfo);//哈夫曼表
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       jmkr_write_huff_table
;;;336      	jmkr_write_scan_head(cinfo);//扫描开始
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       jmkr_write_scan_head
;;;337    }
000028  bd10              POP      {r4,pc}
;;;338    //写入文件开始标志 
                          ENDP


                          AREA ||i.jpeg_calc_value||, CODE, READONLY, ALIGN=2

                  jpeg_calc_value PROC
;;;260    //计算出一些有用的值并分配到缓冲区中
;;;261    void jpeg_calc_value(jpeg_compress_info *cinfo,u8 *inbuf_buf) 
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;262    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;263      	int i,h,v,bn;
;;;264      	int size;
;;;265      	jpeg_component_info *pcomp;  
;;;266    	cinfo->state=JC_SETTING;
000008  2001              MOVS     r0,#1
00000a  f88400fc          STRB     r0,[r4,#0xfc]
;;;267    	bn=0;
00000e  f04f0a00          MOV      r10,#0
;;;268    	cinfo->max_h_factor=0;
000012  2000              MOVS     r0,#0
000014  f8c400c4          STR      r0,[r4,#0xc4]
;;;269    	cinfo->max_v_factor=0;	
000018  f8c400c8          STR      r0,[r4,#0xc8]
;;;270    	for(i=0;i<cinfo->num_comp;i++)//循环计算每个元件的信息
00001c  4680              MOV      r8,r0
00001e  e025              B        |L22.108|
                  |L22.32|
;;;271    	{
;;;272    		pcomp=&cinfo->comp[i];
000020  eb0801c8          ADD      r1,r8,r8,LSL #3
000024  f104001c          ADD      r0,r4,#0x1c
000028  eb000581          ADD      r5,r0,r1,LSL #2
;;;273    		h=pcomp->h_factor;
00002c  686e              LDR      r6,[r5,#4]
;;;274    		v=pcomp->v_factor;	
00002e  68af              LDR      r7,[r5,#8]
;;;275    		if(cinfo->max_h_factor<h)cinfo->max_h_factor=h;
000030  f8d400c4          LDR      r0,[r4,#0xc4]
000034  42b0              CMP      r0,r6
000036  da01              BGE      |L22.60|
000038  f8c460c4          STR      r6,[r4,#0xc4]
                  |L22.60|
;;;276    		if(cinfo->max_v_factor<v)cinfo->max_v_factor=v;
00003c  f8d400c8          LDR      r0,[r4,#0xc8]
000040  42b8              CMP      r0,r7
000042  da01              BGE      |L22.72|
000044  f8c470c8          STR      r7,[r4,#0xc8]
                  |L22.72|
;;;277    		bn+=(h*v);	
000048  fb06aa07          MLA      r10,r6,r7,r10
;;;278    		//在这里申请内存空间,但要在jpeg_destory_compress()中须释放它,所以用户必须在完成压缩时调用它
;;;279    		pcomp->num_dct_table=h*v;
00004c  fb06f007          MUL      r0,r6,r7
000050  61a8              STR      r0,[r5,#0x18]
;;;280    		size=sizeof(DCTBLOCK)*pcomp->num_dct_table;
000052  69a8              LDR      r0,[r5,#0x18]
000054  ea4f1bc0          LSL      r11,r0,#7
;;;281    		pcomp->dct_table=(DCTBLOCK*)(dcttab[i]);//malloc(size);
000058  482b              LDR      r0,|L22.264|
00005a  eb002048          ADD      r0,r0,r8,LSL #9
00005e  61e8              STR      r0,[r5,#0x1c]
;;;282    		memset((void*)(pcomp->dct_table),0,size);
000060  4659              MOV      r1,r11
000062  69e8              LDR      r0,[r5,#0x1c]
000064  f7fffffe          BL       __aeabi_memclr
000068  f1080801          ADD      r8,r8,#1              ;270
                  |L22.108|
00006c  69a0              LDR      r0,[r4,#0x18]         ;270
00006e  4540              CMP      r0,r8                 ;270
000070  dcd6              BGT      |L22.32|
;;;283    	}	
;;;284    	//if(bn>MAX_BLOCK_IN_MCU)exit(1);	
;;;285    	cinfo->block_in_mcu=bn;
000072  344c              ADDS     r4,r4,#0x4c
000074  f8c4a068          STR      r10,[r4,#0x68]
;;;286    	cinfo->mcu_width=cinfo->max_h_factor*DCTSIZE;
000078  6fa0              LDR      r0,[r4,#0x78]
00007a  00c0              LSLS     r0,r0,#3
00007c  66e0              STR      r0,[r4,#0x6c]
;;;287    	cinfo->mcu_height=cinfo->max_v_factor*DCTSIZE;
00007e  6fe0              LDR      r0,[r4,#0x7c]
000080  00c0              LSLS     r0,r0,#3
000082  6720              STR      r0,[r4,#0x70]
;;;288    	cinfo->mcu_blocks=cinfo->mcu_width*cinfo->mcu_height;	
000084  e9d4011b          LDRD     r0,r1,[r4,#0x6c]
000088  4348              MULS     r0,r1,r0
00008a  6760              STR      r0,[r4,#0x74]
;;;289    	//设置和MCU有关的值 
;;;290    	cinfo->mcu_per_row=cinfo->image_width/cinfo->mcu_width;
00008c  f8540c4c          LDR      r0,[r4,#-0x4c]
000090  6ee1              LDR      r1,[r4,#0x6c]
000092  fb90f0f1          SDIV     r0,r0,r1
000096  6620              STR      r0,[r4,#0x60]
;;;291    	if(cinfo->image_width%cinfo->mcu_width!=0)
000098  f8540c4c          LDR      r0,[r4,#-0x4c]
00009c  6ee1              LDR      r1,[r4,#0x6c]
00009e  3c4c              SUBS     r4,r4,#0x4c
0000a0  fb90f2f1          SDIV     r2,r0,r1
0000a4  fb010012          MLS      r0,r1,r2,r0
0000a8  b120              CBZ      r0,|L22.180|
;;;292    	cinfo->mcu_per_row++;
0000aa  f8d400ac          LDR      r0,[r4,#0xac]
0000ae  1c40              ADDS     r0,r0,#1
0000b0  f8c400ac          STR      r0,[r4,#0xac]
                  |L22.180|
;;;293    	cinfo->mcu_rows=cinfo->image_height/cinfo->mcu_height;
0000b4  f8d410bc          LDR      r1,[r4,#0xbc]
0000b8  6860              LDR      r0,[r4,#4]
0000ba  fb90f0f1          SDIV     r0,r0,r1
0000be  f8c400b0          STR      r0,[r4,#0xb0]
;;;294    	if(cinfo->image_height%cinfo->mcu_height!=0)
0000c2  f8d410bc          LDR      r1,[r4,#0xbc]
0000c6  6860              LDR      r0,[r4,#4]
0000c8  fb90f2f1          SDIV     r2,r0,r1
0000cc  fb010012          MLS      r0,r1,r2,r0
0000d0  b120              CBZ      r0,|L22.220|
;;;295    	cinfo->mcu_rows++;	
0000d2  f8d400b0          LDR      r0,[r4,#0xb0]
0000d6  1c40              ADDS     r0,r0,#1
0000d8  f8c400b0          STR      r0,[r4,#0xb0]
                  |L22.220|
;;;296    	//设置输入缓冲区
;;;297    	cinfo->inbuf_width=cinfo->mcu_per_row*cinfo->mcu_width;
0000dc  f8540fac          LDR      r0,[r4,#0xac]!
0000e0  68e1              LDR      r1,[r4,#0xc]
0000e2  4348              MULS     r0,r1,r0
0000e4  6460              STR      r0,[r4,#0x44]
;;;298    	cinfo->inbuf_height=cinfo->mcu_height;
0000e6  6920              LDR      r0,[r4,#0x10]
0000e8  64a0              STR      r0,[r4,#0x48]
;;;299    	cinfo->inbuf_size=cinfo->inbuf_width*cinfo->inbuf_height*cinfo->num_comp*sizeof(JSAMPLE);
0000ea  e9d40111          LDRD     r0,r1,[r4,#0x44]
0000ee  4348              MULS     r0,r1,r0
0000f0  f8541c94          LDR      r1,[r4,#-0x94]
0000f4  4348              MULS     r0,r1,r0
0000f6  64e0              STR      r0,[r4,#0x4c]
;;;300    	cinfo->inbuf=(JSAMPLE*)inbuf_buf;//malloc(cinfo->inbuf_size);
0000f8  f8c49040          STR      r9,[r4,#0x40]
;;;301     	cinfo->next_line=0;//复状态值
0000fc  2000              MOVS     r0,#0
0000fe  6560              STR      r0,[r4,#0x54]
000100  3cac              SUBS     r4,r4,#0xac
;;;302    }
000102  e8bd9ff0          POP      {r4-r12,pc}
;;;303    ///////////////////////////////////////////////////////////////////////////////////////////
                          ENDP

000106  0000              DCW      0x0000
                  |L22.264|
                          DCD      dcttab

                          AREA ||i.jpeg_finish_compress||, CODE, READONLY, ALIGN=1

                  jpeg_finish_compress PROC
;;;838    //完成缓冲区中剩下数据的压缩编码,并写文件尾到输出文件
;;;839    void jpeg_finish_compress(jpeg_compress_info *cinfo) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;840    {
000004  4604              MOV      r4,r0
;;;841      	int i,startline,rowlen;
;;;842      	JSAMPLE *data;
;;;843      	//if(cinfo->state!=JC_START)exit(1);
;;;844      	//完成cinfo->inbuf中数据的压缩
;;;845      	if(cinfo->next_line%cinfo->inbuf_height!=0)
000006  f8d410f4          LDR      r1,[r4,#0xf4]
00000a  f8d40100          LDR      r0,[r4,#0x100]
00000e  fb90f2f1          SDIV     r2,r0,r1
000012  fb010012          MLS      r0,r1,r2,r0
000016  b318              CBZ      r0,|L23.96|
;;;846    	{
;;;847    		rowlen=cinfo->inbuf_width*cinfo->num_comp*sizeof(JSAMPLE);
000018  3484              ADDS     r4,r4,#0x84
00001a  f8541c6c          LDR      r1,[r4,#-0x6c]
00001e  6ee0              LDR      r0,[r4,#0x6c]
000020  fb00f501          MUL      r5,r0,r1
;;;848    		startline=cinfo->next_line%cinfo->inbuf_height;
000024  6f21              LDR      r1,[r4,#0x70]
000026  6fe0              LDR      r0,[r4,#0x7c]
000028  fb90f2f1          SDIV     r2,r0,r1
00002c  fb010712          MLS      r7,r1,r2,r0
;;;849    		data=&cinfo->inbuf[(startline-1)*rowlen];
000030  6ea1              LDR      r1,[r4,#0x68]
000032  3c84              SUBS     r4,r4,#0x84
000034  1e78              SUBS     r0,r7,#1
000036  fb001805          MLA      r8,r0,r5,r1
;;;850    		if(startline!=0)
00003a  b177              CBZ      r7,|L23.90|
;;;851    			for(i=startline;i<cinfo->inbuf_height;i++)
00003c  463e              MOV      r6,r7
00003e  e008              B        |L23.82|
                  |L23.64|
;;;852    				memcpy(&cinfo->inbuf[i*rowlen],data,rowlen);
000040  f8d410ec          LDR      r1,[r4,#0xec]
000044  fb061005          MLA      r0,r6,r5,r1
000048  462a              MOV      r2,r5
00004a  4641              MOV      r1,r8
00004c  f7fffffe          BL       __aeabi_memcpy
000050  1c76              ADDS     r6,r6,#1              ;851
                  |L23.82|
000052  f8d400f4          LDR      r0,[r4,#0xf4]         ;851
000056  42b0              CMP      r0,r6                 ;851
000058  dcf2              BGT      |L23.64|
                  |L23.90|
;;;853        	jint_process_rows(cinfo);  
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       jint_process_rows
                  |L23.96|
;;;854      	}
;;;855      	jhuff_flush_buffer(cinfo); 
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       jhuff_flush_buffer
;;;856      	jmkr_write_end(cinfo);//添加JPEG文件尾  	
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       jmkr_write_end
;;;857    }
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;858    //清除/释放缓冲区
                          ENDP


                          AREA ||i.jpeg_set_default||, CODE, READONLY, ALIGN=2

                  jpeg_set_default PROC
;;;141    //设置默认参数
;;;142    void jpeg_set_default(jpeg_compress_info *cinfo,u8 *inbuf_buf) 
000000  b570              PUSH     {r4-r6,lr}
;;;143    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;144      	cinfo->precision=8;//采样精度8  
000006  2008              MOVS     r0,#8
000008  60e0              STR      r0,[r4,#0xc]
;;;145      	cinfo->in_color_space=JCS_RGB;//色彩空间
00000a  2002              MOVS     r0,#2
00000c  7520              STRB     r0,[r4,#0x14]
;;;146      	//cinfo->quality=0.2f;//图像质量,值越小质量越好 
;;;147    	
;;;148    	cinfo->quality=photo_qulity;//图像质量,值越小质量越好 
00000e  4818              LDR      r0,|L24.112|
000010  6800              LDR      r0,[r0,#0]  ; photo_qulity
000012  6120              STR      r0,[r4,#0x10]
;;;149    	
;;;150      	//初始化元件颜色为YCbCr彩色  
;;;151      	cinfo->num_comp=3;//元件数量为3
000014  2003              MOVS     r0,#3
000016  61a0              STR      r0,[r4,#0x18]
;;;152      	SET_COMP(cinfo->comp[0],1,2,2,0,0,0);//
000018  2001              MOVS     r0,#1
00001a  7720              STRB     r0,[r4,#0x1c]
00001c  2101              MOVS     r1,#1
00001e  7761              STRB     r1,[r4,#0x1d]
000020  2102              MOVS     r1,#2
000022  6221              STR      r1,[r4,#0x20]
000024  6261              STR      r1,[r4,#0x24]
000026  2100              MOVS     r1,#0
000028  62a1              STR      r1,[r4,#0x28]
00002a  62e1              STR      r1,[r4,#0x2c]
00002c  6321              STR      r1,[r4,#0x30]
;;;153      	SET_COMP(cinfo->comp[1],2,1,1,1,1,1);//
00002e  2102              MOVS     r1,#2
000030  f8841040          STRB     r1,[r4,#0x40]
000034  f8841041          STRB     r1,[r4,#0x41]
000038  2101              MOVS     r1,#1
00003a  6461              STR      r1,[r4,#0x44]
00003c  64a1              STR      r1,[r4,#0x48]
00003e  64e1              STR      r1,[r4,#0x4c]
000040  6521              STR      r1,[r4,#0x50]
000042  6561              STR      r1,[r4,#0x54]
;;;154      	SET_COMP(cinfo->comp[2],3,1,1,1,1,1);//  	
000044  2103              MOVS     r1,#3
000046  f8841064          STRB     r1,[r4,#0x64]
00004a  f8841065          STRB     r1,[r4,#0x65]
00004e  2101              MOVS     r1,#1
000050  66a1              STR      r1,[r4,#0x68]
000052  66e1              STR      r1,[r4,#0x6c]
000054  6721              STR      r1,[r4,#0x70]
000056  6761              STR      r1,[r4,#0x74]
000058  67a1              STR      r1,[r4,#0x78]
;;;155      	jint_std_quant_tables(cinfo);//设置标准量化表  	
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       jint_std_quant_tables
;;;156      	jint_std_huff_tables(cinfo);//设置标准huffman表  
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       jint_std_huff_tables
;;;157      	jpeg_calc_value(cinfo,inbuf_buf);//其它变量
000066  4629              MOV      r1,r5
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       jpeg_calc_value
;;;158    }
00006e  bd70              POP      {r4-r6,pc}
;;;159    //设置标准量化表
                          ENDP

                  |L24.112|
                          DCD      photo_qulity

                          AREA ||i.jpeg_start_compress||, CODE, READONLY, ALIGN=1

                  jpeg_start_compress PROC
;;;318    //开始压缩编码,写入头信息
;;;319    void jpeg_start_compress(jpeg_compress_info *cinfo) 
000000  b570              PUSH     {r4-r6,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321      	int i;
;;;322    
;;;323      	jmkr_write_start(cinfo);//写头信息,包括文件头,帧头和扫描开始  
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       jmkr_write_start
;;;324      	cinfo->state=JC_START;//保存当前状态(开始)
00000a  2002              MOVS     r0,#2
00000c  f88400fc          STRB     r0,[r4,#0xfc]
;;;325      	cinfo->next_line=0;//初始化开始变量
000010  2000              MOVS     r0,#0
000012  f8c40100          STR      r0,[r4,#0x100]
;;;326      	for(i=0;i<cinfo->num_comp;i++)cinfo->comp[i].preval=0;
000016  2500              MOVS     r5,#0
000018  e008              B        |L25.44|
                  |L25.26|
00001a  2100              MOVS     r1,#0
00001c  eb0502c5          ADD      r2,r5,r5,LSL #3
000020  f104001c          ADD      r0,r4,#0x1c
000024  eb000082          ADD      r0,r0,r2,LSL #2
000028  8401              STRH     r1,[r0,#0x20]
00002a  1c6d              ADDS     r5,r5,#1
                  |L25.44|
00002c  69a0              LDR      r0,[r4,#0x18]
00002e  42a8              CMP      r0,r5
000030  dcf3              BGT      |L25.26|
;;;327    }
000032  bd70              POP      {r4-r6,pc}
;;;328    //写头信息
                          ENDP


                          AREA ||i.jutl_cc_rgb2ycc||, CODE, READONLY, ALIGN=2

                  jutl_cc_rgb2ycc PROC
;;;516    //RGB转YUV
;;;517    void jutl_cc_rgb2ycc(JSAMPLE *data,int num) 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;518    {
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
;;;519      	int i;
;;;520      	float a,b,c;
;;;521      	struct three_component_color{
;;;522    		JSAMPLE a,b,c;
;;;523      	} *pcolor;
;;;524    	pcolor=(struct three_component_color*)data;
00000a  4635              MOV      r5,r6
;;;525    	for(i=0;i<num;i++)
00000c  2400              MOVS     r4,#0
00000e  e076              B        |L26.254|
                  |L26.16|
;;;526    	{
;;;527    		a=pcolor[i].a;
000010  eb040144          ADD      r1,r4,r4,LSL #1
000014  5c68              LDRB     r0,[r5,r1]
000016  f7fffffe          BL       __aeabi_ui2f
00001a  4683              MOV      r11,r0
;;;528    		b=pcolor[i].b;
00001c  eb040144          ADD      r1,r4,r4,LSL #1
000020  4429              ADD      r1,r1,r5
000022  7848              LDRB     r0,[r1,#1]
000024  f7fffffe          BL       __aeabi_ui2f
000028  9004              STR      r0,[sp,#0x10]
;;;529    		c=pcolor[i].c;
00002a  eb040144          ADD      r1,r4,r4,LSL #1
00002e  4429              ADD      r1,r1,r5
000030  7888              LDRB     r0,[r1,#2]
000032  f7fffffe          BL       __aeabi_ui2f
000036  9003              STR      r0,[sp,#0xc]
;;;530    		pcolor[i].a=(0.29900f*a+0.58700f*b+0.11400f*c);//Y color
000038  4833              LDR      r0,|L26.264|
00003a  9903              LDR      r1,[sp,#0xc]
00003c  f7fffffe          BL       __aeabi_fmul
000040  9002              STR      r0,[sp,#8]
000042  4832              LDR      r0,|L26.268|
000044  9904              LDR      r1,[sp,#0x10]
000046  f7fffffe          BL       __aeabi_fmul
00004a  4659              MOV      r1,r11
00004c  9001              STR      r0,[sp,#4]
00004e  4830              LDR      r0,|L26.272|
000050  f7fffffe          BL       __aeabi_fmul
000054  4682              MOV      r10,r0
000056  9901              LDR      r1,[sp,#4]
000058  f7fffffe          BL       __aeabi_fadd
00005c  4681              MOV      r9,r0
00005e  9902              LDR      r1,[sp,#8]
000060  f7fffffe          BL       __aeabi_fadd
000064  4680              MOV      r8,r0
000066  f7fffffe          BL       __aeabi_f2uiz
00006a  eb040144          ADD      r1,r4,r4,LSL #1
00006e  5468              STRB     r0,[r5,r1]
;;;531    		pcolor[i].b=(-0.16874f*a-0.33126f*b+0.50000f*c+128);//Cb color
000070  f04f507c          MOV      r0,#0x3f000000
000074  9903              LDR      r1,[sp,#0xc]
000076  f7fffffe          BL       __aeabi_fmul
00007a  9002              STR      r0,[sp,#8]
00007c  4825              LDR      r0,|L26.276|
00007e  9904              LDR      r1,[sp,#0x10]
000080  f7fffffe          BL       __aeabi_fmul
000084  4659              MOV      r1,r11
000086  9001              STR      r0,[sp,#4]
000088  4823              LDR      r0,|L26.280|
00008a  f7fffffe          BL       __aeabi_fmul
00008e  9000              STR      r0,[sp,#0]
000090  9901              LDR      r1,[sp,#4]
000092  f7fffffe          BL       __aeabi_fsub
000096  4682              MOV      r10,r0
000098  9902              LDR      r1,[sp,#8]
00009a  f7fffffe          BL       __aeabi_fadd
00009e  4681              MOV      r9,r0
0000a0  f04f4186          MOV      r1,#0x43000000
0000a4  f7fffffe          BL       __aeabi_fadd
0000a8  4680              MOV      r8,r0
0000aa  f7fffffe          BL       __aeabi_f2uiz
0000ae  eb040144          ADD      r1,r4,r4,LSL #1
0000b2  4429              ADD      r1,r1,r5
0000b4  7048              STRB     r0,[r1,#1]
;;;532    		pcolor[i].c=(0.50000f*a-0.41869f*b-0.08131f*c+128);//Cr color 
0000b6  4819              LDR      r0,|L26.284|
0000b8  9903              LDR      r1,[sp,#0xc]
0000ba  f7fffffe          BL       __aeabi_fmul
0000be  9002              STR      r0,[sp,#8]
0000c0  4817              LDR      r0,|L26.288|
0000c2  9904              LDR      r1,[sp,#0x10]
0000c4  f7fffffe          BL       __aeabi_fmul
0000c8  4659              MOV      r1,r11
0000ca  9001              STR      r0,[sp,#4]
0000cc  f04f507c          MOV      r0,#0x3f000000
0000d0  f7fffffe          BL       __aeabi_fmul
0000d4  9000              STR      r0,[sp,#0]
0000d6  9901              LDR      r1,[sp,#4]
0000d8  f7fffffe          BL       __aeabi_fsub
0000dc  4682              MOV      r10,r0
0000de  9902              LDR      r1,[sp,#8]
0000e0  f7fffffe          BL       __aeabi_fsub
0000e4  4681              MOV      r9,r0
0000e6  f04f4186          MOV      r1,#0x43000000
0000ea  f7fffffe          BL       __aeabi_fadd
0000ee  4680              MOV      r8,r0
0000f0  f7fffffe          BL       __aeabi_f2uiz
0000f4  eb040144          ADD      r1,r4,r4,LSL #1
0000f8  4429              ADD      r1,r1,r5
0000fa  7088              STRB     r0,[r1,#2]
0000fc  1c64              ADDS     r4,r4,#1              ;525
                  |L26.254|
0000fe  42bc              CMP      r4,r7                 ;525
000100  db86              BLT      |L26.16|
;;;533      	}
;;;534    }
000102  b005              ADD      sp,sp,#0x14
000104  e8bd8ff0          POP      {r4-r11,pc}
;;;535    //处理所有元件中的MCU数据
                          ENDP

                  |L26.264|
                          DCD      0x3de978d5
                  |L26.268|
                          DCD      0x3f1645a2
                  |L26.272|
                          DCD      0x3e991687
                  |L26.276|
                          DCD      0x3ea99ae9
                  |L26.280|
                          DCD      0xbe2cca2e
                  |L26.284|
                          DCD      0x3da685db
                  |L26.288|
                          DCD      0x3ed65e89

                          AREA ||i.jutl_write_byte||, CODE, READONLY, ALIGN=2

                  jutl_write_byte PROC
;;;305    u16 wr_pt=0;
;;;306    void jutl_write_byte(u8 c,char *f,jpeg_compress_info *cinfo)
000000  b5f8              PUSH     {r3-r7,lr}
;;;307    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;308    	UINT WRBytes;
;;;309    
;;;310    	write_buf[wr_pt]=c;
000008  480e              LDR      r0,|L27.68|
00000a  490f              LDR      r1,|L27.72|
00000c  8809              LDRH     r1,[r1,#0]  ; wr_pt
00000e  5445              STRB     r5,[r0,r1]
;;;311    	wr_pt++;
000010  480d              LDR      r0,|L27.72|
000012  8800              LDRH     r0,[r0,#0]  ; wr_pt
000014  1c40              ADDS     r0,r0,#1
000016  490c              LDR      r1,|L27.72|
000018  8008              STRH     r0,[r1,#0]
;;;312      	if(wr_pt==512||cinfo->state==JC_FINISH)//512字节写一次
00001a  4608              MOV      r0,r1
00001c  8800              LDRH     r0,[r0,#0]  ; wr_pt
00001e  f5b07f00          CMP      r0,#0x200
000022  d003              BEQ      |L27.44|
000024  f89400fc          LDRB     r0,[r4,#0xfc]
000028  2803              CMP      r0,#3
00002a  d10a              BNE      |L27.66|
                  |L27.44|
;;;313    	{
;;;314    		f_write(cinfo->fileW,write_buf,wr_pt,&WRBytes);
00002c  466b              MOV      r3,sp
00002e  4906              LDR      r1,|L27.72|
000030  880a              LDRH     r2,[r1,#0]  ; wr_pt
000032  4904              LDR      r1,|L27.68|
000034  f8d40104          LDR      r0,[r4,#0x104]
000038  f7fffffe          BL       f_write
;;;315    		wr_pt=0;
00003c  2000              MOVS     r0,#0
00003e  4902              LDR      r1,|L27.72|
000040  8008              STRH     r0,[r1,#0]
                  |L27.66|
;;;316    	}
;;;317    }
000042  bdf8              POP      {r3-r7,pc}
;;;318    //开始压缩编码,写入头信息
                          ENDP

                  |L27.68|
                          DCD      write_buf
                  |L27.72|
                          DCD      wr_pt

                          AREA ||i.jutl_zigzag_sort||, CODE, READONLY, ALIGN=2

                  jutl_zigzag_sort PROC
;;;175    //Z形排序
;;;176    void jutl_zigzag_sort(DCTBLOCK dptr) 
000000  b530              PUSH     {r4,r5,lr}
;;;177    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4605              MOV      r5,r0
;;;178      	int i;
;;;179    
;;;180      	DCTBLOCK dtmp;
;;;181      	memcpy(&dtmp,dptr,sizeof(DCTBLOCK));
000006  2280              MOVS     r2,#0x80
000008  4629              MOV      r1,r5
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       __aeabi_memcpy
;;;182      	for(i=0;i<DCTSIZE2;i++)dptr[zz_order[i]]=dtmp[i];
000010  2400              MOVS     r4,#0
000012  e007              B        |L28.36|
                  |L28.20|
000014  a801              ADD      r0,sp,#4
000016  f8300014          LDRH     r0,[r0,r4,LSL #1]
00001a  4904              LDR      r1,|L28.44|
00001c  5d09              LDRB     r1,[r1,r4]
00001e  f8250011          STRH     r0,[r5,r1,LSL #1]
000022  1c64              ADDS     r4,r4,#1
                  |L28.36|
000024  2c40              CMP      r4,#0x40
000026  dbf5              BLT      |L28.20|
;;;183    }
000028  b021              ADD      sp,sp,#0x84
00002a  bd30              POP      {r4,r5,pc}
;;;184    //设置标准huffman表
                          ENDP

                  |L28.44|
                          DCD      zz_order

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  JQUANT_TBL_2
                          %        256
                  JHUFF_TBL_4
                          %        5192
                  dcttab
                          %        1536
                  gtmp_hsize
                          %        512
                  gtmp_hcode
                          %        512
                  write_buf
                          %        512
                  temp_dct1
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  jfcode
000000  ffe00010          DCB      0xff,0xe0,0x00,0x10
000004  4a464946          DCB      0x4a,0x46,0x49,0x46
000008  00010100          DCB      0x00,0x01,0x01,0x00
00000c  00010001          DCB      0x00,0x01,0x00,0x01
000010  0000              DCB      0x00,0x00
                  std_luminance_quant_tbl
000012  0010              DCW      0x0010
000014  000b000a          DCW      0x000b,0x000a
000018  00100018          DCW      0x0010,0x0018
00001c  00280033          DCW      0x0028,0x0033
000020  003d000c          DCW      0x003d,0x000c
000024  000c000e          DCW      0x000c,0x000e
000028  0013001a          DCW      0x0013,0x001a
00002c  003a003c          DCW      0x003a,0x003c
000030  0037000e          DCW      0x0037,0x000e
000034  000d0010          DCW      0x000d,0x0010
000038  00180028          DCW      0x0018,0x0028
00003c  00390045          DCW      0x0039,0x0045
000040  0038000e          DCW      0x0038,0x000e
000044  00110016          DCW      0x0011,0x0016
000048  001d0033          DCW      0x001d,0x0033
00004c  00570050          DCW      0x0057,0x0050
000050  003e0012          DCW      0x003e,0x0012
000054  00160025          DCW      0x0016,0x0025
000058  00380044          DCW      0x0038,0x0044
00005c  006d0067          DCW      0x006d,0x0067
000060  004d0018          DCW      0x004d,0x0018
000064  00230037          DCW      0x0023,0x0037
000068  00400051          DCW      0x0040,0x0051
00006c  00680071          DCW      0x0068,0x0071
000070  005c0031          DCW      0x005c,0x0031
000074  0040004e          DCW      0x0040,0x004e
000078  00570067          DCW      0x0057,0x0067
00007c  00790078          DCW      0x0079,0x0078
000080  00650048          DCW      0x0065,0x0048
000084  005c005f          DCW      0x005c,0x005f
000088  00620070          DCW      0x0062,0x0070
00008c  00640067          DCW      0x0064,0x0067
000090  0063              DCW      0x0063
                  std_chrominance_quant_tbl
000092  0011              DCW      0x0011
000094  00120018          DCW      0x0012,0x0018
000098  002f0063          DCW      0x002f,0x0063
00009c  00630063          DCW      0x0063,0x0063
0000a0  00630012          DCW      0x0063,0x0012
0000a4  0015001a          DCW      0x0015,0x001a
0000a8  00420063          DCW      0x0042,0x0063
0000ac  00630063          DCW      0x0063,0x0063
0000b0  00630018          DCW      0x0063,0x0018
0000b4  001a0038          DCW      0x001a,0x0038
0000b8  00630063          DCW      0x0063,0x0063
0000bc  00630063          DCW      0x0063,0x0063
0000c0  0063002f          DCW      0x0063,0x002f
0000c4  00420063          DCW      0x0042,0x0063
0000c8  00630063          DCW      0x0063,0x0063
0000cc  00630063          DCW      0x0063,0x0063
0000d0  00630063          DCW      0x0063,0x0063
0000d4  00630063          DCW      0x0063,0x0063
0000d8  00630063          DCW      0x0063,0x0063
0000dc  00630063          DCW      0x0063,0x0063
0000e0  00630063          DCW      0x0063,0x0063
0000e4  00630063          DCW      0x0063,0x0063
0000e8  00630063          DCW      0x0063,0x0063
0000ec  00630063          DCW      0x0063,0x0063
0000f0  00630063          DCW      0x0063,0x0063
0000f4  00630063          DCW      0x0063,0x0063
0000f8  00630063          DCW      0x0063,0x0063
0000fc  00630063          DCW      0x0063,0x0063
000100  00630063          DCW      0x0063,0x0063
000104  00630063          DCW      0x0063,0x0063
000108  00630063          DCW      0x0063,0x0063
00010c  00630063          DCW      0x0063,0x0063
000110  0063              DCW      0x0063
                  zz_order
000112  0001              DCB      0x00,0x01
000114  05060e0f          DCB      0x05,0x06,0x0e,0x0f
000118  1b1c0204          DCB      0x1b,0x1c,0x02,0x04
00011c  070d101a          DCB      0x07,0x0d,0x10,0x1a
000120  1d2a0308          DCB      0x1d,0x2a,0x03,0x08
000124  0c11191e          DCB      0x0c,0x11,0x19,0x1e
000128  292b090b          DCB      0x29,0x2b,0x09,0x0b
00012c  12181f28          DCB      0x12,0x18,0x1f,0x28
000130  2c350a13          DCB      0x2c,0x35,0x0a,0x13
000134  1720272d          DCB      0x17,0x20,0x27,0x2d
000138  34361416          DCB      0x34,0x36,0x14,0x16
00013c  21262e33          DCB      0x21,0x26,0x2e,0x33
000140  373c1522          DCB      0x37,0x3c,0x15,0x22
000144  252f3238          DCB      0x25,0x2f,0x32,0x38
000148  3b3d2324          DCB      0x3b,0x3d,0x23,0x24
00014c  3031393a          DCB      0x30,0x31,0x39,0x3a
000150  3e3f              DCB      0x3e,0x3f
                  bits_dc_luminance
000152  0000              DCB      0x00,0x00
000154  01050101          DCB      0x01,0x05,0x01,0x01
000158  01010101          DCB      0x01,0x01,0x01,0x01
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  000000            DCB      0x00,0x00,0x00
                  val_dc_luminance
000163  00                DCB      0x00
000164  01020304          DCB      0x01,0x02,0x03,0x04
000168  05060708          DCB      0x05,0x06,0x07,0x08
00016c  090a0b            DCB      0x09,0x0a,0x0b
                  bits_dc_chrominance
00016f  00                DCB      0x00
000170  00030101          DCB      0x00,0x03,0x01,0x01
000174  01010101          DCB      0x01,0x01,0x01,0x01
000178  01010100          DCB      0x01,0x01,0x01,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
                  val_dc_chrominance
000180  00010203          DCB      0x00,0x01,0x02,0x03
000184  04050607          DCB      0x04,0x05,0x06,0x07
000188  08090a0b          DCB      0x08,0x09,0x0a,0x0b
                  bits_ac_luminance
00018c  00000201          DCB      0x00,0x00,0x02,0x01
000190  03030204          DCB      0x03,0x03,0x02,0x04
000194  03050504          DCB      0x03,0x05,0x05,0x04
000198  04000001          DCB      0x04,0x00,0x00,0x01
00019c  7d                DCB      0x7d
                  bits_ac_chrominance
00019d  000002            DCB      0x00,0x00,0x02
0001a0  01020404          DCB      0x01,0x02,0x04,0x04
0001a4  03040705          DCB      0x03,0x04,0x07,0x05
0001a8  04040001          DCB      0x04,0x04,0x00,0x01
0001ac  0277              DCB      0x02,0x77
                  val_ac_luminance
0001ae  0102              DCB      0x01,0x02
0001b0  03000411          DCB      0x03,0x00,0x04,0x11
0001b4  05122131          DCB      0x05,0x12,0x21,0x31
0001b8  41061351          DCB      0x41,0x06,0x13,0x51
0001bc  61072271          DCB      0x61,0x07,0x22,0x71
0001c0  14328191          DCB      0x14,0x32,0x81,0x91
0001c4  a1082342          DCB      0xa1,0x08,0x23,0x42
0001c8  b1c11552          DCB      0xb1,0xc1,0x15,0x52
0001cc  d1f02433          DCB      0xd1,0xf0,0x24,0x33
0001d0  62728209          DCB      0x62,0x72,0x82,0x09
0001d4  0a161718          DCB      0x0a,0x16,0x17,0x18
0001d8  191a2526          DCB      0x19,0x1a,0x25,0x26
0001dc  2728292a          DCB      0x27,0x28,0x29,0x2a
0001e0  34353637          DCB      0x34,0x35,0x36,0x37
0001e4  38393a43          DCB      0x38,0x39,0x3a,0x43
0001e8  44454647          DCB      0x44,0x45,0x46,0x47
0001ec  48494a53          DCB      0x48,0x49,0x4a,0x53
0001f0  54555657          DCB      0x54,0x55,0x56,0x57
0001f4  58595a63          DCB      0x58,0x59,0x5a,0x63
0001f8  64656667          DCB      0x64,0x65,0x66,0x67
0001fc  68696a73          DCB      0x68,0x69,0x6a,0x73
000200  74757677          DCB      0x74,0x75,0x76,0x77
000204  78797a83          DCB      0x78,0x79,0x7a,0x83
000208  84858687          DCB      0x84,0x85,0x86,0x87
00020c  88898a92          DCB      0x88,0x89,0x8a,0x92
000210  93949596          DCB      0x93,0x94,0x95,0x96
000214  9798999a          DCB      0x97,0x98,0x99,0x9a
000218  a2a3a4a5          DCB      0xa2,0xa3,0xa4,0xa5
00021c  a6a7a8a9          DCB      0xa6,0xa7,0xa8,0xa9
000220  aab2b3b4          DCB      0xaa,0xb2,0xb3,0xb4
000224  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
000228  b9bac2c3          DCB      0xb9,0xba,0xc2,0xc3
00022c  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000230  c8c9cad2          DCB      0xc8,0xc9,0xca,0xd2
000234  d3d4d5d6          DCB      0xd3,0xd4,0xd5,0xd6
000238  d7d8d9da          DCB      0xd7,0xd8,0xd9,0xda
00023c  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
000240  e5e6e7e8          DCB      0xe5,0xe6,0xe7,0xe8
000244  e9eaf1f2          DCB      0xe9,0xea,0xf1,0xf2
000248  f3f4f5f6          DCB      0xf3,0xf4,0xf5,0xf6
00024c  f7f8f9fa          DCB      0xf7,0xf8,0xf9,0xfa
                  val_ac_chrominance
000250  00010203          DCB      0x00,0x01,0x02,0x03
000254  11040521          DCB      0x11,0x04,0x05,0x21
000258  31061241          DCB      0x31,0x06,0x12,0x41
00025c  51076171          DCB      0x51,0x07,0x61,0x71
000260  13223281          DCB      0x13,0x22,0x32,0x81
000264  08144291          DCB      0x08,0x14,0x42,0x91
000268  a1b1c109          DCB      0xa1,0xb1,0xc1,0x09
00026c  233352f0          DCB      0x23,0x33,0x52,0xf0
000270  156272d1          DCB      0x15,0x62,0x72,0xd1
000274  0a162434          DCB      0x0a,0x16,0x24,0x34
000278  e125f117          DCB      0xe1,0x25,0xf1,0x17
00027c  18191a26          DCB      0x18,0x19,0x1a,0x26
000280  2728292a          DCB      0x27,0x28,0x29,0x2a
000284  35363738          DCB      0x35,0x36,0x37,0x38
000288  393a4344          DCB      0x39,0x3a,0x43,0x44
00028c  45464748          DCB      0x45,0x46,0x47,0x48
000290  494a5354          DCB      0x49,0x4a,0x53,0x54
000294  55565758          DCB      0x55,0x56,0x57,0x58
000298  595a6364          DCB      0x59,0x5a,0x63,0x64
00029c  65666768          DCB      0x65,0x66,0x67,0x68
0002a0  696a7374          DCB      0x69,0x6a,0x73,0x74
0002a4  75767778          DCB      0x75,0x76,0x77,0x78
0002a8  797a8283          DCB      0x79,0x7a,0x82,0x83
0002ac  84858687          DCB      0x84,0x85,0x86,0x87
0002b0  88898a92          DCB      0x88,0x89,0x8a,0x92
0002b4  93949596          DCB      0x93,0x94,0x95,0x96
0002b8  9798999a          DCB      0x97,0x98,0x99,0x9a
0002bc  a2a3a4a5          DCB      0xa2,0xa3,0xa4,0xa5
0002c0  a6a7a8a9          DCB      0xa6,0xa7,0xa8,0xa9
0002c4  aab2b3b4          DCB      0xaa,0xb2,0xb3,0xb4
0002c8  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
0002cc  b9bac2c3          DCB      0xb9,0xba,0xc2,0xc3
0002d0  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
0002d4  c8c9cad2          DCB      0xc8,0xc9,0xca,0xd2
0002d8  d3d4d5d6          DCB      0xd3,0xd4,0xd5,0xd6
0002dc  d7d8d9da          DCB      0xd7,0xd8,0xd9,0xda
0002e0  e2e3e4e5          DCB      0xe2,0xe3,0xe4,0xe5
0002e4  e6e7e8e9          DCB      0xe6,0xe7,0xe8,0xe9
0002e8  eaf2f3f4          DCB      0xea,0xf2,0xf3,0xf4
0002ec  f5f6f7f8          DCB      0xf5,0xf6,0xf7,0xf8
0002f0  f9fa              DCB      0xf9,0xfa

                          AREA ||.data||, DATA, ALIGN=2

                  buffer
                          DCD      0x00000000
                  bits_in_buffer
                          DCD      0x00000000
                  fileW
                          DCD      0x00000000
                  r
00000c  00                DCB      0x00
                  g
00000d  00                DCB      0x00
                  b
00000e  0000              DCB      0x00,0x00
                  photo_qulity
000010  3f800000          DCFS     0x3f800000 ; 1
                  wr_pt
000014  0000              DCW      0x0000
