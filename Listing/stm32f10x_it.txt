; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\stm32f10x_it.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_it.crf ..\..\User\stm32f10x_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;95       */
;;;96     void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;97     {
;;;98       /* Go to infinite loop when Bus Fault exception occurs */
;;;99       while (1)
000002  e7fe              B        |L1.2|
;;;100      {
;;;101      }
;;;102    }
;;;103    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;123      */
;;;124    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;125    {
;;;126    }
;;;127    
                          ENDP


                          AREA ||i.EXTI3_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI3_IRQHandler PROC
;;;150    /* ov7725 场中断 服务程序 */
;;;151    void OV7725_VSYNC_EXTI_INT_FUNCTION ( void )
000000  b510              PUSH     {r4,lr}
;;;152    {
;;;153        if ( EXTI_GetITStatus(OV7725_VSYNC_EXTI_LINE) != RESET ) 	//检查EXTI_Line0线路上的中断请求是否发送到了NVIC 
000002  2008              MOVS     r0,#8
000004  f7fffffe          BL       EXTI_GetITStatus
000008  b300              CBZ      r0,|L3.76|
;;;154        {
;;;155            if( Ov7725_vsync == 0 )
00000a  4811              LDR      r0,|L3.80|
00000c  7800              LDRB     r0,[r0,#0]  ; Ov7725_vsync
00000e  b978              CBNZ     r0,|L3.48|
;;;156            {
;;;157                FIFO_WRST_L(); 	                      //拉低使FIFO写(数据from摄像头)指针复位
000010  2010              MOVS     r0,#0x10
000012  4910              LDR      r1,|L3.84|
000014  6148              STR      r0,[r1,#0x14]
;;;158                FIFO_WE_H();	                        //拉高使FIFO写允许
000016  2008              MOVS     r0,#8
000018  490f              LDR      r1,|L3.88|
00001a  6008              STR      r0,[r1,#0]
;;;159                
;;;160                Ov7725_vsync = 1;	   	
00001c  2001              MOVS     r0,#1
00001e  490c              LDR      r1,|L3.80|
000020  7008              STRB     r0,[r1,#0]
;;;161                FIFO_WE_H();                          //使FIFO写允许
000022  2008              MOVS     r0,#8
000024  490c              LDR      r1,|L3.88|
000026  6008              STR      r0,[r1,#0]
;;;162                FIFO_WRST_H();                        //允许使FIFO写(数据from摄像头)指针运动
000028  2010              MOVS     r0,#0x10
00002a  490a              LDR      r1,|L3.84|
00002c  6108              STR      r0,[r1,#0x10]
00002e  e00a              B        |L3.70|
                  |L3.48|
;;;163            }
;;;164            else if( Ov7725_vsync == 1 )
000030  4807              LDR      r0,|L3.80|
000032  7800              LDRB     r0,[r0,#0]  ; Ov7725_vsync
000034  2801              CMP      r0,#1
000036  d106              BNE      |L3.70|
;;;165            {
;;;166                FIFO_WE_L();                          //拉低使FIFO写暂停
000038  2008              MOVS     r0,#8
00003a  4907              LDR      r1,|L3.88|
00003c  1d09              ADDS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;167                Ov7725_vsync = 2;
000040  2002              MOVS     r0,#2
000042  4903              LDR      r1,|L3.80|
000044  7008              STRB     r0,[r1,#0]
                  |L3.70|
;;;168            }        
;;;169            EXTI_ClearITPendingBit(OV7725_VSYNC_EXTI_LINE);		    //清除EXTI_Line0线路挂起标志位        
000046  2008              MOVS     r0,#8
000048  f7fffffe          BL       EXTI_ClearITPendingBit
                  |L3.76|
;;;170        }    
;;;171    }
00004c  bd10              POP      {r4,pc}
;;;172    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      Ov7725_vsync
                  |L3.84|
                          DCD      0x40011000
                  |L3.88|
                          DCD      0x40011410

                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;68       */
;;;69     void HardFault_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;70     {
;;;71       /* Go to infinite loop when Hard Fault exception occurs */
;;;72       while (1)
000002  e7fe              B        |L4.2|
;;;73       {
;;;74     		
;;;75       }
;;;76     }
;;;77     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;82       */
;;;83     void MemManage_Handler(void)
000000  bf00              NOP      
                  |L5.2|
;;;84     {
;;;85       /* Go to infinite loop when Memory Manage exception occurs */
;;;86       while (1)
000002  e7fe              B        |L5.2|
;;;87       {
;;;88       }
;;;89     }
;;;90     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;59       */
;;;60     void NMI_Handler(void)
000000  4770              BX       lr
;;;61     {
;;;62     }
;;;63     
                          ENDP


                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;180     */
;;;181    void SDIO_IRQHandler(void) 
000000  b510              PUSH     {r4,lr}
;;;182    {
;;;183      /* Process All SDIO Interrupt Sources */
;;;184      SD_ProcessIRQSrc();
000002  f7fffffe          BL       SD_ProcessIRQSrc
;;;185    }
000006  bd10              POP      {r4,pc}
;;;186    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;138      */
;;;139    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;140    {
;;;141    	if(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)
000002  f7fffffe          BL       xTaskGetSchedulerState
000006  2801              CMP      r0,#1
000008  d001              BEQ      |L8.14|
;;;142    	{
;;;143    		 xPortSysTickHandler();
00000a  f7fffffe          BL       xPortSysTickHandler
                  |L8.14|
;;;144    	}
;;;145    	TimingDelay_Decrement();
00000e  f7fffffe          BL       TimingDelay_Decrement
;;;146    
;;;147    
;;;148    }
000012  bd10              POP      {r4,pc}
;;;149    
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;108      */
;;;109    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L9.2|
;;;110    {
;;;111      /* Go to infinite loop when Usage Fault exception occurs */
;;;112      while (1)
000002  e7fe              B        |L9.2|
;;;113      {
;;;114      }
;;;115    }
;;;116    
                          ENDP

