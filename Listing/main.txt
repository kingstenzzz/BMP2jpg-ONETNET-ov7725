; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\..\output\main.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\FATFS\option -I..\..\User\FATFS -I..\..\User\delay -I..\..\User\onenet\inc -I..\..\User\device\inc -I..\..\User\EDP -I..\..\User\onenet\inc -I..\..\User\hwtimer -I..\..\User\JPEGENCODE -I..\..\User\MALLOC -I..\..\User\dht11 -I..\..\User\flame -I..\..\User\warning -I..\..\User\beep -I..\..\User\adc -I..\..\User\IIC -I..\..\Freee-RTOS\include -I..\..\Freee-RTOS\portable\RVDS\ARM_CM3 -I..\..\User\IWDG -I..\..\User\light_moto -I..\..\User\M8266WIFI -I..\..\User\TIMER -I.\RTE\_____ -IF:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.CheckNetWork_Task||, CODE, READONLY, ALIGN=2

                  CheckNetWork_Task PROC
;;;128    //¼ì²éÍøÂç
;;;129    void CheckNetWork_Task()
000000  b510              PUSH     {r4,lr}
;;;130    {			  
;;;131    	Net_status=(enum net_status)M8266_NetCheck(); //¼ì²éwifiÄ£¿éµÄÍøÂç×´Ì¬
000002  f7fffffe          BL       M8266_NetCheck
000006  4905              LDR      r1,|L1.28|
000008  7008              STRB     r0,[r1,#0]
;;;132    
;;;133    
;;;134    			if( Net_status!=Conneted)
00000a  4608              MOV      r0,r1
00000c  7800              LDRB     r0,[r0,#0]  ; Net_status
00000e  b118              CBZ      r0,|L1.24|
;;;135    			{
;;;136    				M8266_ReLink(Net_status);		
000010  4608              MOV      r0,r1
000012  7800              LDRB     r0,[r0,#0]  ; Net_status
000014  f7fffffe          BL       M8266_ReLink
                  |L1.24|
;;;137    			}
;;;138    	
;;;139    }
000018  bd10              POP      {r4,pc}
;;;140    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      Net_status

                          AREA ||i.CheckSensorTask||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  CheckSensorTask PROC
;;;155    
;;;156    static void CheckSensorTask(void *pvParameters) 
000000  b51f              PUSH     {r0-r4,lr}
;;;157    {
;;;158    	while(1)
000002  e07f              B        |L2.260|
                  |L2.4|
;;;159    	{
;;;160    		char display[10];
;;;161    		taskENTER_CRITICAL(); //½ûÖ¹ÖÐ¶Ï
000004  f7fffffe          BL       vPortEnterCritical
;;;162    		time_secend++;		
000008  483f              LDR      r0,|L2.264|
00000a  6800              LDR      r0,[r0,#0]  ; time_secend
00000c  1c40              ADDS     r0,r0,#1
00000e  493e              LDR      r1,|L2.264|
000010  6008              STR      r0,[r1,#0]  ; time_secend
;;;163    		Check_sensor(&data_value);
000012  483e              LDR      r0,|L2.268|
000014  f7fffffe          BL       Check_sensor
;;;164    		taskEXIT_CRITICAL();	
000018  f7fffffe          BL       vPortExitCritical
;;;165    		
;;;166    		if(Net_status==Conneted)
00001c  483c              LDR      r0,|L2.272|
00001e  7800              LDRB     r0,[r0,#0]  ; Net_status
000020  b950              CBNZ     r0,|L2.56|
;;;167    		ILI9341_DispStringLine_EN(LINE(3),"Online!");
000022  f7fffffe          BL       LCD_GetFont
000026  88c0              LDRH     r0,[r0,#6]
000028  eb000040          ADD      r0,r0,r0,LSL #1
00002c  b284              UXTH     r4,r0
00002e  a139              ADR      r1,|L2.276|
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       ILI9341_DispStringLine_EN
000036  e01c              B        |L2.114|
                  |L2.56|
;;;168    		else if(Net_status==Closed)
000038  4835              LDR      r0,|L2.272|
00003a  7800              LDRB     r0,[r0,#0]  ; Net_status
00003c  2801              CMP      r0,#1
00003e  d10a              BNE      |L2.86|
;;;169    		{
;;;170    		ILI9341_DispStringLine_EN(LINE(3),"Check wifi!");
000040  f7fffffe          BL       LCD_GetFont
000044  88c0              LDRH     r0,[r0,#6]
000046  eb000040          ADD      r0,r0,r0,LSL #1
00004a  b284              UXTH     r4,r0
00004c  a133              ADR      r1,|L2.284|
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       ILI9341_DispStringLine_EN
000054  e00d              B        |L2.114|
                  |L2.86|
;;;171    		}
;;;172    		else if(Net_status==Lost)
000056  482e              LDR      r0,|L2.272|
000058  7800              LDRB     r0,[r0,#0]  ; Net_status
00005a  2802              CMP      r0,#2
00005c  d109              BNE      |L2.114|
;;;173    		{
;;;174    		ILI9341_DispStringLine_EN(LINE(3),"Check service!");
00005e  f7fffffe          BL       LCD_GetFont
000062  88c0              LDRH     r0,[r0,#6]
000064  eb000040          ADD      r0,r0,r0,LSL #1
000068  b284              UXTH     r4,r0
00006a  a12f              ADR      r1,|L2.296|
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       ILI9341_DispStringLine_EN
                  |L2.114|
;;;175    
;;;176    		}
;;;177    		sprintf(display,"hour:%d:min:%d:sec:%d",time_secend/3600,(time_secend/60)%60,time_secend%60);
000072  4825              LDR      r0,|L2.264|
000074  6800              LDR      r0,[r0,#0]  ; time_secend
000076  213c              MOVS     r1,#0x3c
000078  fbb0f2f1          UDIV     r2,r0,r1
00007c  fb010412          MLS      r4,r1,r2,r0
000080  4821              LDR      r0,|L2.264|
000082  6800              LDR      r0,[r0,#0]  ; time_secend
000084  fbb0f0f1          UDIV     r0,r0,r1
000088  fbb0f2f1          UDIV     r2,r0,r1
00008c  fb010512          MLS      r5,r1,r2,r0
000090  481d              LDR      r0,|L2.264|
000092  6800              LDR      r0,[r0,#0]  ; time_secend
000094  f44f6161          MOV      r1,#0xe10
000098  fbb0f6f1          UDIV     r6,r0,r1
00009c  462b              MOV      r3,r5
00009e  4632              MOV      r2,r6
0000a0  a125              ADR      r1,|L2.312|
0000a2  a801              ADD      r0,sp,#4
0000a4  9400              STR      r4,[sp,#0]
0000a6  f7fffffe          BL       __2sprintf
;;;178    		ILI9341_DispStringLine_EN(LINE(2),display);	
0000aa  f7fffffe          BL       LCD_GetFont
0000ae  88c0              LDRH     r0,[r0,#6]
0000b0  0440              LSLS     r0,r0,#17
0000b2  0c04              LSRS     r4,r0,#16
0000b4  a901              ADD      r1,sp,#4
0000b6  4620              MOV      r0,r4
0000b8  f7fffffe          BL       ILI9341_DispStringLine_EN
;;;179    		sprintf(display,"HUM:%d",data_value.humidit);
0000bc  4813              LDR      r0,|L2.268|
0000be  78c2              LDRB     r2,[r0,#3]  ; data_value
0000c0  a123              ADR      r1,|L2.336|
0000c2  a801              ADD      r0,sp,#4
0000c4  f7fffffe          BL       __2sprintf
;;;180    		ILI9341_DispStringLine_EN(LINE(4),display);	
0000c8  f7fffffe          BL       LCD_GetFont
0000cc  88c0              LDRH     r0,[r0,#6]
0000ce  0480              LSLS     r0,r0,#18
0000d0  0c04              LSRS     r4,r0,#16
0000d2  a901              ADD      r1,sp,#4
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       ILI9341_DispStringLine_EN
;;;181    		sprintf(display,"TMP:%d",data_value.temp);
0000da  480c              LDR      r0,|L2.268|
0000dc  7882              LDRB     r2,[r0,#2]  ; data_value
0000de  a11e              ADR      r1,|L2.344|
0000e0  a801              ADD      r0,sp,#4
0000e2  f7fffffe          BL       __2sprintf
;;;182    		ILI9341_DispStringLine_EN(LINE(5),display);
0000e6  f7fffffe          BL       LCD_GetFont
0000ea  88c0              LDRH     r0,[r0,#6]
0000ec  eb000080          ADD      r0,r0,r0,LSL #2
0000f0  b284              UXTH     r4,r0
0000f2  a901              ADD      r1,sp,#4
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       ILI9341_DispStringLine_EN
;;;183    		#ifdef heap_size_check
;;;184    		printf(" sensor the min free stack size is %d \r\n",(int32_t)uxTaskGetStackHighWaterMark(NULL));
;;;185    		printf(" hole free stack size is %d \r\n",(int32_t)xPortGetMinimumEverFreeHeapSize());
;;;186    		#endif
;;;187    		vTaskDelay(1000/portTICK_RATE_MS);
0000fa  f44f707a          MOV      r0,#0x3e8
0000fe  f7fffffe          BL       vTaskDelay
;;;188    	}
000102  bf00              NOP      
                  |L2.260|
000104  e77e              B        |L2.4|
;;;189    }
;;;190    
                          ENDP

000106  0000              DCW      0x0000
                  |L2.264|
                          DCD      time_secend
                  |L2.268|
                          DCD      data_value
                  |L2.272|
                          DCD      Net_status
                  |L2.276|
000114  4f6e6c69          DCB      "Online!",0
000118  6e652100
                  |L2.284|
00011c  43686563          DCB      "Check wifi!",0
000120  6b207769
000124  66692100
                  |L2.296|
000128  43686563          DCB      "Check service!",0
00012c  6b207365
000130  72766963
000134  652100  
000137  00                DCB      0
                  |L2.312|
000138  686f7572          DCB      "hour:%d:min:%d:sec:%d",0
00013c  3a25643a
000140  6d696e3a
000144  25643a73
000148  65633a25
00014c  6400    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L2.336|
000150  48554d3a          DCB      "HUM:%d",0
000154  256400  
000157  00                DCB      0
                  |L2.344|
000158  544d503a          DCB      "TMP:%d",0
00015c  256400  
00015f  00                DCB      0

                          AREA ||i.DisplayTask||, CODE, READONLY, ALIGN=1

                  DisplayTask PROC
;;;192    
;;;193    static void DisplayTask(void *pvParameters) 
000000  e003              B        |L3.10|
                  |L3.2|
;;;194    {
;;;195    	while(1)
;;;196    	{
;;;197    		
;;;198    		vTaskDelay(1000/portTICK_RATE_MS);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
                  |L3.10|
00000a  e7fa              B        |L3.2|
;;;199    	}
;;;200    		
;;;201    }
;;;202    
                          ENDP


                          AREA ||i.Hardware_Init||, CODE, READONLY, ALIGN=2

                  Hardware_Init PROC
;;;69     
;;;70     void Hardware_Init()
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72     	
;;;73     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	//ÖÐ¶Ï¿ØÖÆÆ÷·Ö×éÉèÖÃ
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;74     	LED_GPIO_Config();
00000a  f7fffffe          BL       LED_GPIO_Config
;;;75     	OV7725_GPIO_Config();
00000e  f7fffffe          BL       OV7725_GPIO_Config
;;;76     	Door_GPIO_Config();
000012  f7fffffe          BL       Door_GPIO_Config
;;;77       //TIM4_PWM_Init();
;;;78       ILI9341_Init();
000016  f7fffffe          BL       ILI9341_Init
;;;79     	USART_Config();  //µ÷ÊÔ´®¿Ú
00001a  f7fffffe          BL       USART_Config
;;;80     	
;;;81     	
;;;82       Camera_Init();
00001e  f7fffffe          BL       Camera_Init
;;;83     	M8266_init();//SPI-wifiÄ£¿é
000022  f7fffffe          BL       M8266_init
;;;84     	printf("wifi init \r\n");
000026  a006              ADR      r0,|L4.64|
000028  f7fffffe          BL       __2printf
;;;85     	Fatfs_Init();  
00002c  f7fffffe          BL       Fatfs_Init
;;;86     	DHT11_Init();
000030  f7fffffe          BL       DHT11_Init
;;;87     	Fire_Init();	/*FAtFs¹ÒÔØ*/
000034  f7fffffe          BL       Fire_Init
;;;88     	
;;;89     	printf("Hardware init ok\r\n");
000038  a005              ADR      r0,|L4.80|
00003a  f7fffffe          BL       __2printf
;;;90     }
00003e  bd10              POP      {r4,pc}
;;;91     
                          ENDP

                  |L4.64|
000040  77696669          DCB      "wifi init \r\n",0
000044  20696e69
000048  74200d0a
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L4.80|
000050  48617264          DCB      "Hardware init ok\r\n",0
000054  77617265
000058  20696e69
00005c  74206f6b
000060  0d0a00  
000063  00                DCB      0

                          AREA ||i.Net_Task||, CODE, READONLY, ALIGN=2

                  Net_Task PROC
;;;203    
;;;204    static void Net_Task(void *pvParameters)
000000  2400              MOVS     r4,#0
;;;205    {
;;;206    	unsigned short data_count=0,photo_count=0,check_count=0;
000002  2600              MOVS     r6,#0
000004  2500              MOVS     r5,#0
;;;207    	
;;;208    	while(1)
000006  e036              B        |L5.118|
                  |L5.8|
;;;209    	{
;;;210    		
;;;211    #ifdef heap_size_check
;;;212    		printf(" NET the min free stack size is %d \r\n",(int32_t)uxTaskGetStackHighWaterMark(NULL));
;;;213    #endif
;;;214    		if(Net_status==Conneted)
000008  481b              LDR      r0,|L5.120|
00000a  7800              LDRB     r0,[r0,#0]  ; Net_status
00000c  bb58              CBNZ     r0,|L5.102|
;;;215    		{
;;;216    
;;;217    		if(++data_count>=12)   //60s·¢ËÍÒ»´ÎÊý¾Ý
00000e  1c60              ADDS     r0,r4,#1
000010  b280              UXTH     r0,r0
000012  4604              MOV      r4,r0
000014  280c              CMP      r0,#0xc
000016  db07              BLT      |L5.40|
;;;218    		{
;;;219    			data_count=0;
000018  2400              MOVS     r4,#0
;;;220    			printf("send data");
00001a  a018              ADR      r0,|L5.124|
00001c  f7fffffe          BL       __2printf
;;;221    			OneNet_SendData(&data_value);
000020  4819              LDR      r0,|L5.136|
000022  f7fffffe          BL       OneNet_SendData
000026  e022              B        |L5.110|
                  |L5.40|
;;;222    		}
;;;223    	
;;;224    		else if(photo==1||photo_count++>=time_count)
000028  4818              LDR      r0,|L5.140|
00002a  7800              LDRB     r0,[r0,#0]  ; photo
00002c  2801              CMP      r0,#1
00002e  d006              BEQ      |L5.62|
000030  4630              MOV      r0,r6
000032  1c71              ADDS     r1,r6,#1
000034  b28e              UXTH     r6,r1
000036  4916              LDR      r1,|L5.144|
000038  8809              LDRH     r1,[r1,#0]  ; time_count
00003a  4288              CMP      r0,r1
00003c  db0a              BLT      |L5.84|
                  |L5.62|
;;;225    		{
;;;226    			photo_count=0;
00003e  2600              MOVS     r6,#0
;;;227    			taskENTER_CRITICAL(); //½ûÖ¹ÖÐ¶Ï
000040  f7fffffe          BL       vPortEnterCritical
;;;228    			OneNet_SendPhoto();
000044  f7fffffe          BL       OneNet_SendPhoto
;;;229    			photo=0;
000048  2000              MOVS     r0,#0
00004a  4910              LDR      r1,|L5.140|
00004c  7008              STRB     r0,[r1,#0]
;;;230    			taskEXIT_CRITICAL();			
00004e  f7fffffe          BL       vPortExitCritical
000052  e00c              B        |L5.110|
                  |L5.84|
;;;231    		}
;;;232    		else if(++check_count>=20)
000054  1c68              ADDS     r0,r5,#1
000056  b280              UXTH     r0,r0
000058  4605              MOV      r5,r0
00005a  2814              CMP      r0,#0x14
00005c  db07              BLT      |L5.110|
;;;233    		{			
;;;234    			check_count=0;
00005e  2500              MOVS     r5,#0
;;;235    			CheckNetWork_Task();
000060  f7fffffe          BL       CheckNetWork_Task
000064  e003              B        |L5.110|
                  |L5.102|
;;;236    
;;;237    		}
;;;238    		
;;;239      }
;;;240    	else
;;;241    	{
;;;242    		M8266_ReLink(Net_status);
000066  4804              LDR      r0,|L5.120|
000068  7800              LDRB     r0,[r0,#0]  ; Net_status
00006a  f7fffffe          BL       M8266_ReLink
                  |L5.110|
;;;243    		
;;;244    		
;;;245    	}
;;;246    	vTaskDelay(1000/portTICK_RATE_MS);
00006e  f44f707a          MOV      r0,#0x3e8
000072  f7fffffe          BL       vTaskDelay
                  |L5.118|
000076  e7c7              B        |L5.8|
;;;247    	
;;;248    }
;;;249    }
;;;250    
                          ENDP

                  |L5.120|
                          DCD      Net_status
                  |L5.124|
00007c  73656e64          DCB      "send data",0
000080  20646174
000084  6100    
000086  00                DCB      0
000087  00                DCB      0
                  |L5.136|
                          DCD      data_value
                  |L5.140|
                          DCD      photo
                  |L5.144|
                          DCD      time_count

                          AREA ||i.ReceiveCmdTask||, CODE, READONLY, ALIGN=1

                  ReceiveCmdTask PROC
;;;142    //´¦ÀíÏÂ·¢µÄÃüÁî
;;;143    static void ReceiveCmdTask(void *pvParameters) 
000000  e005              B        |L6.14|
                  |L6.2|
;;;144    {
;;;145    	while(1)
;;;146    	{			
;;;147    		if(OneNET_CmdHandle())
000002  f7fffffe          BL       OneNET_CmdHandle
;;;148    		{
;;;149    		//	NET_Event_CallBack(NET_EVENT_Send_Data);//¸üÐÂÆ½Ì¨Êý¾Ý
;;;150    		}
;;;151    	
;;;152    		vTaskDelay(400/portTICK_RATE_MS);
000006  f44f70c8          MOV      r0,#0x190
00000a  f7fffffe          BL       vTaskDelay
                  |L6.14|
00000e  e7f8              B        |L6.2|
;;;153    	}
;;;154    }
;;;155    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;97       */
;;;98     int main(void) 	
000000  b51c              PUSH     {r2-r4,lr}
;;;99     {		
;;;100    	Hardware_Init();
000002  f7fffffe          BL       Hardware_Init
;;;101    		
;;;102    	
;;;103    	/* Òº¾§³õÊ¼»¯ */
;;;104    	while(OneNet_DevLink())			//½ÓÈëOneNET
000006  e003              B        |L7.16|
                  |L7.8|
;;;105    	mDelay(500);
000008  f44f70fa          MOV      r0,#0x1f4
00000c  f7fffffe          BL       mDelay
                  |L7.16|
000010  f7fffffe          BL       OneNet_DevLink
000014  2800              CMP      r0,#0                 ;104
000016  d1f7              BNE      |L7.8|
;;;106    	Net_status=Conneted;
000018  491f              LDR      r1,|L7.152|
00001a  7008              STRB     r0,[r1,#0]
;;;107    	LED_BLUE;  
00001c  2020              MOVS     r0,#0x20
00001e  491f              LDR      r1,|L7.156|
000020  6008              STR      r0,[r1,#0]
000022  2001              MOVS     r0,#1
000024  6008              STR      r0,[r1,#0]
000026  2002              MOVS     r0,#2
000028  1d09              ADDS     r1,r1,#4
00002a  6008              STR      r0,[r1,#0]
;;;108      Camera_Set_Test();
00002c  f7fffffe          BL       Camera_Set_Test
;;;109    	CameraFous();	
000030  f7fffffe          BL       CameraFous
;;;110    	Camera_Set();
000034  f7fffffe          BL       Camera_Set
;;;111    	ILI9341_DispStringLine_EN(LINE(0),"      Intelligent-Security-System");
000038  f7fffffe          BL       LCD_GetFont
00003c  2400              MOVS     r4,#0
00003e  a118              ADR      r1,|L7.160|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       ILI9341_DispStringLine_EN
;;;112    	printf("start TASK\r\n");
000046  a01f              ADR      r0,|L7.196|
000048  f7fffffe          BL       __2printf
;;;113    	xTaskCreate((TaskFunction_t)ReceiveCmdTask,"ReceiveCmdTask",ReceiveCmd_Stack,"ReceiveCmdTask",ReceiveCMd_Priority,&ReceiveCmdTask_Handler);
00004c  4821              LDR      r0,|L7.212|
00004e  2105              MOVS     r1,#5
000050  a321              ADR      r3,|L7.216|
000052  f44f7280          MOV      r2,#0x100
000056  e9cd1000          STRD     r1,r0,[sp,#0]
00005a  a11f              ADR      r1,|L7.216|
00005c  4822              LDR      r0,|L7.232|
00005e  f7fffffe          BL       xTaskCreate
;;;114    	xTaskCreate((TaskFunction_t)Net_Task,"Net_Task",Net_Task_Stack,"Net_Task",Net_Task_Prioruty,&NetTask_Handler);
000062  4822              LDR      r0,|L7.236|
000064  2106              MOVS     r1,#6
000066  a322              ADR      r3,|L7.240|
000068  f44f6280          MOV      r2,#0x400
00006c  e9cd1000          STRD     r1,r0,[sp,#0]
000070  a11f              ADR      r1,|L7.240|
000072  4822              LDR      r0,|L7.252|
000074  f7fffffe          BL       xTaskCreate
;;;115    	xTaskCreate((TaskFunction_t)CheckSensorTask,"Check_Task",CheckSensor_Stack,"Check_Task",CheckSensor_Priority,&CheckSensor_Handler);
000078  4821              LDR      r0,|L7.256|
00007a  2105              MOVS     r1,#5
00007c  a321              ADR      r3,|L7.260|
00007e  f44f7200          MOV      r2,#0x200
000082  e9cd1000          STRD     r1,r0,[sp,#0]
000086  a11f              ADR      r1,|L7.260|
000088  4821              LDR      r0,|L7.272|
00008a  f7fffffe          BL       xTaskCreate
;;;116    
;;;117    	//     xTaskCreate((TaskFunction_t)DisplayTask,"Display",Display_Stack,"Display",Display_Prioruty,&Display_Handler);
;;;118    	vTaskStartScheduler();
00008e  f7fffffe          BL       vTaskStartScheduler
;;;119    
;;;120    }
000092  2000              MOVS     r0,#0
000094  bd1c              POP      {r2-r4,pc}
;;;121    
                          ENDP

000096  0000              DCW      0x0000
                  |L7.152|
                          DCD      Net_status
                  |L7.156|
                          DCD      0x40010c10
                  |L7.160|
0000a0  20202020          DCB      "      Intelligent-Security-System",0
0000a4  2020496e
0000a8  74656c6c
0000ac  6967656e
0000b0  742d5365
0000b4  63757269
0000b8  74792d53
0000bc  79737465
0000c0  6d00    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L7.196|
0000c4  73746172          DCB      "start TASK\r\n",0
0000c8  74205441
0000cc  534b0d0a
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L7.212|
                          DCD      ReceiveCmdTask_Handler
                  |L7.216|
0000d8  52656365          DCB      "ReceiveCmdTask",0
0000dc  69766543
0000e0  6d645461
0000e4  736b00  
0000e7  00                DCB      0
                  |L7.232|
                          DCD      ReceiveCmdTask
                  |L7.236|
                          DCD      NetTask_Handler
                  |L7.240|
0000f0  4e65745f          DCB      "Net_Task",0
0000f4  5461736b
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L7.252|
                          DCD      Net_Task
                  |L7.256|
                          DCD      CheckSensor_Handler
                  |L7.260|
000104  43686563          DCB      "Check_Task",0
000108  6b5f5461
00010c  736b00  
00010f  00                DCB      0
                  |L7.272|
                          DCD      CheckSensorTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  data_value
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  jfcode
000000  ffe00010          DCB      0xff,0xe0,0x00,0x10
000004  4a464946          DCB      0x4a,0x46,0x49,0x46
000008  00010100          DCB      0x00,0x01,0x01,0x00
00000c  00010001          DCB      0x00,0x01,0x00,0x01
000010  0000              DCB      0x00,0x00
                  std_luminance_quant_tbl
000012  0010              DCW      0x0010
000014  000b000a          DCW      0x000b,0x000a
000018  00100018          DCW      0x0010,0x0018
00001c  00280033          DCW      0x0028,0x0033
000020  003d000c          DCW      0x003d,0x000c
000024  000c000e          DCW      0x000c,0x000e
000028  0013001a          DCW      0x0013,0x001a
00002c  003a003c          DCW      0x003a,0x003c
000030  0037000e          DCW      0x0037,0x000e
000034  000d0010          DCW      0x000d,0x0010
000038  00180028          DCW      0x0018,0x0028
00003c  00390045          DCW      0x0039,0x0045
000040  0038000e          DCW      0x0038,0x000e
000044  00110016          DCW      0x0011,0x0016
000048  001d0033          DCW      0x001d,0x0033
00004c  00570050          DCW      0x0057,0x0050
000050  003e0012          DCW      0x003e,0x0012
000054  00160025          DCW      0x0016,0x0025
000058  00380044          DCW      0x0038,0x0044
00005c  006d0067          DCW      0x006d,0x0067
000060  004d0018          DCW      0x004d,0x0018
000064  00230037          DCW      0x0023,0x0037
000068  00400051          DCW      0x0040,0x0051
00006c  00680071          DCW      0x0068,0x0071
000070  005c0031          DCW      0x005c,0x0031
000074  0040004e          DCW      0x0040,0x004e
000078  00570067          DCW      0x0057,0x0067
00007c  00790078          DCW      0x0079,0x0078
000080  00650048          DCW      0x0065,0x0048
000084  005c005f          DCW      0x005c,0x005f
000088  00620070          DCW      0x0062,0x0070
00008c  00640067          DCW      0x0064,0x0067
000090  0063              DCW      0x0063
                  std_chrominance_quant_tbl
000092  0011              DCW      0x0011
000094  00120018          DCW      0x0012,0x0018
000098  002f0063          DCW      0x002f,0x0063
00009c  00630063          DCW      0x0063,0x0063
0000a0  00630012          DCW      0x0063,0x0012
0000a4  0015001a          DCW      0x0015,0x001a
0000a8  00420063          DCW      0x0042,0x0063
0000ac  00630063          DCW      0x0063,0x0063
0000b0  00630018          DCW      0x0063,0x0018
0000b4  001a0038          DCW      0x001a,0x0038
0000b8  00630063          DCW      0x0063,0x0063
0000bc  00630063          DCW      0x0063,0x0063
0000c0  0063002f          DCW      0x0063,0x002f
0000c4  00420063          DCW      0x0042,0x0063
0000c8  00630063          DCW      0x0063,0x0063
0000cc  00630063          DCW      0x0063,0x0063
0000d0  00630063          DCW      0x0063,0x0063
0000d4  00630063          DCW      0x0063,0x0063
0000d8  00630063          DCW      0x0063,0x0063
0000dc  00630063          DCW      0x0063,0x0063
0000e0  00630063          DCW      0x0063,0x0063
0000e4  00630063          DCW      0x0063,0x0063
0000e8  00630063          DCW      0x0063,0x0063
0000ec  00630063          DCW      0x0063,0x0063
0000f0  00630063          DCW      0x0063,0x0063
0000f4  00630063          DCW      0x0063,0x0063
0000f8  00630063          DCW      0x0063,0x0063
0000fc  00630063          DCW      0x0063,0x0063
000100  00630063          DCW      0x0063,0x0063
000104  00630063          DCW      0x0063,0x0063
000108  00630063          DCW      0x0063,0x0063
00010c  00630063          DCW      0x0063,0x0063
000110  0063              DCW      0x0063
                  zz_order
000112  0001              DCB      0x00,0x01
000114  05060e0f          DCB      0x05,0x06,0x0e,0x0f
000118  1b1c0204          DCB      0x1b,0x1c,0x02,0x04
00011c  070d101a          DCB      0x07,0x0d,0x10,0x1a
000120  1d2a0308          DCB      0x1d,0x2a,0x03,0x08
000124  0c11191e          DCB      0x0c,0x11,0x19,0x1e
000128  292b090b          DCB      0x29,0x2b,0x09,0x0b
00012c  12181f28          DCB      0x12,0x18,0x1f,0x28
000130  2c350a13          DCB      0x2c,0x35,0x0a,0x13
000134  1720272d          DCB      0x17,0x20,0x27,0x2d
000138  34361416          DCB      0x34,0x36,0x14,0x16
00013c  21262e33          DCB      0x21,0x26,0x2e,0x33
000140  373c1522          DCB      0x37,0x3c,0x15,0x22
000144  252f3238          DCB      0x25,0x2f,0x32,0x38
000148  3b3d2324          DCB      0x3b,0x3d,0x23,0x24
00014c  3031393a          DCB      0x30,0x31,0x39,0x3a
000150  3e3f              DCB      0x3e,0x3f
                  bits_dc_luminance
000152  0000              DCB      0x00,0x00
000154  01050101          DCB      0x01,0x05,0x01,0x01
000158  01010101          DCB      0x01,0x01,0x01,0x01
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  000000            DCB      0x00,0x00,0x00
                  val_dc_luminance
000163  00                DCB      0x00
000164  01020304          DCB      0x01,0x02,0x03,0x04
000168  05060708          DCB      0x05,0x06,0x07,0x08
00016c  090a0b            DCB      0x09,0x0a,0x0b
                  bits_dc_chrominance
00016f  00                DCB      0x00
000170  00030101          DCB      0x00,0x03,0x01,0x01
000174  01010101          DCB      0x01,0x01,0x01,0x01
000178  01010100          DCB      0x01,0x01,0x01,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
                  val_dc_chrominance
000180  00010203          DCB      0x00,0x01,0x02,0x03
000184  04050607          DCB      0x04,0x05,0x06,0x07
000188  08090a0b          DCB      0x08,0x09,0x0a,0x0b
                  bits_ac_luminance
00018c  00000201          DCB      0x00,0x00,0x02,0x01
000190  03030204          DCB      0x03,0x03,0x02,0x04
000194  03050504          DCB      0x03,0x05,0x05,0x04
000198  04000001          DCB      0x04,0x00,0x00,0x01
00019c  7d                DCB      0x7d
                  bits_ac_chrominance
00019d  000002            DCB      0x00,0x00,0x02
0001a0  01020404          DCB      0x01,0x02,0x04,0x04
0001a4  03040705          DCB      0x03,0x04,0x07,0x05
0001a8  04040001          DCB      0x04,0x04,0x00,0x01
0001ac  0277              DCB      0x02,0x77
                  val_ac_luminance
0001ae  0102              DCB      0x01,0x02
0001b0  03000411          DCB      0x03,0x00,0x04,0x11
0001b4  05122131          DCB      0x05,0x12,0x21,0x31
0001b8  41061351          DCB      0x41,0x06,0x13,0x51
0001bc  61072271          DCB      0x61,0x07,0x22,0x71
0001c0  14328191          DCB      0x14,0x32,0x81,0x91
0001c4  a1082342          DCB      0xa1,0x08,0x23,0x42
0001c8  b1c11552          DCB      0xb1,0xc1,0x15,0x52
0001cc  d1f02433          DCB      0xd1,0xf0,0x24,0x33
0001d0  62728209          DCB      0x62,0x72,0x82,0x09
0001d4  0a161718          DCB      0x0a,0x16,0x17,0x18
0001d8  191a2526          DCB      0x19,0x1a,0x25,0x26
0001dc  2728292a          DCB      0x27,0x28,0x29,0x2a
0001e0  34353637          DCB      0x34,0x35,0x36,0x37
0001e4  38393a43          DCB      0x38,0x39,0x3a,0x43
0001e8  44454647          DCB      0x44,0x45,0x46,0x47
0001ec  48494a53          DCB      0x48,0x49,0x4a,0x53
0001f0  54555657          DCB      0x54,0x55,0x56,0x57
0001f4  58595a63          DCB      0x58,0x59,0x5a,0x63
0001f8  64656667          DCB      0x64,0x65,0x66,0x67
0001fc  68696a73          DCB      0x68,0x69,0x6a,0x73
000200  74757677          DCB      0x74,0x75,0x76,0x77
000204  78797a83          DCB      0x78,0x79,0x7a,0x83
000208  84858687          DCB      0x84,0x85,0x86,0x87
00020c  88898a92          DCB      0x88,0x89,0x8a,0x92
000210  93949596          DCB      0x93,0x94,0x95,0x96
000214  9798999a          DCB      0x97,0x98,0x99,0x9a
000218  a2a3a4a5          DCB      0xa2,0xa3,0xa4,0xa5
00021c  a6a7a8a9          DCB      0xa6,0xa7,0xa8,0xa9
000220  aab2b3b4          DCB      0xaa,0xb2,0xb3,0xb4
000224  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
000228  b9bac2c3          DCB      0xb9,0xba,0xc2,0xc3
00022c  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000230  c8c9cad2          DCB      0xc8,0xc9,0xca,0xd2
000234  d3d4d5d6          DCB      0xd3,0xd4,0xd5,0xd6
000238  d7d8d9da          DCB      0xd7,0xd8,0xd9,0xda
00023c  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
000240  e5e6e7e8          DCB      0xe5,0xe6,0xe7,0xe8
000244  e9eaf1f2          DCB      0xe9,0xea,0xf1,0xf2
000248  f3f4f5f6          DCB      0xf3,0xf4,0xf5,0xf6
00024c  f7f8f9fa          DCB      0xf7,0xf8,0xf9,0xfa
                  val_ac_chrominance
000250  00010203          DCB      0x00,0x01,0x02,0x03
000254  11040521          DCB      0x11,0x04,0x05,0x21
000258  31061241          DCB      0x31,0x06,0x12,0x41
00025c  51076171          DCB      0x51,0x07,0x61,0x71
000260  13223281          DCB      0x13,0x22,0x32,0x81
000264  08144291          DCB      0x08,0x14,0x42,0x91
000268  a1b1c109          DCB      0xa1,0xb1,0xc1,0x09
00026c  233352f0          DCB      0x23,0x33,0x52,0xf0
000270  156272d1          DCB      0x15,0x62,0x72,0xd1
000274  0a162434          DCB      0x0a,0x16,0x24,0x34
000278  e125f117          DCB      0xe1,0x25,0xf1,0x17
00027c  18191a26          DCB      0x18,0x19,0x1a,0x26
000280  2728292a          DCB      0x27,0x28,0x29,0x2a
000284  35363738          DCB      0x35,0x36,0x37,0x38
000288  393a4344          DCB      0x39,0x3a,0x43,0x44
00028c  45464748          DCB      0x45,0x46,0x47,0x48
000290  494a5354          DCB      0x49,0x4a,0x53,0x54
000294  55565758          DCB      0x55,0x56,0x57,0x58
000298  595a6364          DCB      0x59,0x5a,0x63,0x64
00029c  65666768          DCB      0x65,0x66,0x67,0x68
0002a0  696a7374          DCB      0x69,0x6a,0x73,0x74
0002a4  75767778          DCB      0x75,0x76,0x77,0x78
0002a8  797a8283          DCB      0x79,0x7a,0x82,0x83
0002ac  84858687          DCB      0x84,0x85,0x86,0x87
0002b0  88898a92          DCB      0x88,0x89,0x8a,0x92
0002b4  93949596          DCB      0x93,0x94,0x95,0x96
0002b8  9798999a          DCB      0x97,0x98,0x99,0x9a
0002bc  a2a3a4a5          DCB      0xa2,0xa3,0xa4,0xa5
0002c0  a6a7a8a9          DCB      0xa6,0xa7,0xa8,0xa9
0002c4  aab2b3b4          DCB      0xaa,0xb2,0xb3,0xb4
0002c8  b5b6b7b8          DCB      0xb5,0xb6,0xb7,0xb8
0002cc  b9bac2c3          DCB      0xb9,0xba,0xc2,0xc3
0002d0  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
0002d4  c8c9cad2          DCB      0xc8,0xc9,0xca,0xd2
0002d8  d3d4d5d6          DCB      0xd3,0xd4,0xd5,0xd6
0002dc  d7d8d9da          DCB      0xd7,0xd8,0xd9,0xda
0002e0  e2e3e4e5          DCB      0xe2,0xe3,0xe4,0xe5
0002e4  e6e7e8e9          DCB      0xe6,0xe7,0xe8,0xe9
0002e8  eaf2f3f4          DCB      0xea,0xf2,0xf3,0xf4
0002ec  f5f6f7f8          DCB      0xf5,0xf6,0xf7,0xf8
0002f0  f9fa              DCB      0xf9,0xfa

                          AREA ||.data||, DATA, ALIGN=2

                  Net_status
000000  0000              DCB      0x00,0x00
                  time_count
000002  003c              DCW      0x003c
                  time_secend
                          DCD      0x00000000
                  NetTask_Handler
                          DCD      0x00000000
                  ReceiveCmdTask_Handler
                          DCD      0x00000000
                  CheckSensor_Handler
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
